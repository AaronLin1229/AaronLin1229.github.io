<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>112年台大資工轉系心路歷程</title>
    <link href="/2023/08/04/112%E5%B9%B4%E5%8F%B0%E5%A4%A7%E8%B3%87%E5%B7%A5%E8%BD%89%E7%B3%BB%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/"/>
    <url>/2023/08/04/112%E5%B9%B4%E5%8F%B0%E5%A4%A7%E8%B3%87%E5%B7%A5%E8%BD%89%E7%B3%BB%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>嗨各位，有鑒於資工系轉系心得文跟資訊不多的緣故，想說分享一下今年轉系成功的心路歷程與心得，希望能如果有學弟妹（或學長姐）也要踏上這條路的話，能給大家更多資訊，來評估自己的狀況再做決定。</p><h2 id="選擇轉系考">選擇轉系考</h2><p>先來自我介紹一下。我是這次轉系考名單裡唯一一位文組學生，物理、化學極差，程式能力不強但是我能樂此不疲。物理指考當初只有40分，認為我用重考/轉學考（都要考物理）的方式也永遠考不進台大資工，因此選擇轉系考的方向努力。</p><p>但選擇轉系考的風險實在大過於其他方式，特別是因為轉系會相對其他制度不透明，比如說可能有些系所，要考的科目很敘述很籠統，如果今天準備了一年的東西，上了考場卻發現考題與自己準備的方向相差很多，那一定會很想吐血的。又有可能因為很多事情變掛，比如說像前兩年因為COVID的原因，資工系轉系也從有上機考變成純資料審查，或是有可能有系所得轉系資格突然在你準備期間變了，或是突然不收轉系或是減少轉系人數，讓你從原本有機會轉系變成不能轉系，相關的資訊可以看看<ahref="https://www.ptt.cc/bbs/SENIORHIGH/M.1615015123.A.37F.html">這篇</a>，大家如果還在有選擇的時候，可以權衡重考/轉系考/轉學考的利弊，選擇自己最適合的路。</p><p>而今年的資工系雙輔的底線GPA變成3.95，而審查方式是100%個人資料審查。儘管3.95已經算高了，但我記得約仍有130/180人報名雙/輔，而都只各取7名，審查資料也沒有明確的評分標準，所以把重心放在轉系應該是相對實際的多的。</p><p>資工系今年的轉系審查方式為50%上機考，50%個人資料審查。</p><h2 id="轉系資格">轉系資格</h2><blockquote><ol start="2" type="1"><li>前一學年每學期等第績分平均GPA達3.38以上，或前一學年成績名次在該班人數前百分之十以內。</li><li>曾修習並通過與資訊工程系必修等同之微積分1、2、3、4(含數學系微積分一、二)。</li></ol></blockquote><p>相信GPA&gt;=3.38對要有在顧成績，想要雙轉輔的各位應該不難，但依照<ahref="https://www.dcard.tw/f/ntu/p/239738674">去年上榜的真強者</a>GPA只有3.39，我認為資工系在過了GPA的底線門檻後，可能依此評判資料審查的分數不大，所以應該可以適時的放開對GPA的執著，把時間拿來挪去練習轉系考之類的。我自己GPA是3.94/4.25，綜合下來應該也算平庸，大家也不用太過擔心GPA的問題。</p><p>而微積分課程只要與資工系的課號相同即可，所以比如說你的微1, 2,3是模組1-12、13-16班，都是可以認抵的。至於微4是不能用商管微4來抵的，所以如果跟我一樣是文組的同學，記得提前規劃微4的課表，看可不可以去簽簽看其他班的微4。因為我當初沒有在大一先修微4，導致大一升大二的時候沒辦法參加轉系考試，等到在暑修期間修完微4之後，再隔一年才能參加轉系考。</p><p>最後，請記得提早準備有關轉系的一切，看好你各位的原系規定跟轉入系的規定，不要功虧一貴了。</p><h2 id="個人資料審查">個人資料審查</h2><blockquote><p>申請者請繳交轉系說明書一份，簡述申請轉系動機、就讀計畫及其他資訊相關能力（格式不拘，但文字以3頁A4為限，請勿超過，證明資料可另計）</p></blockquote><p>關於個人資料，很多人都說大家的分數都差不多，資工系主要還是看轉系考試的分數來決定錄取與否，這點在雙輔的資料上限10頁，而轉的資料上限3頁可見一斑。所以在轉系考試完看一下Leaderboard就大概知道自己會不會上。</p><p>關於這點我們無從驗證，但我想在轉系考上多對三個測資的的幫助可能多於你花了好幾個月做project，然後在個人資料上寫半頁的分數。</p><p>但資工系要求了還是得好好做，我沒有競賽經驗，也沒有什麼專案，所以大部分就圍繞在轉系動機和就讀計畫，並把有修過資工或資訊相關的課程列出來（DSA、ADA、機率、線代，還包含一個EEML）水字數XDD。另外有一個自己架設的Judge，並有擔任過兩堂程式設計課的助教（一堂通識、一堂系上的選修），大概就是這樣。</p><h2 id="轉系考">轉系考</h2><p>轉系考是重頭戲，今年的三題都是考古題，分別是50201. Origami、235.Pachinko、50111. HamiltonianCycle。基本上每年的必考題型有模擬題、二維陣列、遞迴，而其中二維陣列有可能跟模擬結合，比如去年的50085.Tank Simulation，今年很幸運的遞迴跟二維陣列都不算太難，但Pachinko考出來有讓我嚇一跳。Origami跟HamiltonianCycle我總共花了30分鐘就AC了，接著花了大概50分鐘刻Pachinko。最後大概花了1:30AC了三題，最後拿300/300分（每題都是100分），今年前七名分別是300分兩名，270分一名，210分一名，200分兩名，180分一名。如果資工系沒有選擇不足額錄取的話，最低分數180分就上了。</p><p>轉系考跟邦鋒的的計程小考不一樣的地方，有不會限制cyclomaticcomplexity（if, case, while, for,?的數量），以及不會限制全域變數，我覺得這兩點可以多多利用。有時候多用幾個if但讓你的code寫的簡明一點是還蠻輕鬆的，有全域變數可以用也可以讓遞迴寫起來比較輕鬆也比較好Debug。</p><p>另外在轉系說明上也有提到考場可以使用Windows或是Ubuntu，Windows的編譯環境可以選DevC++、CodeBlocks、Notepad++、VSCode、Vim，但Ubuntu上就只能選Vim跟Gedit，環境都很簡單，沒有debugger或是花俏的工具可以使用，要習慣在Code裡面插入printf來Debug，可能是有些人會比較難適應的地方。我之後還是選擇使用Ubuntu搭配Gedit，因為我發現我蠻依賴終端機在寫程式的，怕Windonws的環境水土不服，加上Ubuntu上的diff、hexdump（怕考出Bitoperation的題目），所以才選擇用Ubuntu，但我看到其他人基本上都是用Windows。</p><p>蠻多人都有反應考場螢幕太暗的問題，我在試電腦螢幕的時候發現是可以調螢幕亮度的（按螢幕下方的某顆按鈕），預設好像是在30，我調到70就蠻剛好的了。我記得調整方式應該是蠻直觀的，不然如果亮度太低也不好寫Code。</p><p>另外因為選擇了Ubuntu並搭配Gedit，所以我有先開過虛擬機來模擬我要怎麼把Gedit的perference調成自己習慣的樣子，比如說深色背景、tab的空白格數等等，然後進考場在測試的時候就調成那個樣子。不過並沒有自動補齊下括號的插件，所以這個部分得適應一下。</p><p>進考場的時候會發一張計算紙跟一張C referencecard，但你不會看到這張referencecard之後就會寫C，所以用處不大。硬要說的話可以在破台之後看那個打發時間（誤）。</p><p>另外有點想吐槽的地方是Ubuntu竟然是中文的，有時候終端機在跳錯的時候是寫中文我就有點錯愕不知道是什麼嗚嗚嗚。</p><h2 id="準備轉系考的心路歷程">準備轉系考的心路歷程</h2><p>嗯... 不知道該從哪裡說起。</p><p>（先介紹批改娘：批改娘 a.k.a JudgeGirl，是台大資工大一計程的網站，是一個線上批改系統，裡面有近400題的題目，使用方式是你可以在上面提交題目的code接著批改娘就會自動批改並回傳結果給你，裡面目前有從2015的開始的考古題，轉系考的題目也有大機率是從這裡面挑題出的。外系學生可以掛台大VPN進批改娘，可以找到一個辦理帳號的表單。）</p><p>我覺得這蠻看個人的。因為大家的程式能力其實差蠻多的。有些本來高中就在打程式競賽的人，轉系考對他們來說應該是一塊蛋糕。我自己在高中的時候大概就是會寫迴圈、會寫function，很不清楚pointer跟recursion。我在大一下跟大二上的時候就分別去修了DSA跟ADA，也順便在那時候開了批改娘帳號，寫了將近100題。基礎程式能力從那時候開始比較穩固，但現在回去看我DSA寫的程式碼真的是寫的有夠醜XD。如果要轉系的同學心有餘力的話可以推薦去修DSA，或是其他系的資料結構，因為JudgeGirl上的題目後面很多會接觸到tree, binary search tree, ternary searchtree, linked list, queue,graph（基本上只有概念跟dfs就夠用了，但今年有考出來）, stack, heap, hashtable等等。我認為去修DSA應該是最快讓能把C摸熟的方式，順便熟悉資料結構跟評估你的演算法複雜度等等。其他系的資料結構幾乎都不是用C但還是可以讓你熟悉資料結構，讓你在刷批改娘的時候比較不會那麼痛苦。</p><p>至於兩學期的修課數我都壓在20以下。上學期修了經濟系的個總統/ADA/線代/三學分通識，下學期修了個經/密碼導/機率/EEML/計概/三學分通識/體育。基本上就是不要讓自己太操勞免得沒有時間刷題目。我在上學期的時候大概刷完了批改娘上的BasicIO and Arithmetic Comparison到Stdlib &amp;Preprocessing。在下學期的時候刷完了所有計程的考古題。另外我覺得太難的題目，像是47.Play with Words, Too.，跟Advanced分類是可以跳過的。</p><p>我在刷考古題的過程中，每AC一題就會把我的solution放上hackmd上，上tag並記錄這題的難度以及用時，如果題目的考點特殊或很難的話也會稍微寫一下解題思路跟分析題目。這件事情對我刷第二次考古的時候就蠻有幫助的，比如說有些題目過於簡單就不用再花時間重刷一遍，有些題目可能第二次寫的時候反而沒有第一次順（大概跟打音Game一樣的感覺吧）；或是第二次刷到的時候有了更好的做法等等。那就可以交叉比對，從過去的自己學習。</p><p>在刷第二次考古的過程中，我著重的題目就是recursion/parsing/2d-array。我會把recursion的解題時間都壓在20分鐘以下，2d-array的解題時間壓到30分鐘以下，如果發現時間過長的話，下一輪就會優先著重在這些題目上。</p><p>我的考古題solution可以在我的部落格中找到，希望能幫助到有需要的人，可以從Categories中看年份跟題目，也可以從tags裡面找相對應類型的題目單：<ahref="https://aaronlin1229.github.io/categories/">傳送門</a></p><p>以下是我認為每種題型的重要程度：</p><ul><li>★★★★★：2d-array, 3d-array, parsing, recursion, pointer, string,struct</li><li>★★★★：implementation, constructive, sorting</li><li>★★★：各種資料結構（bst, tree, hash-table, heap...）, file, bit,pointer雖然每年都有說考題的輸入輸出都是從stdio，但為了保險起見我還是把file列了進去。</li></ul><p>特別要注意的像是string, sorting, file,bit等等一些常用函數跟syntax要記起來怎麼使用，比如說strcmp, strcpy,qsort和他的cmp, fopen, fclose, fseek, &lt;&lt;, &gt;&gt;, &amp;,|，繁多不及備載。另外我有時候會使用<code>memcpy()</code>來取代<code>for(int i = 0; i &lt; n; i++) a[i] = b[i];</code></p><p>我認為如果能把array跟recursion都練到精熟的話就十拿九穩了，我考試的時候看到題目的標題就已經知道該怎麼寫了（對我就題庫仔）。</p><p>對於相對沒有基礎的人，我推薦就是買邦鋒的「由片語學習C程式設計」並仔細的看加上實作（不要買到cpp的那本，轉系考不能用cpp），如果還是不行的話邦鋒也有錄課程影片放在YouTube上，也可以去看看。我個人會推薦整本都看完，會對你操作C語言的信心有幫助，但如果來不及的話就挑重點看吧。</p><p>針對遞迴，說起來也覺得很玄，因為一開始總有陣痛期，很常會看不懂為什麼可以這樣寫，但神奇的是寫到一定程度之後會開竅，所以能給的建議就是不要灰心，繼續堅持下去總會有回報的。</p><p>parsing是我在遞迴裡面算是很不熟悉的領域，最近幾年的計程小考常常出現，所以我覺得多加練習的。</p><p>關於2d/3d-array，有蠻多小技巧可以讓寫作比較輕鬆的，比如說需要遍歷<code>x, y</code>周圍的八個點的時候，我們可以： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">iteriate</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[i], now_y = y + dy[i];<br>        <span class="hljs-keyword">if</span>(is_valid(now_x, now_y))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, now_x, now_y);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>這個方式就能讓我們統一的排除掉邊界。又或者某些題目可以直接把整個array往右下移一格，並把邊界的地方補好等等。</p><p>另外在做二維陣列模擬的時候，要記住題目的座標系方向跟你常操作的二維陣列的座標系不同。我們一般在二維陣列當中會認為x+是向右邊，y+是向下面，但比如說50088.MountainTravelers中的x+是往下，y+是向右等等的，建議遇到這種題目的時候可以先手算過一次sample的測資，可以讓你寫code的時候不要碰到太多難以de的bug。</p><p>最後我覺得如果你能暸解一點點C的memory怎麼跑的，或是struct的構造以及eideness，我覺得刷題上也會有一小點點的幫助，會少踩到一點坑。</p><p>接著就是我自己也比較不清楚的部分，今年邦鋒大發瘋，2022計程的題目變得很難，我在考前的時候也在思考會不會因為這樣結果變得很困難。所以考前的時候我瘋狂在背解法比較難或是容易出錯、耗時的題目，比如說50012.Block Mover with Bit Operations、50034. See-saw、50234. MaximumCubic之類的，幸好都沒有出XDD。另外2022的Cubic Tower系列、hashtable系列、heap系列也是會寫的有點小痛苦，我因為怕考出來所以也多複習這段。</p><p>接著很感謝在Dcard上罵我很爛的那些同學，有你們的刺激我才有辦法在只剩最後一哩路的時候精神振奮，把憤怒的心情化做我前進的動力，雖然沒有雙到但我轉系雙回來了。但不推薦大家把自己的弱點放在Dcard上跟大家講，尤其是有關成績的部分，在匿名的環境下絕對會有很多人來嗆你，如果你在轉系上有什麼困難無法跨過的話，可以來找我聊聊，我的email可以在我的部落格中找到，不會跟你們收錢的XDD。</p><p>我最後的批改娘的解題數是370題，其實看著自己每天在批改娘上的ranking一步一步往上攀蠻舒壓的。當我在批改娘寫累的時候就會去刷Codeforces，等心情好一點之後再回來寫，如果一天認真下來的話可以寫15~20題。</p><h2 id="雜七雜八的總結">雜七雜八的總結</h2><p>資工系雖然是大系但是選擇轉系的人意外的不多，所以我覺得以資工作為轉系的標準是個可以努力的方向，但千萬不要把你這年來的所有時間和心力Allin進去，幫自己留好一條不差的退路真的蠻重要的。</p><p>說到底我的轉系之路還蠻樸實的，沒有像其他人一樣的破釜沈舟，就是制定好計畫之後全力衝刺。不要驕傲，不要自負，對自己有信心，就是對自己最好的安排了。</p><p>感謝在我轉系路上支持我的朋友們，在我情緒低落的時候安慰我，也幫助我解決了很多疑難雜症，愛你們。</p>]]></content>
    
    
    
    <tags>
      
      <tag>talk</tag>
      
      <tag>transfer</tag>
      
      <tag>experience</tag>
      
      <tag>NTU</tag>
      
      <tag>CSIE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50000. Alternating Sequence</title>
    <link href="/2023/07/17/judge_girl/50000.%20Alternating%20Sequence/"/>
    <url>/2023/07/17/judge_girl/50000.%20Alternating%20Sequence/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">int</span> k, n;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> count_pos = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> count_neg = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> now_count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_pos</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(count_pos != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(count_pos &gt; k)&#123;<br>            now_count = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count_pos == k)&#123;<br>            now_count++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            now_count = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    ans = max(ans, now_count);<br>    count_pos = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_neg</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(count_neg != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(count_neg == k)&#123;<br>            <span class="hljs-keyword">if</span>(now_count != <span class="hljs-number">0</span>)&#123;<br>                now_count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            now_count = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    count_neg = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// pos</span><br>            update_neg();<br>            count_pos++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// neg</span><br>            update_pos();<br>            count_neg++;<br>        &#125;<br>    &#125;<br>    update_pos();<br>    update_neg();<br><br>    <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">1</span>) ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans * k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>loop</tag>
      
      <tag>online</tag>
      
      <tag>maintain-min-max</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50001. Vehicle</title>
    <link href="/2023/07/17/judge_girl/50001.%20Vehicle/"/>
    <url>/2023/07/17/judge_girl/50001.%20Vehicle/</url>
    
    <content type="html"><![CDATA[<p>難度: 2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">this_abs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -n;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> a, b, c, d, e;<br><span class="hljs-type">int</span> p, q, r, s;<br><span class="hljs-type">int</span> x, y, fuel;<br><span class="hljs-type">int</span> ans_gold = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;p, &amp;q, &amp;r, &amp;s);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;fuel);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_dir</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> this_abs(a * x + b * y) % <span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_gold</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> this_abs(c * x + d * y) % e;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    ans_gold += get_gold();<br>    <span class="hljs-keyword">while</span>(fuel != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> dir = get_dir();<br><br>        <span class="hljs-comment">// update dir</span><br>        <span class="hljs-keyword">if</span>(dir == <span class="hljs-number">0</span>) y++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dir == <span class="hljs-number">1</span>) x++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dir == <span class="hljs-number">2</span>) y--;<br>        <span class="hljs-keyword">else</span> x--;<br><br>        <span class="hljs-comment">// either get gold or get teleported</span><br>        <span class="hljs-keyword">if</span>(x == p &amp;&amp; y == q)&#123;<br>            x = r; y = s;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == r &amp;&amp; y == s)&#123;<br>            x = p; y = q;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans_gold += get_gold();<br>        &#125;<br><br>        fuel--;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans_gold);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, x, y);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50002. Game of Life</title>
    <link href="/2023/07/17/judge_girl/50002.%20Game%20of%20Life/"/>
    <url>/2023/07/17/judge_girl/50002.%20Game%20of%20Life/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5 Used Time: 16:57</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> live_count[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> temp_board[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">map</span>[i][j]);<br>            live_count[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_line</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">is_legal</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">if</span>((x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= n) &amp;&amp; (y &gt;= <span class="hljs-number">1</span>) &amp;&amp; (y &lt;= n)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">count_around</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)&#123;<br>        <span class="hljs-keyword">if</span>(is_legal(x + dx[k], y + dy[k]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[x + dx[k]][y + dy[k]] == <span class="hljs-number">1</span>)&#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>        <span class="hljs-type">int</span> cnt = count_around(i, j);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j] == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">2</span> || cnt == <span class="hljs-number">3</span>) temp_board[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> temp_board[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">3</span>) temp_board[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> temp_board[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>        <span class="hljs-built_in">map</span>[i][j] = temp_board[i][j];<br>    &#125;<br><br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_count</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j] == <span class="hljs-number">1</span>) live_count[i][j]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_max_count</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> max_num = live_count[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>        max_num = max(max_num, live_count[i][j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max_num;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    update_count();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        update_board();<br>        update_count();<br>    &#125;<br><br>    <span class="hljs-type">int</span> max_num = get_max_count();<br>    <span class="hljs-type">int</span> max_x, max_y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>        <span class="hljs-keyword">if</span>(live_count[i][j] == max_num)&#123;<br>            max_x = i; max_y = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) print_line(<span class="hljs-built_in">map</span>[i], n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_x, max_y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50003. Turtle Graphics</title>
    <link href="/2023/07/17/judge_girl/50003.%20Turtle%20Graphics/"/>
    <url>/2023/07/17/judge_girl/50003.%20Turtle%20Graphics/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5 Used Time: 43:08</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">int</span> x, y, l;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">this_abs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -n;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;y, &amp;x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; y; j++)&#123;<br>        <span class="hljs-built_in">map</span>[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">opt_error</span><span class="hljs-params">(<span class="hljs-type">int</span> line_num, <span class="hljs-type">int</span> point_num)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR %d %d\n&quot;</span>, line_num, point_num);<br>    flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> this_x, <span class="hljs-type">int</span> this_y)</span>&#123;<br>    <span class="hljs-keyword">if</span>((this_x &gt;= <span class="hljs-number">0</span> &amp;&amp; this_x &lt; x) &amp;&amp; (this_y &gt;= <span class="hljs-number">0</span> &amp;&amp; this_y &lt; y)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> line_num)</span>&#123;<br>    <span class="hljs-type">int</span> n, old_x, old_y, now_x, now_y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;old_x, &amp;old_y);<br>    <span class="hljs-keyword">if</span>(!is_valid(old_x, old_y))&#123;<br>        opt_error(line_num + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;now_x, &amp;now_y);<br>        <span class="hljs-keyword">if</span>(!is_valid(now_x, now_y))&#123;<br>            opt_error(line_num + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(old_x == now_x)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = min(old_y, now_y); i &lt;= max(old_y, now_y); i++)&#123;<br>                <span class="hljs-built_in">map</span>[old_x][i] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(old_y == now_y)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = min(old_x, now_x); i &lt;= max(old_x, now_x); i++)&#123;<br>                <span class="hljs-built_in">map</span>[i][old_y] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(this_abs(old_x - now_x) == this_abs(old_y - now_y))&#123;<br>            <span class="hljs-type">int</span> d = this_abs(old_x - now_x);<br>            <span class="hljs-type">int</span> ptr_x = old_x, ptr_y = old_y;<br>            <span class="hljs-type">int</span> d_x, d_y;<br>            <span class="hljs-keyword">if</span>(old_x &lt; now_x) d_x = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> d_x = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(old_y &lt; now_y) d_y = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> d_y = <span class="hljs-number">-1</span>;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= d; i++)&#123;<br>                <span class="hljs-built_in">map</span>[ptr_x][ptr_y] = <span class="hljs-number">1</span>;<br>                ptr_x += d_x;<br>                ptr_y += d_y;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            opt_error(line_num + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        old_x = now_x; old_y = now_y;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>        update(i);<br>        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = y - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">map</span>[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50005. Pattern Recognition</title>
    <link href="/2023/07/17/judge_girl/50005.%20Pattern%20Recognition/"/>
    <url>/2023/07/17/judge_girl/50005.%20Pattern%20Recognition/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used Time: 9:58</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, k, m, d;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">12</span>][<span class="hljs-number">12</span>];<br><span class="hljs-type">int</span> target[<span class="hljs-number">12</span>][<span class="hljs-number">12</span>];<br><span class="hljs-type">int</span> ans_x = <span class="hljs-number">-1</span>, ans_y = <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">this_abs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -n;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;k, &amp;m, &amp;d);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;target[i][j]);<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_target</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>        cnt += target[i][j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>        cnt += arr[x + i][y + j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_mismatch</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[x + i][y + j] != target[i][j]) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    <span class="hljs-type">int</span> target_sum = count_target();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - k + <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - k + <span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-type">int</span> mismatch = count_mismatch(i, j);<br>            <span class="hljs-type">int</span> diff = this_abs(count_arr(i, j) - target_sum);<br><br>            <span class="hljs-keyword">if</span>(mismatch &lt;= m &amp;&amp; diff &lt;= d)&#123;<br>                ans_x = i;<br>                ans_y = j;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, ans_x, ans_y);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50006. Expression</title>
    <link href="/2023/07/17/judge_girl/50006.%20Expression/"/>
    <url>/2023/07/17/judge_girl/50006.%20Expression/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>一開始沒想出來好的解法而用中序轉後序爆開做，後來看到morris大神的解法才想出來可以把整個expression改成以<spanclass="math inline">\(+\)</span>及<spanclass="math inline">\(-\)</span>分隔的若干個expressions.</p><h3 id="eval.c">eval.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;eval.h&quot;</span></span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_invalid</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>[])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">exp</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i += <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>[i] &gt; <span class="hljs-number">4</span> || <span class="hljs-built_in">exp</span>[i] &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>[])</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">exp</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span>(check_invalid(<span class="hljs-built_in">exp</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">-2147483646</span>;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> hold_val = <span class="hljs-built_in">exp</span>[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i += <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">exp</span>[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">exp</span>[i];<br><br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)&#123;<br>            ans += hold_val;<br>            hold_val = num;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>)&#123;<br>            ans += hold_val;<br>            hold_val = -num;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>)&#123;<br>            hold_val *= num;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">-2147483647</span>;<br>            <span class="hljs-keyword">else</span> hold_val /= num;<br>        &#125;<br>    &#125;<br><br>    ans += hold_val;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="eval.h">eval.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>[])</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50004. 15 - puzzle</title>
    <link href="/2023/07/17/judge_girl/50004.%2015%20-%20puzzle/"/>
    <url>/2023/07/17/judge_girl/50004.%2015%20-%20puzzle/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 16:24</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> zero_x = <span class="hljs-number">0</span>, zero_y = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">map</span>[i][j]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j] == <span class="hljs-number">0</span>)&#123;<br>            zero_x = i;<br>            zero_y = j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span> &amp;&amp; j == <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j] != i * <span class="hljs-number">4</span> + j + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">if</span>((x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; <span class="hljs-number">4</span>) &amp;&amp; (y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">4</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_line</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, arr[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) print_line(<span class="hljs-built_in">map</span>[i], <span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-comment">// print_board();</span><br><br>    <span class="hljs-type">bool</span> win_flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF &amp;&amp; n != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-type">int</span> neigh_x = zero_x + dx[i], neigh_y = zero_y + dy[i];<br>            <span class="hljs-keyword">if</span>(is_valid(neigh_x, neigh_y) &amp;&amp; <span class="hljs-built_in">map</span>[neigh_x][neigh_y] == n)&#123;<br>                <span class="hljs-built_in">map</span>[neigh_x][neigh_y] = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">map</span>[zero_x][zero_y] = n;<br>                zero_x = neigh_x;<br>                zero_y = neigh_y;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(check())&#123;<br>            win_flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br>    print_board();<br>    <span class="hljs-keyword">if</span>(win_flag == <span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 %d\n&quot;</span>, n);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50010. Word Editor</title>
    <link href="/2023/07/17/judge_girl/50010.%20Word%20Editor/"/>
    <url>/2023/07/17/judge_girl/50010.%20Word%20Editor/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">200500</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-type">char</span> x[<span class="hljs-number">2</span>], y[<span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> buf[<span class="hljs-number">200500</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">replace</span><span class="hljs-params">(<span class="hljs-type">char</span> x, <span class="hljs-type">char</span> y)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == x) s[i] = y;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> _remove(<span class="hljs-type">char</span> x)&#123;<br>    <span class="hljs-type">int</span> buf_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] != x)&#123;<br>            buf[buf_size] = s[i];<br>            buf_size++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; buf_size; i++)&#123;<br>        s[i] = buf[i];<br>    &#125;<br>    s[buf_size] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">addhead</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        buf[i] = s[i];<br>        size++;<br>    &#125;<br>    s[<span class="hljs-number">0</span>] = x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>        s[i + <span class="hljs-number">1</span>] = buf[i];<br>    &#125;<br>    s[size + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">addtail</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-built_in">strlen</span>(s);<br>    s[size] = x;<br>    s[size + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br><br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmd) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(cmd, <span class="hljs-string">&quot;end&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(cmd, <span class="hljs-string">&quot;replace&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, x, y);<br>            replace(x[<span class="hljs-number">0</span>], y[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(cmd, <span class="hljs-string">&quot;remove&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, x);<br>            _remove(x[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(cmd, <span class="hljs-string">&quot;addhead&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, x);<br>            addhead(x[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(cmd, <span class="hljs-string">&quot;addtail&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, x);<br>            addtail(x[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid command %s\n&quot;</span>, cmd);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50009. Snake Order</title>
    <link href="/2023/07/17/judge_girl/50009.%20Snake%20Order/"/>
    <url>/2023/07/17/judge_girl/50009.%20Snake%20Order/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 19:20</p><p>細節多。</p><h3 id="snake.c">snake.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;snake.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_arr_size</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptr)</span>&#123;<br>    ptr++;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(*ptr != <span class="hljs-number">0</span>)&#123;<br>        size++, ptr++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">identify_column</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptr)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;; i++)&#123;<br>        <span class="hljs-keyword">if</span>(ptr[i] != i) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">snake</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptr, <span class="hljs-type">int</span> *row, <span class="hljs-type">int</span> *column)</span> &#123;<br>    <span class="hljs-type">int</span> size = get_arr_size(ptr);<br>    <span class="hljs-type">int</span> c = identify_column(ptr);<br>    <span class="hljs-type">int</span> r = size / c;<br><br>    <span class="hljs-type">int</span>* correct = (<span class="hljs-type">int</span>*) <span class="hljs-built_in">malloc</span>((size + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>    <span class="hljs-type">int</span> now_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>                correct[i * c + j] = now_num;<br>                now_num++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = c - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>                correct[i * c + j] = now_num;<br>                now_num++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    correct[size] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size + <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(ptr[i] != correct[i])&#123;<br>            *row = i / r;<br>            <span class="hljs-keyword">if</span>((*row) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                *column = i % r;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                *column = c - (i % r) - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    *row = r;<br>    *column = c;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="snake.h">snake.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">snake</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptr, <span class="hljs-type">int</span> *row, <span class="hljs-type">int</span> *column)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50008. Pointer Chasing</title>
    <link href="/2023/07/17/judge_girl/50008.%20Pointer%20Chasing/"/>
    <url>/2023/07/17/judge_girl/50008.%20Pointer%20Chasing/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><h3 id="setmatrix.c">setmatrix.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;setmatrix.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">processSetMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> ***ptr)</span> &#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ***a = ptr; *a != <span class="hljs-literal">NULL</span>; a++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> **b = *a; *b != <span class="hljs-literal">NULL</span>; b++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> *c = *b; *c != <span class="hljs-number">0</span>; c++)&#123;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, *c);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, *c);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="setmatrix.h">setmatrix.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">processSetMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> ***ptr)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50012. Block Mover with Bit Operations</title>
    <link href="/2023/07/17/judge_girl/50012.%20Block%20Mover%20with%20Bit%20Operations/"/>
    <url>/2023/07/17/judge_girl/50012.%20Block%20Mover%20with%20Bit%20Operations/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>王八蛋題目。</p><h3 id="version-1-tle">version 1 (TLE)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long int</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printBlock</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, (*block) &gt;&gt; (i * <span class="hljs-number">8</span> + j) &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ull *block, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, <span class="hljs-type">int</span> size)</span> &#123;<br>    *block = (ull)<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = row; i &lt; (row + size); i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = column; j &lt; (column + size); j++)&#123;<br>            (*block) |= (ull)<span class="hljs-number">1</span> &lt;&lt; (i * <span class="hljs-number">8</span> + j);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">moveLeft</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x0101010101010101</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &gt;&gt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">moveRight</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x8080808080808080</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &lt;&lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">moveUp</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x00000000000000FF</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &gt;&gt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">moveDown</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0xFF00000000000000</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &lt;&lt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="verson-60-ac-code-modified-from-morris.">Verson 60 (AC codemodified from Morris.)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> likely(x)   __builtin_expect(!!(x), 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlikely(x) __builtin_expect(!!(x), 0)</span><br><span class="hljs-comment">// #define get_bit(x, y) (((x)&lt;&lt;3)|(y))</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">printBlock</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, (*block) &gt;&gt; (i * <span class="hljs-number">8</span> + j) &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ull *block, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, <span class="hljs-type">int</span> size)</span> &#123;<br>    ull dummy = (<span class="hljs-number">1LLU</span> &lt;&lt; size) - <span class="hljs-number">1</span>, square = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>        square |= dummy;<br>        dummy &lt;&lt;= <span class="hljs-number">8</span>;<br>    &#125;<br> <br>    *block = square &lt;&lt; (row * <span class="hljs-number">8</span> + column);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">moveLeft</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x0101010101010101</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &gt;&gt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">moveRight</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x8080808080808080</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &lt;&lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">moveUp</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0x00000000000000FF</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &gt;&gt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">moveDown</span><span class="hljs-params">(ull *block)</span> &#123;<br>    <span class="hljs-keyword">if</span>((*block) &amp; (ull)<span class="hljs-number">0xFF00000000000000</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        (*block) &lt;&lt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50011. Spell Checker</title>
    <link href="/2023/07/17/judge_girl/50011.%20Spell%20Checker/"/>
    <url>/2023/07/17/judge_girl/50011.%20Spell%20Checker/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, q;<br><span class="hljs-type">char</span> dict[<span class="hljs-number">100005</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">char</span> dict_size[<span class="hljs-number">100005</span>];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, dict[i]);<br>        dict_size[i] = <span class="hljs-built_in">strlen</span>(dict[i]);<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">cmp_same</span><span class="hljs-params">(<span class="hljs-type">char</span> a[], <span class="hljs-type">int</span> size_a, <span class="hljs-type">char</span> b[], <span class="hljs-type">int</span> size_b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size_a != size_b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size_a; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] != b[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">cmp_ignore</span><span class="hljs-params">(<span class="hljs-type">char</span> a[], <span class="hljs-type">int</span> size_a, <span class="hljs-type">char</span> b[], <span class="hljs-type">int</span> size_b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size_a != size_b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">bool</span> ignored = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size_a; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] != b[i])&#123;<br>            <span class="hljs-keyword">if</span>(ignored == <span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ignored = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">cmp_remove</span><span class="hljs-params">(<span class="hljs-type">char</span> a[], <span class="hljs-type">int</span> size_a, <span class="hljs-type">char</span> b[], <span class="hljs-type">int</span> size_b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size_a - <span class="hljs-number">1</span> != size_b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">bool</span> removed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> ptr_a = <span class="hljs-number">0</span>, ptr_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size_a; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[ptr_a] == b[ptr_b])&#123;<br>            ptr_a++;<br>            ptr_b++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(removed == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span>&#123;<br>                removed = <span class="hljs-literal">true</span>;<br>                ptr_a++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">cmp_add</span><span class="hljs-params">(<span class="hljs-type">char</span> a[], <span class="hljs-type">int</span> size_a, <span class="hljs-type">char</span> b[], <span class="hljs-type">int</span> size_b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size_a + <span class="hljs-number">1</span> != size_b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">bool</span> added = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> ptr_a = <span class="hljs-number">0</span>, ptr_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size_b; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[ptr_a] == b[ptr_b])&#123;<br>            ptr_a++;<br>            ptr_b++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(added == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span>&#123;<br>                added = <span class="hljs-literal">true</span>;<br>                ptr_b++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">char</span> target[])</span>&#123;<br>    <span class="hljs-type">int</span> t_size = <span class="hljs-built_in">strlen</span>(target);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(cmp_same(target, t_size, dict[i], dict_size[i]))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;%s\n&quot;</span>, target);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(cmp_ignore(target, t_size, dict[i], dict_size[i]) || cmp_remove(target, t_size, dict[i], dict_size[i]) || cmp_add(target, t_size, dict[i], dict_size[i]))&#123;<br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;?%s&quot;</span>, dict[i]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %s&quot;</span>, dict[i]);<br>            &#125;<br>            cnt++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;!%s&quot;</span>, target);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    <span class="hljs-type">char</span> query_string[<span class="hljs-number">105</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, query_string);<br>        query(query_string);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50014. Selection</title>
    <link href="/2023/07/17/judge_girl/50014.%20Selection/"/>
    <url>/2023/07/17/judge_girl/50014.%20Selection/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 2/5 Used Time: 8:00</p><p><code>13</code>行的<code>n - now_idx &lt; s</code>是必要的剪枝。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;subset.h&quot;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span>*)a - *(<span class="hljs-type">int</span>*)b);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-number">0</span> &amp;&amp; k == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &lt; <span class="hljs-number">0</span> || s &lt; <span class="hljs-number">0</span> || n == now_idx || n - now_idx &lt; s)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> pick =     solve(arr, now_idx + <span class="hljs-number">1</span>, n, k - arr[now_idx], s - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(pick) <span class="hljs-keyword">return</span> pick;<br>        <span class="hljs-type">int</span> not_pick = solve(arr, now_idx + <span class="hljs-number">1</span>, n, k               , s    );<br>        <span class="hljs-keyword">if</span>(not_pick) <span class="hljs-keyword">return</span> not_pick;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>     &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">subset</span><span class="hljs-params">(<span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> S)</span>&#123;<br>    qsort(numbers, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">if</span>(numbers[i] &gt; K) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">return</span> solve(numbers, <span class="hljs-number">0</span>, i, K, S);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="morris-的簡潔寫法">Morris 的簡潔寫法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;subset.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">subset</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> &amp;&amp; s == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &lt; <span class="hljs-number">0</span> || s &lt; <span class="hljs-number">0</span> || n == <span class="hljs-number">0</span> || s &gt; n)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> subset(arr + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, k - arr[<span class="hljs-number">0</span>], s - <span class="hljs-number">1</span>) || subset(arr + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, k, s);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50013. Bingo</title>
    <link href="/2023/07/17/judge_girl/50013.%20Bingo/"/>
    <url>/2023/07/17/judge_girl/50013.%20Bingo/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bingo.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> ull *board)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">7</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, (*board) &gt;&gt; (i * <span class="hljs-number">8</span> + j) &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check_row</span><span class="hljs-params">(<span class="hljs-type">const</span> ull *board)</span>&#123;<br>    ull mask = (ull)<span class="hljs-number">0xFF00000000000000</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(((*board) &amp; mask) == mask) <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">else</span> mask &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check_col</span><span class="hljs-params">(<span class="hljs-type">const</span> ull *board)</span>&#123;<br>    ull mask = (ull)<span class="hljs-number">0x8080808080808080</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(((*board) &amp; mask) == mask) <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">else</span> mask &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check_dig</span><span class="hljs-params">(<span class="hljs-type">const</span> ull *board)</span>&#123;<br>    ull mask_1 = (ull)<span class="hljs-number">0x8040201008040201</span>;<br>    ull mask_2 = (ull)<span class="hljs-number">0x0102040810204080</span>;<br>    <span class="hljs-keyword">if</span>(((*board) &amp; mask_1) == mask_1) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(((*board) &amp; mask_2) == mask_2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">bingo</span><span class="hljs-params">(<span class="hljs-type">const</span> ull *board, <span class="hljs-type">int</span> *rowColumn)</span>&#123;<br>    <span class="hljs-type">int</span> rev_1 = check_row(board);<br>    <span class="hljs-type">int</span> rev_2 = check_col(board);<br>    <span class="hljs-type">int</span> rev_3 = check_dig(board);<br> <br>    <span class="hljs-keyword">if</span>(rev_1 != <span class="hljs-number">-1</span>)&#123;<br>        *rowColumn = rev_1;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rev_2 != <span class="hljs-number">-1</span>)&#123;<br>        *rowColumn = rev_2;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rev_3 != <span class="hljs-number">-1</span>)&#123;<br>        *rowColumn = rev_3;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50016. 15-Puzzle</title>
    <link href="/2023/07/17/judge_girl/50016.%2015-Puzzle/"/>
    <url>/2023/07/17/judge_girl/50016.%2015-Puzzle/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>Second Try: 4.5/5 Used Time: 43:23</p><p>第一次寫爛了，第二次寫了10分鐘就過。注意recursion的時候不要過度依globalvariable，值有可能被覆蓋掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> board[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> solved = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">4</span> &amp;&amp; x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">4</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_info</span><span class="hljs-params">(<span class="hljs-type">int</span>* cnt, <span class="hljs-type">int</span>* z_x, <span class="hljs-type">int</span>* z_y)</span>&#123;<br>    *cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == i * <span class="hljs-number">4</span> + j + <span class="hljs-number">1</span>) (*cnt)++;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-number">0</span>) (*z_x) = i, (*z_y) = j;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span>&#123;<br>    <span class="hljs-type">int</span> cnt, z_x, z_y; get_info(&amp;cnt, &amp;z_x, &amp;z_y);<br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">15</span>)&#123;<br>        solved = <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(d + (<span class="hljs-number">15</span> - cnt) &gt; k)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(d == k) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>        <span class="hljs-type">int</span> neigh_x = z_x + dx[i], neigh_y = z_y + dy[i];<br>        <span class="hljs-keyword">if</span>(is_valid(neigh_x, neigh_y))&#123;<br>            swap(&amp;board[z_x][z_y], &amp;board[neigh_x][neigh_y]);<br>            solve(d + <span class="hljs-number">1</span>);<br>            swap(&amp;board[z_x][z_y], &amp;board[neigh_x][neigh_y]);<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;board[i][j]);<br>            &#125;<br>        &#125;<br><br>        solved = <span class="hljs-number">0</span>;<br>        solve(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, solved);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>I originally calculated cnt_w like: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> now_w = cnt_w;<br><span class="hljs-keyword">if</span>(arr[x][y] == x * <span class="hljs-number">4</span> + y + <span class="hljs-number">1</span>) now_w--;<br><br><span class="hljs-type">int</span> rtv = dfs(arr, now_x, now_y, now_w, k - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure> but this is wrongsuch like you'll possibily move a previously correct tile to a wrongplace.</p><p>Take 2: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span>* y)</span>&#123;<br><span class="hljs-type">int</span> t = *x;<br>*x = *y;<br>*y = t;<br>&#125;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_wrong</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>])</span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span> &amp;&amp; j == <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>; <br><span class="hljs-keyword">if</span>(arr[i][j] != i * <span class="hljs-number">4</span> + j + <span class="hljs-number">1</span>) cnt++;<br>&#125;<br>&#125;<br><span class="hljs-comment">// printf(&quot;&gt;%d&lt;\n&quot;, cnt);</span><br><span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; <span class="hljs-number">4</span> &amp;&amp; y &lt; <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>])</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], j == <span class="hljs-number">3</span> ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> cnt_w, <span class="hljs-type">int</span> k)</span>&#123;<br><span class="hljs-comment">// int cnt_w = count_wrong(arr);</span><br><br><span class="hljs-keyword">if</span>(cnt_w == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(cnt_w &gt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br><span class="hljs-type">int</span> now_x = x + dx[i], now_y = y + dy[i];<br><span class="hljs-keyword">if</span>(!is_valid(now_x, now_y)) <span class="hljs-keyword">continue</span>;<br><br>swap(&amp;arr[x][y], &amp;arr[now_x][now_y]);<br><br><span class="hljs-type">int</span> now_w = cnt_w;<br><span class="hljs-keyword">if</span>(arr[x][y] == x * <span class="hljs-number">4</span> + y + <span class="hljs-number">1</span>) now_w--;<br><br><span class="hljs-type">int</span> rtv = dfs(arr, now_x, now_y, now_w, k - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>swap(&amp;arr[x][y], &amp;arr[now_x][now_y]);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k) != EOF)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br><br><span class="hljs-comment">// for(int i = 0; i &lt; 4; i++) for(int j = 0; j &lt; 4; j++) printf(&quot;%d%c&quot;, arr[i][j], j == 3 ? &#x27;\n&#x27; : &#x27; &#x27;);</span><br><span class="hljs-type">int</span> x, y;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>x = i, y = j;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> rtv = dfs(arr, x, y, count_wrong(arr), k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, rtv);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50019. Medicine</title>
    <link href="/2023/07/17/judge_girl/50019.%20Medicine/"/>
    <url>/2023/07/17/judge_girl/50019.%20Medicine/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>不難，與前一題相似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct Ingredient&#123;</span><br><span class="hljs-comment">    int weight;</span><br><span class="hljs-comment">    char name[128];</span><br><span class="hljs-comment">&#125; Ingredient;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">typedef struct Medicine&#123;</span><br><span class="hljs-comment">    int cnt_active;</span><br><span class="hljs-comment">    Ingredient active[2];</span><br><span class="hljs-comment">    int cnt_inactive;</span><br><span class="hljs-comment">    Ingredient inactive[5];</span><br><span class="hljs-comment">&#125; Medicine;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;medicine.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    Ingredient* ptr_a = (Ingredient*)a;<br>    Ingredient* ptr_b = (Ingredient*)b;<br><br>    <span class="hljs-keyword">if</span>(ptr_a-&gt;weight &lt; ptr_b-&gt;weight) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ptr_a-&gt;weight &gt; ptr_b-&gt;weight) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(ptr_a-&gt;name, ptr_b-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Medicine *med)</span>&#123;<br>    med-&gt;cnt_active = <span class="hljs-number">0</span>;<br>    med-&gt;cnt_inactive = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">addActive</span><span class="hljs-params">(Medicine *med, <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> weight)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_active; i++)&#123; <span class="hljs-comment">// existing</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(med-&gt;active[i].name, name))&#123;<br>            med-&gt;active[i].weight += weight;<br>            <span class="hljs-keyword">return</span> med-&gt;active[i].weight;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(med-&gt;cnt_active == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// add new but full</span><br><br>    <span class="hljs-built_in">strcpy</span>(med-&gt;active[med-&gt;cnt_active].name, name); <span class="hljs-comment">// add new but not full</span><br>    med-&gt;active[med-&gt;cnt_active].weight = weight;<br>    med-&gt;cnt_active += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> weight;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">addInactive</span><span class="hljs-params">(Medicine *med, <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> weight)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_inactive; i++)&#123; <span class="hljs-comment">// existing</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(med-&gt;inactive[i].name, name))&#123;<br>            med-&gt;inactive[i].weight += weight;<br>            <span class="hljs-keyword">return</span> med-&gt;inactive[i].weight;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(med-&gt;cnt_inactive == <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// add new but full</span><br><br>    <span class="hljs-built_in">strcpy</span>(med-&gt;inactive[med-&gt;cnt_inactive].name, name); <span class="hljs-comment">// add new but not full</span><br>    med-&gt;inactive[med-&gt;cnt_inactive].weight = weight;<br>    med-&gt;cnt_inactive += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> weight;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Medicine *med)</span>&#123;<br>    qsort(med-&gt;active, med-&gt;cnt_active, <span class="hljs-keyword">sizeof</span>(Ingredient), cmp);<br>    qsort(med-&gt;inactive, med-&gt;cnt_inactive, <span class="hljs-keyword">sizeof</span>(Ingredient), cmp);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- Active Ingredient begin   -----\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_active; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s\n&quot;</span>, med-&gt;active[i].weight, med-&gt;active[i].name);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- end                       -----\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- Inactive Ingredient begin -----\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_inactive; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s\n&quot;</span>, med-&gt;inactive[i].weight, med-&gt;inactive[i].name);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- end                       -----\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">totalWeight</span><span class="hljs-params">(Medicine *med)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_active; i++)&#123;<br>        ans += med-&gt;active[i].weight;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; med-&gt;cnt_inactive; i++)&#123;<br>        ans += med-&gt;inactive[i].weight;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">maxIngredient</span><span class="hljs-params">(Medicine *med)</span>&#123;<br>    qsort(med-&gt;active, med-&gt;cnt_active, <span class="hljs-keyword">sizeof</span>(Ingredient), cmp);<br>    qsort(med-&gt;inactive, med-&gt;cnt_inactive, <span class="hljs-keyword">sizeof</span>(Ingredient), cmp);<br><br>    <span class="hljs-keyword">if</span>(med-&gt;cnt_active == <span class="hljs-number">0</span> &amp;&amp; med-&gt;cnt_inactive == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(med-&gt;cnt_active == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> med-&gt;inactive[<span class="hljs-number">0</span>].name;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(med-&gt;cnt_inactive == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> med-&gt;active[<span class="hljs-number">0</span>].name;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> c = cmp((<span class="hljs-type">void</span>*)(&amp;med-&gt;active[<span class="hljs-number">0</span>]), (<span class="hljs-type">void</span>*)(&amp;med-&gt;inactive[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> med-&gt;active[<span class="hljs-number">0</span>].name;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> med-&gt;inactive[<span class="hljs-number">0</span>].name;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50015. Words</title>
    <link href="/2023/07/17/judge_girl/50015.%20Words/"/>
    <url>/2023/07/17/judge_girl/50015.%20Words/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5 這題還蠻好玩的。</p><p>Second Try: 3/5 Solved Time: 15:30</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> s_size;<br><span class="hljs-type">int</span> rule[<span class="hljs-number">26</span>][<span class="hljs-number">26</span>];<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    s_size = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s_size; i++)&#123;<br>        cnt[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)&#123;<br>            rule[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">char</span> temp[<span class="hljs-number">3</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, temp);<br>        rule[temp[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>][temp[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_comb</span><span class="hljs-params">(<span class="hljs-type">int</span> cnt[<span class="hljs-number">26</span>], <span class="hljs-type">char</span>* target, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == s_size)&#123;<br>        target[s_size] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, target);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(cnt[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(n != <span class="hljs-number">0</span> &amp;&amp; rule[ target[n - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span> ][i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><br>        cnt[i]--; target[n] = (<span class="hljs-type">char</span>)(i + <span class="hljs-string">&#x27;a&#x27;</span>);<br>        get_comb(cnt, target, n + <span class="hljs-number">1</span>);<br>        target[n] = <span class="hljs-string">&#x27;\0&#x27;</span>; cnt[i]++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    ipt();<br><br>    <span class="hljs-type">char</span> target[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    get_comb(cnt, target, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50017. Expression</title>
    <link href="/2023/07/17/judge_girl/50017.%20Expression/"/>
    <url>/2023/07/17/judge_girl/50017.%20Expression/</url>
    
    <content type="html"><![CDATA[<p>難度：4.8/5</p><p>難但是不到做不出來。</p><p>要注意edge cases：operator減號跟負號的地方該怎麼決定。</p><p>Second Try: 3.5/5 Used Time: 20:25 Used Time: 11:01</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;expression.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> err_num -2147483648</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_op</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> finish, <span class="hljs-type">int</span>* pos)</span>&#123;<br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> seen_int = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start + <span class="hljs-number">1</span>; i &lt; finish - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-type">char</span> ch = <span class="hljs-built_in">string</span>[i];<br><br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;(&#x27;</span>) step++;<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;)&#x27;</span>) step--;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(ch)) seen_int = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span>(seen_int == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(step &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(step == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                *pos = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                *pos = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                *pos = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                *pos = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">expressionEval</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> finish)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(<span class="hljs-built_in">string</span>[start]))&#123; <span class="hljs-comment">// case 1</span><br>        <span class="hljs-keyword">if</span>(start + <span class="hljs-number">1</span> != finish) <span class="hljs-keyword">return</span> err_num;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>[start] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">string</span>[start] == <span class="hljs-string">&#x27;-&#x27;</span>)&#123; <span class="hljs-comment">// case 2</span><br>        <span class="hljs-keyword">return</span> -(expressionEval(<span class="hljs-built_in">string</span>, start + <span class="hljs-number">1</span>, finish));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">string</span>[start] == <span class="hljs-string">&#x27;(&#x27;</span>)&#123; <span class="hljs-comment">// case 3, 4</span><br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> op_case = find_op(<span class="hljs-built_in">string</span>, start, finish, &amp;pos);<br><br>        <span class="hljs-keyword">if</span>(op_case != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> f = expressionEval(<span class="hljs-built_in">string</span>, start + <span class="hljs-number">1</span>, pos);<br>            <span class="hljs-type">int</span> s = expressionEval(<span class="hljs-built_in">string</span>, pos  + <span class="hljs-number">1</span>, finish - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(f == err_num || s == err_num) <span class="hljs-keyword">return</span> err_num;<br><br>            <span class="hljs-keyword">if</span>(op_case == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// +</span><br>                <span class="hljs-keyword">return</span> f + s;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op_case == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// -</span><br>                <span class="hljs-keyword">return</span> f - s;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op_case == <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// *</span><br>                <span class="hljs-keyword">return</span> f * s;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op_case == <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">// /</span><br>                <span class="hljs-keyword">if</span>(s == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> err_num;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f / s;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> err_num;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> err_num;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">expression</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> expressionEval(<span class="hljs-built_in">string</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">string</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="edge-case-input">Edge Case Input</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">(3<span class="hljs-string">+5</span>)<br>(3+<span class="hljs-string">-5</span>)<br>(3-<span class="hljs-string">-5</span>)<br>(<span class="hljs-string">-3</span><span class="hljs-string">+5</span>)<br>(<span class="hljs-string">-3</span>+<span class="hljs-string">-5</span>)<br>(-<span class="hljs-string">-3</span><span class="hljs-string">+5</span>)<br>(-<span class="hljs-string">-3</span>--<span class="hljs-string">-5</span>)<br></code></pre></td></tr></table></figure><h3 id="edge-case-output">Edge Case Output</h3><p>``` 8 -2 8 2 -8 8 -2</p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>recursion</tag>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50020. Generic Index Array</title>
    <link href="/2023/07/17/judge_girl/50020.%20Generic%20Index%20Array/"/>
    <url>/2023/07/17/judge_girl/50020.%20Generic%20Index%20Array/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>注意<code>cmp</code>函式的越界問題。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct ARRAY&#123;</span><br><span class="hljs-comment">    int num[2050];</span><br><span class="hljs-comment">    int left;</span><br><span class="hljs-comment">    int num_size;</span><br><span class="hljs-comment">&#125; ARRAY;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;array.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> num_a = *(<span class="hljs-type">int</span>*)a;<br>    <span class="hljs-type">int</span> num_b = *(<span class="hljs-type">int</span>*)b;<br>    <span class="hljs-keyword">if</span>(num_a &gt; num_b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num_a == num_b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ARRAY *a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>    a-&gt;left = left;<br>    a-&gt;num_size = right - left + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a-&gt;num_size; i++)&#123;<br>        a-&gt;num[i] = <span class="hljs-number">-2147483647</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ARRAY *a, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index - (a-&gt;left) &lt; (a-&gt;num_size) &amp;&amp; index - (a-&gt;left) &gt;= <span class="hljs-number">0</span>)&#123;<br>        a-&gt;num[index - a-&gt;left] = value;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-2147483648</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(ARRAY *a, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index - (a-&gt;left) &lt; (a-&gt;num_size) &amp;&amp; index - (a-&gt;left) &gt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;num[index - a-&gt;left];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-2147483648</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(ARRAY *a)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (a-&gt;num_size); i++)&#123;<br>        <span class="hljs-keyword">if</span>(a-&gt;num[i] == <span class="hljs-number">-2147483647</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No value\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a-&gt;num[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(ARRAY *a)</span>&#123;<br>    qsort(a-&gt;num, a-&gt;num_size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50018. Map</title>
    <link href="/2023/07/17/judge_girl/50018.%20Map/"/>
    <url>/2023/07/17/judge_girl/50018.%20Map/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>實作不難，難在猜複雜度跟猜題目意義。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct Pair&#123;</span><br><span class="hljs-comment">    int key;</span><br><span class="hljs-comment">    char value[128];</span><br><span class="hljs-comment">&#125; Pair;</span><br><span class="hljs-comment">typedef struct Map&#123;</span><br><span class="hljs-comment">    int map_size;</span><br><span class="hljs-comment">    Pair data[1024];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;map.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_pair</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (((Pair*)a)-&gt;key) - (((Pair*)b)-&gt;key);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_key</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span>*)a - *(<span class="hljs-type">int</span>*)b;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>)</span>&#123;<br>    <span class="hljs-built_in">map</span>-&gt;map_size = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">map</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>, <span class="hljs-type">const</span> <span class="hljs-type">int</span> key, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">map</span>-&gt;map_size; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>-&gt;data[i].key == key)&#123;<br>            <span class="hljs-built_in">strcpy</span>(<span class="hljs-built_in">map</span>-&gt;data[i].value, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">map</span>-&gt;data[<span class="hljs-built_in">map</span>-&gt;map_size].key = key;<br>    <span class="hljs-built_in">strcpy</span>(<span class="hljs-built_in">map</span>-&gt;data[<span class="hljs-built_in">map</span>-&gt;map_size].value, value);<br>    <span class="hljs-built_in">map</span>-&gt;map_size++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">numPairs</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>-&gt;map_size;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>)</span>&#123;<br>    qsort(<span class="hljs-built_in">map</span>-&gt;data, <span class="hljs-built_in">map</span>-&gt;map_size, <span class="hljs-keyword">sizeof</span>(Pair), cmp_pair);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- map begin -----\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">map</span>-&gt;map_size; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s\n&quot;</span>, <span class="hljs-built_in">map</span>-&gt;data[i].key, <span class="hljs-built_in">map</span>-&gt;data[i].value);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----- end       -----\n&quot;</span>);<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">getValue</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>, <span class="hljs-type">const</span> <span class="hljs-type">int</span> key)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">map</span>-&gt;map_size; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>-&gt;data[i].key == key)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>-&gt;data[i].value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unmap</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>, <span class="hljs-type">int</span> key)</span>&#123;<br>    <span class="hljs-type">int</span> key_pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(key_pos = <span class="hljs-number">0</span>; key_pos &lt; <span class="hljs-built_in">map</span>-&gt;map_size; key_pos++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>-&gt;data[key_pos].key == key) <span class="hljs-keyword">break</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(key_pos == <span class="hljs-built_in">map</span>-&gt;map_size) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = key_pos; i &lt; <span class="hljs-built_in">map</span>-&gt;map_size - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-built_in">map</span>-&gt;data[i] = <span class="hljs-built_in">map</span>-&gt;data[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-built_in">map</span>-&gt;map_size -= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">reverseMap</span><span class="hljs-params">(Map *<span class="hljs-built_in">map</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value, <span class="hljs-type">int</span> keys[])</span>&#123;<br>    <span class="hljs-type">int</span> key_size = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">map</span>-&gt;map_size; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">map</span>-&gt;data[i].value, value))&#123;<br>            keys[key_size] = <span class="hljs-built_in">map</span>-&gt;data[i].key;<br>            key_size++;<br>        &#125;<br>    &#125;<br> <br>    qsort(keys, key_size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp_key);<br>    <span class="hljs-keyword">return</span> key_size;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50007. Yard, Foot, and Inch</title>
    <link href="/2023/07/17/judge_girl/50007.%20Yard,%20Foot,%20and%20Inch/"/>
    <url>/2023/07/17/judge_girl/50007.%20Yard,%20Foot,%20and%20Inch/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><h3 id="length.c">length.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">get_inches</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>])</span>&#123;<br>    <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>] * <span class="hljs-number">36</span> + arr[<span class="hljs-number">1</span>] * <span class="hljs-number">12</span> + arr[<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deal_inches</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> l)</span>&#123;<br>    arr[<span class="hljs-number">0</span>] = l / <span class="hljs-number">36</span>; l %= <span class="hljs-number">36</span>;<br>    arr[<span class="hljs-number">1</span>] = l / <span class="hljs-number">12</span>; l %= <span class="hljs-number">12</span>;<br>    arr[<span class="hljs-number">2</span>] = l;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) arr[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> l)</span>&#123;<br>    deal_inches(arr, get_inches(arr) + l);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> arr_a[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_b[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_c[<span class="hljs-number">3</span>])</span>&#123;<br>    deal_inches(arr_c, get_inches(arr_a) + get_inches(arr_b));<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">diff</span><span class="hljs-params">(<span class="hljs-type">int</span> arr_a[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_b[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_c[<span class="hljs-number">3</span>])</span>&#123;<br>    deal_inches(arr_c, get_inches(arr_a) - get_inches(arr_b));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="length.h">length.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> l)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> arr_a[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_b[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_c[<span class="hljs-number">3</span>])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">diff</span><span class="hljs-params">(<span class="hljs-type">int</span> arr_a[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_b[<span class="hljs-number">3</span>], <span class="hljs-type">int</span> arr_c[<span class="hljs-number">3</span>])</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50022. Matrix</title>
    <link href="/2023/07/17/judge_girl/50022.%20Matrix/"/>
    <url>/2023/07/17/judge_girl/50022.%20Matrix/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>backtracking的技術還要再改進，寫了100多行，之後看Morris的code來改進。</p><p>Second Try: 3.5/5 Used Time: 20:24 (used 79 lines)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> m, n;<br><span class="hljs-type">int</span> max_num;<br><span class="hljs-type">int</span> r[<span class="hljs-number">16</span>], c[<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> board[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> used_cnt;<br><span class="hljs-type">bool</span> used[<span class="hljs-number">17</span>] = &#123;<span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_row</span><span class="hljs-params">(<span class="hljs-type">int</span> row_num)</span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        sum += board[row_num][i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum == r[row_num];<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_col</span><span class="hljs-params">(<span class="hljs-type">int</span> col_num)</span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        sum += board[i][col_num];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum == c[col_num];<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">board_filled</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">board_is_valid</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(check_row(i) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(check_col(i) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_next_cell</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i * n + j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_line</span><span class="hljs-params">(<span class="hljs-type">int</span> row_num)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, board[row_num][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, board[row_num][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) print_line(i);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(board_filled() == <span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(board_is_valid() == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> tmp = find_next_cell();<br>        <span class="hljs-type">int</span> next_cell_x = tmp / n, next_cell_y = tmp % n;<br><br>        <span class="hljs-comment">// pruning</span><br>        <span class="hljs-keyword">if</span>(next_cell_x == m - <span class="hljs-number">1</span> &amp;&amp; next_cell_y != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(check_col(next_cell_y - <span class="hljs-number">1</span>) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(next_cell_x &gt; <span class="hljs-number">0</span> &amp;&amp; next_cell_y == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(check_row(next_cell_x - <span class="hljs-number">1</span>) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= max_num; i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i] == <span class="hljs-literal">true</span>) <span class="hljs-keyword">continue</span>;<br><br>            board[next_cell_x][next_cell_y] = i;<br>            used[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(solve() == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            board[next_cell_x][next_cell_y] = <span class="hljs-number">0</span>;<br>            used[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>        board[next_cell_x][next_cell_y] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n) != EOF)&#123;<br>        max_num = m * n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c[i]);<br><br>        used_cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= max_num; i++) used[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) board[i][j] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(solve())&#123;<br>            print_board();<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no solution\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50021. Polynomial</title>
    <link href="/2023/07/17/judge_girl/50021.%20Polynomial/"/>
    <url>/2023/07/17/judge_girl/50021.%20Polynomial/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>這題我寫得有點醜，有時間再改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct Polynomial&#123;</span><br><span class="hljs-comment">    int degree;</span><br><span class="hljs-comment">    int coff[4096];</span><br><span class="hljs-comment">&#125;Polynomial;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;polynomial.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">max_func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Polynomial *poly, <span class="hljs-type">int</span> coefficient[], <span class="hljs-type">int</span> n)</span>&#123;<br>    poly-&gt;degree = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        poly-&gt;coff[i] = coefficient[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n + <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4096</span>; i++)&#123;<br>        poly-&gt;coff[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br>Polynomial <span class="hljs-title function_">add</span><span class="hljs-params">(Polynomial *poly1, Polynomial *poly2)</span>&#123;<br>    <span class="hljs-type">int</span> coff[<span class="hljs-number">4096</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4096</span>; i++)&#123;<br>        coff[i] = poly1-&gt;coff[i] + poly2-&gt;coff[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> max_deg;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">4095</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">if</span>(coff[i] != <span class="hljs-number">0</span>)&#123;<br>            max_deg = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    max_deg = max_func(max_deg, <span class="hljs-number">0</span>);<br><br>    Polynomial ans;<br>    ans.degree = max_deg;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4096</span>; i++)&#123;<br>        ans.coff[i] = coff[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br>Polynomial <span class="hljs-title function_">multiply</span><span class="hljs-params">(Polynomial *poly1, Polynomial *poly2)</span>&#123;<br>    <span class="hljs-type">int</span> coff[<span class="hljs-number">4096</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= poly1-&gt;degree; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= poly2-&gt;degree; j++)&#123;<br>            coff[i + j] += poly1-&gt;coff[i] * poly2-&gt;coff[j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> max_deg;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">4095</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">if</span>(coff[i] != <span class="hljs-number">0</span>)&#123;<br>            max_deg = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    max_deg = max_func(max_deg, <span class="hljs-number">0</span>);<br><br>    Polynomial ans;<br>    ans.degree = max_deg;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4096</span>; i++)&#123;<br>        ans.coff[i] = coff[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Polynomial *poly)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = poly-&gt;degree; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">if</span>(poly-&gt;coff[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+dx^%d&quot;</span>, poly-&gt;coff[i], i);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+dx&quot;</span>, poly-&gt;coff[i]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+d&quot;</span>, poly-&gt;coff[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50025. Independent People</title>
    <link href="/2023/07/17/judge_girl/50025.%20Independent%20People/"/>
    <url>/2023/07/17/judge_girl/50025.%20Independent%20People/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>又再度參拜了Morris大神的Code，解的非常漂亮，這題要再複習。</p><p>Second Try: 4/5 Used Time: 35:10</p><h2 id="version-1-code-tle-95">Version 1 Code (TLE, 95%)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br> <br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> graph[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">bool</span> can_choose[<span class="hljs-number">105</span>];<br><span class="hljs-type">bool</span> choosen[<span class="hljs-number">105</span>];<br> <br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">choose_person</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> temp_arr[])</span>&#123;<br>    choosen[p] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)temp_arr[i] = can_choose[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">if</span>(graph[p][i] == <span class="hljs-number">1</span>) can_choose[i] = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">revert_person</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> temp_arr[])</span>&#123;<br>    choosen[p] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) can_choose[i] = temp_arr[i];<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_choosen</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(choosen[i] == <span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, i);<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-type">bool</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> level, <span class="hljs-type">int</span> start)</span>&#123;<br>    <span class="hljs-keyword">if</span>(level == m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <br>    <span class="hljs-type">int</span> can_choose_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start; i &lt; n; i++) <span class="hljs-keyword">if</span>(can_choose[i] == <span class="hljs-literal">true</span>) can_choose_num += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(can_choose_num + level &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(can_choose[i] == <span class="hljs-literal">false</span> || choosen[i] == <span class="hljs-literal">true</span>) <span class="hljs-keyword">continue</span>;<br> <br>        <span class="hljs-type">int</span> temp_arr[<span class="hljs-number">105</span>];<br>        choose_person(i, temp_arr);<br>        <span class="hljs-keyword">if</span>(solve(level + <span class="hljs-number">1</span>, start + <span class="hljs-number">1</span>) == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        revert_person(i, temp_arr);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m) != EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;graph[i][j]);<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            choosen[i] = <span class="hljs-literal">false</span>;<br>            can_choose[i] = <span class="hljs-literal">true</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span>(solve(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) == <span class="hljs-literal">true</span>) print_choosen();<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no solution\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="version-2-code-ac-modified-from-morris">Version 2 Code (AC,modified from Morris)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> g[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, arr[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> cdt[], <span class="hljs-type">int</span> cdt_size, <span class="hljs-type">int</span> ans[], <span class="hljs-type">int</span> ans_size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(ans_size == k)&#123;<br>        print_arr(ans, ans_size);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(cdt_size == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(cdt_size + ans_size &lt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-type">int</span> cdt_choose[<span class="hljs-number">105</span>], cdt_choose_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; cdt_size; i++)&#123;<br>        <span class="hljs-keyword">if</span>(g[cdt[<span class="hljs-number">0</span>]][cdt[i]] == <span class="hljs-number">0</span>)&#123;<br>            cdt_choose[cdt_choose_size] = cdt[i];<br>            cdt_choose_size++;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-type">int</span> ans_choose[<span class="hljs-number">105</span>], ans_choose_size = ans_size  + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans_size; i++)&#123;<br>        ans_choose[i] = ans[i];<br>    &#125;<br>    ans_choose[ans_size] = cdt[<span class="hljs-number">0</span>];<br> <br> <br>    <span class="hljs-keyword">return</span> solve(cdt + <span class="hljs-number">1</span>, cdt_size - <span class="hljs-number">1</span>, ans, ans_size) || solve(cdt_choose, cdt_choose_size, ans_choose, ans_choose_size);<br> <br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k) == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<br> <br>        <span class="hljs-type">int</span> cdt[<span class="hljs-number">105</span>], cdt_size = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cdt[i] = i;<br> <br>        <span class="hljs-type">int</span> ans[<span class="hljs-number">105</span>], ans_size = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(!solve(cdt, cdt_size, ans, ans_size)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no solution\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50023. Combination Lock</title>
    <link href="/2023/07/17/judge_girl/50023.%20Combination%20Lock/"/>
    <url>/2023/07/17/judge_girl/50023.%20Combination%20Lock/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;locker.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct Lock&#123;</span><br><span class="hljs-comment">    int is_locked;</span><br><span class="hljs-comment">    int password;</span><br><span class="hljs-comment">&#125; Lock;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Lock *lock)</span>&#123;<br>    lock-&gt;is_locked = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">lock</span><span class="hljs-params">(Lock *lock, <span class="hljs-type">int</span> combination)</span>&#123;<br>    <span class="hljs-keyword">if</span>(lock-&gt;is_locked == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(combination &gt;= <span class="hljs-number">10000</span> || combination &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">10000</span>;<br><br>    lock-&gt;is_locked = <span class="hljs-number">1</span>;<br>    lock-&gt;password = combination;<br>    <span class="hljs-keyword">return</span> combination;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(Lock *lock, <span class="hljs-type">int</span> combination)</span>&#123;<br>    <span class="hljs-keyword">if</span>(lock-&gt;is_locked == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span>(lock-&gt;password == combination)&#123;<br>        lock-&gt;is_locked = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">(Lock *lock)</span>&#123;<br>    <span class="hljs-keyword">return</span> lock-&gt;is_locked;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50026. A Better Word Count</title>
    <link href="/2023/07/17/judge_girl/50026.%20A%20Better%20Word%20Count/"/>
    <url>/2023/07/17/judge_girl/50026.%20A%20Better%20Word%20Count/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Syntax記一下，還有數字數的方法也能記一下，其他應該就沒什麼大礙。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_line</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;<br>    FILE *f = fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">2000</span>];<br>    <span class="hljs-keyword">while</span>(fgets(buf, <span class="hljs-number">2000</span>, f))&#123;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_word</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;<br>    FILE *f = fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">2000</span>];<br>    <span class="hljs-keyword">while</span>(fgets(buf, <span class="hljs-number">2000</span>, f))&#123;<br>        <span class="hljs-type">int</span> temp_cnt = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(buf);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isalpha</span>(buf[i]))&#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isalpha</span>(buf[i]))&#123;<br>                    i++;<br>                &#125;<br>                cnt++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_size</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;<br>    FILE *f = fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>);<br>    fseek(f, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-type">int</span> res = ftell(f);<br>    fclose(f);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> file_name[<span class="hljs-number">1024</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, file_name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, count_line(file_name), count_word(file_name), count_size(file_name));<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50028. Subtrees</title>
    <link href="/2023/07/17/judge_girl/50028.%20Subtrees/"/>
    <url>/2023/07/17/judge_girl/50028.%20Subtrees/</url>
    
    <content type="html"><![CDATA[<p>難度：4.25/5</p><p>Second Try: 4/5 Used Time: 15:20</p><p>I just can't think of it...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;subtree.h&quot;</span></span><br><br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(Node* root, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l = solve(root-&gt;left, k, arr);<br>    <span class="hljs-type">int</span> r = solve(root-&gt;right, k, arr);<br>    <span class="hljs-keyword">if</span>((l) &amp;&amp; (r) &amp;&amp; (root-&gt;label != k))&#123;<br>        arr[n++] = root-&gt;label;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (l) || (r) || (root-&gt;label == k);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getNode</span><span class="hljs-params">(Node *root, <span class="hljs-type">int</span> label[], <span class="hljs-type">int</span> k)</span>&#123;<br>    n = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>* arr = label;<br>    solve(root, k, label);<br><br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50027. File Sorter</title>
    <link href="/2023/07/17/judge_girl/50027.%20File%20Sorter/"/>
    <url>/2023/07/17/judge_girl/50027.%20File%20Sorter/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br> <br>Account tmp;<br>Account arr[<span class="hljs-number">65536</span>];<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">(Account* a)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %s, %d\n&quot;</span>, a-&gt;balance, a-&gt;name, a-&gt;gender);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check_balance</span><span class="hljs-params">(<span class="hljs-type">int</span> balance)</span>&#123;<br>    <span class="hljs-keyword">return</span> balance &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">check_name</span><span class="hljs-params">(<span class="hljs-type">char</span>* name)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-built_in">isalpha</span>(name[i])) &amp;&amp; (name[i] != <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">check_gender</span><span class="hljs-params">(<span class="hljs-type">int</span> gender)</span>&#123;<br>    <span class="hljs-keyword">return</span> (gender == <span class="hljs-number">0</span>) || (gender == <span class="hljs-number">1</span>);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check_valid</span><span class="hljs-params">(Account* a)</span>&#123;<br>    <span class="hljs-keyword">return</span> check_balance(a-&gt;balance) &amp;&amp; check_name(a-&gt;name) &amp;&amp; check_gender(a-&gt;gender);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    Account* act_a = (Account*)a;<br>    Account* act_b = (Account*)b;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(act_a-&gt;name, act_b-&gt;name);<br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> in_dir[<span class="hljs-number">256</span>], out_dir[<span class="hljs-number">256</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, in_dir, out_dir);<br> <br>    FILE* f_in = fopen(in_dir, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* f_out = fopen(out_dir, <span class="hljs-string">&quot;wb&quot;</span>);<br> <br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(fread(&amp;tmp, <span class="hljs-keyword">sizeof</span>(Account), <span class="hljs-number">1</span>, f_in))&#123;<br>        <span class="hljs-keyword">if</span>(check_valid(&amp;tmp)) arr[n++] = tmp;<br>    &#125;<br>    qsort(arr, n, <span class="hljs-keyword">sizeof</span>(Account), cmp);<br>    fwrite(arr, <span class="hljs-keyword">sizeof</span>(Account), n, f_out);<br> <br>    fclose(f_in);<br>    fclose(f_out);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50024. Grade</title>
    <link href="/2023/07/17/judge_girl/50024.%20Grade/"/>
    <url>/2023/07/17/judge_girl/50024.%20Grade/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">problem</span>&#123;</span><br>    <span class="hljs-type">int</span> no_answer;<br>    <span class="hljs-type">bool</span> ans[<span class="hljs-number">5</span>];<br>&#125; problem;<br><br><span class="hljs-type">int</span> n, r, w;<br><span class="hljs-type">int</span> m;<br>problem correct[<span class="hljs-number">55</span>];<br>problem student[<span class="hljs-number">55</span>];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_problem_ipt</span><span class="hljs-params">(problem* p)</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">16</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) p-&gt;ans[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(s, <span class="hljs-string">&quot;N/A&quot;</span>))&#123;<br>        p-&gt;no_answer = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        p-&gt;no_answer = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">char</span> ch = s[i];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">islower</span>(ch))&#123;<br>                p-&gt;ans[ch - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p-&gt;ans[ch - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">compare_ans</span><span class="hljs-params">(problem* cor, problem* stu)</span>&#123;<br>    <span class="hljs-keyword">if</span>(stu-&gt;no_answer == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(cor-&gt;ans[i] != stu-&gt;ans[i]) <span class="hljs-keyword">return</span> -w;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;r, &amp;w) != EOF)&#123;<br>        <span class="hljs-comment">// get correct ans</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) get_problem_ipt(&amp;correct[i]);<br><br>        <span class="hljs-comment">// get student ans</span><br>        <span class="hljs-type">int</span> m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) get_problem_ipt(&amp;student[i]);<br><br>            <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>                ans += compare_ans(&amp;correct[i], &amp;student[i]);<br>            &#125;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max(ans, <span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50029. Tree Construction</title>
    <link href="/2023/07/17/judge_girl/50029.%20Tree%20Construction/"/>
    <url>/2023/07/17/judge_girl/50029.%20Tree%20Construction/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>Second Try: 2/5 Used Time: 10:25</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><br>Node* <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> now)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    Node* root = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    root-&gt;label = arr[now];<br>    root-&gt;left = solve(arr, n, now * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>    root-&gt;right = solve(arr, n, now * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br>Node* <span class="hljs-title function_">construct</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> solve(<span class="hljs-built_in">array</span>, n, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50030. Activity Selection (special judge)</title>
    <link href="/2023/07/17/judge_girl/50030.%20Activity%20Selection%20(special%20judge)/"/>
    <url>/2023/07/17/judge_girl/50030.%20Activity%20Selection%20(special%20judge)/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>有Hint的話就不會太難。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;activity.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// typedef struct activity &#123;</span><br><span class="hljs-comment">//     int start;</span><br><span class="hljs-comment">//     int end;</span><br><span class="hljs-comment">// &#125; Activity;</span><br><br><span class="hljs-comment">// #define PRINT</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    Activity* act_a = (Activity*)a;<br>    Activity* act_b = (Activity*)b;<br>    <span class="hljs-keyword">if</span>(act_a-&gt;end &gt; act_b-&gt;end) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(act_a-&gt;end &lt; act_b-&gt;end) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> act_a-&gt;start - act_b-&gt;start;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(Activity activities[], <span class="hljs-type">int</span> n)</span>&#123;<br>    qsort(activities, n, <span class="hljs-keyword">sizeof</span>(Activity), cmp);<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> now_time = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(activities[i].start &gt;= now_time)&#123;<br>            cnt += <span class="hljs-number">1</span>;<br>            now_time = activities[i].end;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PRINT</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, activities[i].start, activities[i].end);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50031. Pairing</title>
    <link href="/2023/07/17/judge_girl/50031.%20Pairing/"/>
    <url>/2023/07/17/judge_girl/50031.%20Pairing/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">num</span>&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> idx;<br>&#125; num;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pair</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">num</span>* <span class="hljs-title">a</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">num</span>* <span class="hljs-title">b</span>;</span><br>    <span class="hljs-type">int</span> sum;<br>&#125; <span class="hljs-built_in">pair</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_num</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    num* num_a = (num*)a;<br>    num* num_b = (num*)b;<br>    <span class="hljs-keyword">return</span> num_a-&gt;val - num_b-&gt;val;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">swap_num</span><span class="hljs-params">(num** a, num** b)</span>&#123;<br>    num **t = a;<br>    a = b;<br>    b = t;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_inc</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    <span class="hljs-built_in">pair</span>* pair_a = (<span class="hljs-built_in">pair</span>*)a;<br>    <span class="hljs-built_in">pair</span>* pair_b = (<span class="hljs-built_in">pair</span>*)b;<br>    <span class="hljs-keyword">if</span>(pair_a-&gt;sum &gt; pair_b-&gt;sum) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pair_b-&gt;sum &gt; pair_a-&gt;sum) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> pair_a-&gt;a-&gt;idx - pair_b-&gt;a-&gt;idx;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_dec</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    <span class="hljs-built_in">pair</span>* pair_a = (<span class="hljs-built_in">pair</span>*)a;<br>    <span class="hljs-built_in">pair</span>* pair_b = (<span class="hljs-built_in">pair</span>*)b;<br>    <span class="hljs-keyword">if</span>(pair_a-&gt;sum &gt; pair_b-&gt;sum) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pair_b-&gt;sum &gt; pair_a-&gt;sum) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> pair_b-&gt;b-&gt;idx - pair_a-&gt;b-&gt;idx;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_pair</span><span class="hljs-params">(<span class="hljs-built_in">pair</span>* p, <span class="hljs-type">int</span> reverse)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!reverse) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = numbers[%d] + numbers[%d]\n&quot;</span>, p-&gt;sum, p-&gt;a-&gt;idx, p-&gt;b-&gt;idx);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = numbers[%d] + numbers[%d]\n&quot;</span>, p-&gt;sum, p-&gt;b-&gt;idx, p-&gt;a-&gt;idx);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pairPrint</span><span class="hljs-params">(<span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> n)</span>&#123;<br>    num* num_arr = (num*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(num) * n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        num_arr[i].val = numbers[i];<br>        num_arr[i].idx = i;<br>    &#125;<br><br>    qsort(num_arr, n, <span class="hljs-keyword">sizeof</span>(num), cmp_num);<br><br>    <span class="hljs-built_in">pair</span>* pair_arr = (<span class="hljs-built_in">pair</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">pair</span>) * (n / <span class="hljs-number">2</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; i++)&#123;<br>        pair_arr[i].a = &amp;(num_arr[i]);<br>        pair_arr[i].b = &amp;(num_arr[n - i - <span class="hljs-number">1</span>]);<br>        pair_arr[i].sum = (pair_arr[i].a)-&gt;val + (pair_arr[i].b)-&gt;val;<br><br>        <span class="hljs-keyword">if</span>((pair_arr[i].a)-&gt;idx &gt; (pair_arr[i].b)-&gt;idx)&#123;<br>            num* temp = pair_arr[i].a;<br>            pair_arr[i].a = pair_arr[i].b;<br>            pair_arr[i].b = temp;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> INC</span><br>    qsort(pair_arr, n / <span class="hljs-number">2</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">pair</span>), cmp_inc);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; i++) print_pair(&amp;(pair_arr[i]), <span class="hljs-literal">false</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEC</span><br>    qsort(pair_arr, n / <span class="hljs-number">2</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">pair</span>), cmp_dec);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; i++) print_pair(&amp;(pair_arr[i]), <span class="hljs-literal">true</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50033. Accounts</title>
    <link href="/2023/07/17/judge_girl/50033.%20Accounts/"/>
    <url>/2023/07/17/judge_girl/50033.%20Accounts/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>很多syntax要記，附在下方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;account.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AGE 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZIPCODE 2</span><br><br>Account accts[<span class="hljs-number">100005</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    Account *acct_a = (Account*)a;<br>    Account *acct_b = (Account*)b;<br>    <span class="hljs-keyword">if</span>((acct_a-&gt;accountNum) &gt; (acct_b-&gt;accountNum)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((acct_a-&gt;accountNum) &lt; (acct_b-&gt;accountNum)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_age</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    Account *acct_a = (Account*)a;<br>    Account *acct_b = (Account*)b;<br>    <span class="hljs-keyword">if</span>((acct_a-&gt;age) &gt; (acct_b-&gt;age)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((acct_a-&gt;age) &lt; (acct_b-&gt;age)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_zipcode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    Account *acct_a = (Account*)a;<br>    Account *acct_b = (Account*)b;<br>    <span class="hljs-keyword">if</span>((acct_a-&gt;zipcode) &gt; (acct_b-&gt;zipcode)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((acct_a-&gt;zipcode) &lt; (acct_b-&gt;zipcode)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(FILE *f)</span>&#123;<br>    <span class="hljs-type">int</span> prev = ftell(f);<br>    fseek(f, <span class="hljs-number">0L</span>, SEEK_END);<br>    <span class="hljs-type">int</span> size = ftell(f);<br>    fseek(f, prev, SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_line</span><span class="hljs-params">(Account* acct)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d, %d, %d\n&quot;</span>, acct-&gt;accountNum, acct-&gt;age, acct-&gt;zipcode, acct-&gt;balance);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_acct</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;account, age, zipcode, balance\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        print_line(&amp;(accts[i]));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_info</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, a, b);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_age_info</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;age, sum_balance\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> now_age = accts[<span class="hljs-number">0</span>].age;<br>    <span class="hljs-type">int</span> now_sum_balance = accts[<span class="hljs-number">0</span>].balance;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(accts[i].age == now_age)&#123;<br>            now_sum_balance += accts[i].balance;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            print_info(now_age, now_sum_balance);<br>            now_age = accts[i].age;<br>            now_sum_balance = accts[i].balance;<br>        &#125;<br>    &#125;<br>    print_info(now_age, now_sum_balance);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_zipcode_info</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zipcode, sum_balance\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> now_zipcode = accts[<span class="hljs-number">0</span>].zipcode;<br>    <span class="hljs-type">int</span> now_sum_balance = accts[<span class="hljs-number">0</span>].balance;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(accts[i].zipcode == now_zipcode)&#123;<br>            now_sum_balance += accts[i].balance;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            print_info(now_zipcode, now_sum_balance);<br>            now_zipcode = accts[i].zipcode;<br>            now_sum_balance = accts[i].balance;<br>        &#125;<br>    &#125;<br>    print_info(now_zipcode, now_sum_balance);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    FILE *f = fopen(s, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">int</span> n = get_size(f) / <span class="hljs-keyword">sizeof</span>(Account);<br><br>    fread(accts, <span class="hljs-keyword">sizeof</span>(Account), n, f);<br>    qsort(accts, n, <span class="hljs-keyword">sizeof</span>(Account), cmp);<br>    print_acct(n);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SORTBY) &amp;&amp; SORTBY == AGE</span><br>    qsort(accts, n, <span class="hljs-keyword">sizeof</span>(Account), cmp_age);<br>    get_age_info(n);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(SORTBY) &amp;&amp; SORTBY == ZIPCODE</span><br>    qsort(accts, n, <span class="hljs-keyword">sizeof</span>(Account), cmp_zipcode);<br>    get_zipcode_info(n);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="編譯參數帶入macro">編譯參數帶入Macro</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-D&#123;macro_name&#125;=&#123;macro_value&#125;<br></code></pre></td></tr></table></figure><p>Ex. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o out -DSORTBY=ZIPCODE main.c<br></code></pre></td></tr></table></figure></p><h2 id="找到檔案大小">找到檔案大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(FILE *f)</span>&#123;<br>    <span class="hljs-type">int</span> prev = ftell(f);<br>    fseek(f, <span class="hljs-number">0L</span>, SEEK_END);<br>    <span class="hljs-type">int</span> size = ftell(f);<br>    fseek(f, prev, SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="讀取binary-file到struct">讀取binary file到struct</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">fread(&#123;struct_arr&#125;, <span class="hljs-keyword">sizeof</span>(&#123;the_struct&#125;), &#123;n&#125;, &#123;file_ptr&#125;);<br></code></pre></td></tr></table></figure><h2 id="用編譯時帶入的macro">用編譯時帶入的Macro</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(&#123;macro_name&#125;) &amp;&amp; &#123;macro_name&#125; == &#123;value_a&#125;</span><br><span class="hljs-comment">// code</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(&#123;macro_name&#125;) &amp;&amp; &#123;macro_name&#125; == &#123;value_b&#125;</span><br><span class="hljs-comment">// code</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50032. N-pieces (special judge)</title>
    <link href="/2023/07/17/judge_girl/50032.%20N-pieces%20(special%20judge)/"/>
    <url>/2023/07/17/judge_girl/50032.%20N-pieces%20(special%20judge)/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>Second Try: 3/5 Used Time: 17:09</p><p>The recursion is prettry easy to maintain and there's not much to bewrong.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> board[<span class="hljs-number">18</span>][<span class="hljs-number">18</span>];<br><span class="hljs-type">int</span> c_cnt[<span class="hljs-number">18</span>], r_cnt[<span class="hljs-number">18</span>], d1_cnt[<span class="hljs-number">35</span>], d2_cnt[<span class="hljs-number">35</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        c_cnt[i] = <span class="hljs-number">0</span>;<br>        r_cnt[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">35</span>; i++)&#123;<br>        d1_cnt[i] = <span class="hljs-number">0</span>;<br>        d2_cnt[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        board[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;o&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> (c_cnt[x] &lt; k &amp;&amp; r_cnt[y] &lt; k &amp;&amp;<br>            d1_cnt[x + y] &lt; k &amp;&amp; d2_cnt[n - x + y] &lt; k);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> cnt)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x == n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(y == n) x += <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span>(cnt == m)&#123;<br>        print_board();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(is_valid(x, y) == <span class="hljs-literal">true</span>)&#123;<br>        board[x][y] = <span class="hljs-number">1</span>;<br>        c_cnt[x]++, r_cnt[y]++, d1_cnt[x + y]++, d2_cnt[n - x + y]++;<br><br>        <span class="hljs-type">bool</span> ret = solve(x, y + <span class="hljs-number">1</span>, cnt + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        board[x][y] = <span class="hljs-number">0</span>;<br>        c_cnt[x]--, r_cnt[y]--, d1_cnt[x + y]--, d2_cnt[n - x + y]--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> solve(x, y + <span class="hljs-number">1</span>, cnt);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;k) == <span class="hljs-number">3</span>)&#123;<br>        init();<br>        <span class="hljs-keyword">if</span>(!solve(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50035. Traversal</title>
    <link href="/2023/07/17/judge_girl/50035.%20Traversal/"/>
    <url>/2023/07/17/judge_girl/50035.%20Traversal/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 11:54</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(x, y) &#123;int t = (x); (x) = (y); (y) = t;&#125;</span><br><br><span class="hljs-type">int</span> m, n, start_x, start_y;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> now_x = start_x, now_y = start_y;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, now_x, now_y);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(now_x == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(now_y == <span class="hljs-number">0</span>) now_x++;<br>            <span class="hljs-keyword">else</span> now_y--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(now_x == <span class="hljs-number">1</span> &amp;&amp; now_y == n - <span class="hljs-number">1</span>)&#123;<br>                now_x--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_y % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(now_x == m - <span class="hljs-number">1</span>) now_y++;<br>                <span class="hljs-keyword">else</span> now_x++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(now_x == <span class="hljs-number">1</span>) now_y++;<br>                <span class="hljs-keyword">else</span> now_x--;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, now_x, now_y);<br>        <span class="hljs-keyword">if</span>(now_x == start_x &amp;&amp; now_y == start_y) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;m, &amp;n, &amp;start_x, &amp;start_y) != EOF)&#123;<br>        solve();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// OOOO</span><br><span class="hljs-comment">// OOOO</span><br><span class="hljs-comment">// OOOO</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50039. Inner Product and Outer Product</title>
    <link href="/2023/07/17/judge_girl/50039.%20Inner%20Product%20and%20Outer%20Product/"/>
    <url>/2023/07/17/judge_girl/50039.%20Inner%20Product%20and%20Outer%20Product/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a1, a2, a3, b1, b2, b3;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;a1, &amp;a2, &amp;a3, &amp;b1, &amp;b2, &amp;b3);<br>    <span class="hljs-type">int</span> inner = a1 * b1 + a2 * b2 + a3 * b3;<br>    <span class="hljs-type">int</span> out1 = a2 * b3 - a3 * b2;<br>    <span class="hljs-type">int</span> out2 = a3 * b1 - a1 * b3;<br>    <span class="hljs-type">int</span> out3 = a1 * b2 - a2 * b1;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d %d %d\n&quot;</span>, inner, out1, out2, out3);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50034. See-saw</title>
    <link href="/2023/07/17/judge_girl/50034.%20See-saw/"/>
    <url>/2023/07/17/judge_girl/50034.%20See-saw/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5</p><p>由Morris的解法3簡化而來，還不太懂原始程式碼<code>possible()</code>的剪枝的邏輯，想要modify成自己的理解也會TLE會WA。</p><p>Second Try: 5/5 Used Time 34:03 You need to sort the values fromsmall to big first, I don't know why but sure...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(x, y) &#123;int t = (x); (x) = (y); (y) = t;&#125;</span><br><br><span class="hljs-type">int</span> n, div2;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">20</span>];<br><span class="hljs-type">bool</span> used[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> seesaw[<span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    <span class="hljs-type">int</span> num_a = *(<span class="hljs-type">int</span>*)a;<br>    <span class="hljs-type">int</span> num_b = *(<span class="hljs-type">int</span>*)b;<br>    <span class="hljs-keyword">if</span>(num_a &gt; num_b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num_a &lt; num_b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_seesaw</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = div2 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, seesaw[<span class="hljs-number">0</span>][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_^_&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; div2; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, seesaw[<span class="hljs-number">1</span>][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> lw, <span class="hljs-type">int</span> rw, <span class="hljs-type">int</span> lidx, <span class="hljs-type">int</span> ridx, <span class="hljs-type">int</span> pos)</span>&#123;<br>    <span class="hljs-keyword">if</span>(lidx == div2 &amp;&amp; ridx == div2 &amp;&amp; lw == rw)&#123;<br>        print_seesaw();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(lw &gt; rw)&#123;<br>        swap(lw, rw);<br>        swap(lidx, ridx);<br>        pos = !pos;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(lidx == div2) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(used[i] == <span class="hljs-literal">true</span>) <span class="hljs-keyword">continue</span>;<br><br>        used[i] = <span class="hljs-literal">true</span>;<br>        seesaw[pos][lidx] = arr[i];<br>        <span class="hljs-keyword">if</span>(solve(lw + arr[i] * (lidx + <span class="hljs-number">1</span>), rw, lidx + <span class="hljs-number">1</span>, ridx, pos) == <span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        used[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>            used[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>        div2 = n / <span class="hljs-number">2</span>;<br>        qsort(arr, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br>        <span class="hljs-keyword">if</span>(solve(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) == <span class="hljs-literal">false</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2015</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50041. Mountains</title>
    <link href="/2023/07/17/judge_girl/50041.%20Mountains/"/>
    <url>/2023/07/17/judge_girl/50041.%20Mountains/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> h1, h2, prev_height, prev_h, now_h;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;h1, &amp;h2);<br>    prev_h = h2;<br>    prev_height = h2 - h1;<br>    <span class="hljs-keyword">if</span>(prev_height &gt; <span class="hljs-number">0</span>) ans += (<span class="hljs-number">3</span> * prev_height);<br>    <span class="hljs-keyword">if</span>(prev_height &lt; <span class="hljs-number">0</span>) ans += (<span class="hljs-number">-2</span> * prev_height);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now_h);<br>        <span class="hljs-type">int</span> now_height = now_h - prev_h;<br>        <span class="hljs-keyword">if</span>(now_height &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(prev_height &gt; <span class="hljs-number">0</span>) ans += (<span class="hljs-number">4</span> * now_height);<br>            <span class="hljs-keyword">else</span> ans += (<span class="hljs-number">3</span> * now_height);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(prev_height &gt; <span class="hljs-number">0</span>) ans += (<span class="hljs-number">-3</span> * now_height);<br>            <span class="hljs-keyword">else</span> ans += (<span class="hljs-number">-2</span> * now_height);<br>        &#125;<br><br>        prev_h = now_h;<br>        prev_height = now_height;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>loop</tag>
      
      <tag>online</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50042. Highest Mountain</title>
    <link href="/2023/07/17/judge_girl/50042.%20Highest%20Mountain/"/>
    <url>/2023/07/17/judge_girl/50042.%20Highest%20Mountain/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5 Used Time: 7:05</p><p>宣告陣列會造成MLE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(x, y) &#123;int t = x; x = y; y = t;&#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-type">int</span> all_max = <span class="hljs-number">-1</span>, all_max_x, all_max_y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br><br>        <span class="hljs-type">int</span> max_1_num, max_1_idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_2_num, max_2_idx = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;max_1_num, &amp;max_2_num);<br>        <span class="hljs-keyword">if</span>(max_2_num &gt;= max_1_num)&#123;<br>            swap(max_1_num, max_2_num);<br>            swap(max_1_idx, max_2_idx);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-type">int</span> now_num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now_num);<br>            <span class="hljs-keyword">if</span>(now_num &gt;= max_1_num)&#123;<br>                max_2_num = max_1_num; max_2_idx = max_1_idx;<br>                max_1_num = now_num;   max_1_idx = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_num &gt;= max_2_num)&#123;<br>                max_2_num = now_num;   max_2_idx = i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(max_1_num &gt;= all_max)&#123;<br>            all_max_x = j;<br>            all_max_y = max_1_idx;<br>            all_max = max_1_num;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_1_idx + <span class="hljs-number">1</span>, max_2_idx + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, all_max_x + <span class="hljs-number">1</span>, all_max_y + <span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>loop</tag>
      
      <tag>online</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50043. Mosaics</title>
    <link href="/2023/07/17/judge_girl/50043.%20Mosaics/"/>
    <url>/2023/07/17/judge_girl/50043.%20Mosaics/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>定義2D向量的外積： <span class="math display">\[a \times b = a_x\cdot b_y - a_y \cdot b_x = |a||b| \sin \theta\]</span></p><p>所以可以求由<span class="math inline">\(a\)</span>到<spanclass="math inline">\(b\)</span>的逆時針夾角是否在<spanclass="math inline">\(180 ^\circ\)</span>內，若<spanclass="math inline">\(\theta \lt 180 ^\circ\)</span>，則<spanclass="math inline">\(\sin \theta \gt 0\)</span>，推得<spanclass="math inline">\(a \times b &gt; 0\)</span>，反之亦然。</p><p>這題好難...。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(x, y)&#123;int t = x; x = y; y = t;&#125;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">coor</span>&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125; _coor;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-type">int</span> max_num = a;<br>    <span class="hljs-keyword">if</span>(b &gt; max_num) max_num = b;<br>    <span class="hljs-keyword">if</span>(c &gt; max_num) max_num = c;<br>    <span class="hljs-keyword">return</span> max_num;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-type">int</span> min_num = a;<br>    <span class="hljs-keyword">if</span>(b &lt; min_num) min_num = b;<br>    <span class="hljs-keyword">if</span>(c &lt; min_num) min_num = c;<br>    <span class="hljs-keyword">return</span> min_num;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sign</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> x3, <span class="hljs-type">int</span> y3)</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ax = x2 - x1;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ay = y2 - y1;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> bx = x3 - x1;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> by = y3 - y1;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = ax * by - ay * bx;<br>    <span class="hljs-keyword">if</span>(ans &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> x1, y1, x2, y2, x3, y3;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2, &amp;x3, &amp;y3);<br><br>    <span class="hljs-type">int</span> max_x = max(x1, x2, x3);<br>    <span class="hljs-type">int</span> min_x = min(x1, x2, x3);<br>    <span class="hljs-type">int</span> max_y = max(y1, y2, y3);<br>    <span class="hljs-type">int</span> min_y = min(y1, y2, y3);<br><br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = min_x; i &lt;= max_x; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = min_y; j &lt;= max_y; j++)&#123;<br>            <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)&#123;<br>                <span class="hljs-type">int</span> x = i + dx[k], y = j + dy[k];<br><br>                <span class="hljs-type">int</span> d1 = sign(x, y, x1, y1, x2, y2);<br>                <span class="hljs-type">int</span> d2 = sign(x, y, x2, y2, x3, y3);<br>                <span class="hljs-type">int</span> d3 = sign(x, y, x3, y3, x1, y1);<br><br>                <span class="hljs-keyword">if</span>((d1 &gt;= <span class="hljs-number">0</span> &amp;&amp; d2 &gt;= <span class="hljs-number">0</span> &amp;&amp; d3 &gt;= <span class="hljs-number">0</span>) ||<br>                   (d1 &lt;= <span class="hljs-number">0</span> &amp;&amp; d2 &lt;= <span class="hljs-number">0</span> &amp;&amp; d3 &lt;= <span class="hljs-number">0</span>))&#123;<br>                       c++;<br>                   &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-number">4</span>) cnt += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50045. Mines and Black Holes</title>
    <link href="/2023/07/17/judge_girl/50045.%20Mines%20and%20Black%20Holes/"/>
    <url>/2023/07/17/judge_girl/50045.%20Mines%20and%20Black%20Holes/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> now_x, now_y, now_z;<br><span class="hljs-type">int</span> mine_x, mine_y, mine_z;<br><span class="hljs-type">int</span> black_x, black_y, black_z;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dz[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">bool</span> ship_flag = <span class="hljs-literal">true</span>;<br><span class="hljs-type">bool</span> black_flag = <span class="hljs-literal">true</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;now_x, &amp;now_y, &amp;now_z);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;mine_x, &amp;mine_y, &amp;mine_z);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;black_x, &amp;black_y, &amp;black_z);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> z1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> z2)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x1 - x2) + <span class="hljs-built_in">abs</span>(y1 - y2) + <span class="hljs-built_in">abs</span>(z1 - z2);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> d; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d); d -= <span class="hljs-number">1</span>;<br>    now_x += dx[d], now_y += dy[d], now_z += dz[d];<br><br>    <span class="hljs-type">int</span> mine_dist = dist(now_x, now_y, now_z, mine_x, mine_y, mine_z);<br>    <span class="hljs-type">int</span> black_dist = dist(now_x, now_y, now_z, black_x, black_y, black_z);<br><br>    <span class="hljs-keyword">if</span>(mine_dist &lt; <span class="hljs-number">10</span>)&#123;<br>        ship_flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(black_dist &lt; <span class="hljs-number">10</span> &amp;&amp; black_flag == <span class="hljs-literal">true</span>)&#123;<br>        now_x = black_x, now_y = black_y, now_z = black_z;<br>        black_flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n &amp;&amp; ship_flag; i++)&#123;<br>        move();<br>        <span class="hljs-keyword">if</span>(ship_flag == <span class="hljs-literal">false</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, now_x, now_y, now_z);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50044. Caterpillar in Panic</title>
    <link href="/2023/07/17/judge_girl/50044.%20Caterpillar%20in%20Panic/"/>
    <url>/2023/07/17/judge_girl/50044.%20Caterpillar%20in%20Panic/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5 Used Time: 30:49</p><p>細節多。 學到的東西：</p><ol type="1"><li><p><span class="math inline">\(d \in \{0, 1, 2,3\}\)</span>，所以可以建立 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[] =&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br></code></pre></td></tr></table></figure> 然後更新head可以使用：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">head_x += dx[d], head_y += dy[d];<br></code></pre></td></tr></table></figure></p></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">len = <span class="hljs-built_in">abs</span>(sx - ex) + <span class="hljs-built_in">abs</span>(sy - ey) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(sx == ex) dx = <span class="hljs-number">0</span>, dy = (sy &lt; ey ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">else</span> dy = <span class="hljs-number">0</span>, dx = (sx &lt; ex ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>);<br>    <br></code></pre></td></tr></table></figure></li></ol><h2 id="ver-1">Ver 1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> sx, sy, ex, ey;<br><span class="hljs-type">int</span> q;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> head, tail;<br><span class="hljs-type">int</span> flag = <span class="hljs-literal">true</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">int</span> row[<span class="hljs-number">1005</span>];<br><span class="hljs-type">int</span> col[<span class="hljs-number">1005</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_map</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">map</span>[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp;<br>            y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp;<br>            <span class="hljs-built_in">map</span>[x][y] == <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;sx, &amp;sy, &amp;ex, &amp;ey);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br><br>    <span class="hljs-keyword">if</span>(sx == ex)&#123;<br>        len = <span class="hljs-built_in">abs</span>(ey - sy) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(sy &lt; ey)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) row[i] = sx;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = sy; i &lt; len; i++, n++) col[i] = n;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) row[i] = sx;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = sy; i &lt; len; i++, n--) col[i] = n;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        len = <span class="hljs-built_in">abs</span>(ex - sx) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(sx &lt; ex)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) col[i] = sy;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = sx; i &lt; len; i++, n++) row[i] = n;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) col[i] = sy;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = sx; i &lt; len; i++, n--) row[i] = n;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>        <span class="hljs-built_in">map</span>[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-built_in">map</span>[row[i]][col[i]] = <span class="hljs-number">1</span>;<br>    &#125;<br>    head = <span class="hljs-number">0</span>, tail = len - <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> d; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br><br>    <span class="hljs-type">int</span> tail_x = row[tail], tail_y = col[tail];<br>    <span class="hljs-built_in">map</span>[tail_x][tail_y] = <span class="hljs-number">0</span>;<br>    tail = tail &gt; <span class="hljs-number">0</span> ? tail - <span class="hljs-number">1</span> : len - <span class="hljs-number">1</span>; <span class="hljs-comment">// tail--;</span><br><br>    <span class="hljs-type">int</span> head_x = row[head], head_y = col[head];<br>    <span class="hljs-keyword">if</span>(d == <span class="hljs-number">0</span>) head_x += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d == <span class="hljs-number">1</span>) head_x -= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d == <span class="hljs-number">2</span>) head_y += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d == <span class="hljs-number">3</span>) head_y -= <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(is_valid(head_x, head_y))&#123;<br>        <span class="hljs-built_in">map</span>[head_x][head_y] = <span class="hljs-number">1</span>;<br>        head = head &gt; <span class="hljs-number">0</span> ? head - <span class="hljs-number">1</span> : len - <span class="hljs-number">1</span>;<br>        row[head] = head_x, col[head] = head_y;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">map</span>[tail_x][tail_y] = <span class="hljs-number">1</span>;<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q &amp;&amp; flag; i++) move();<br>    print_map();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ver-2">Ver 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdbool.h&gt;</span><br><span class="hljs-comment">#include &lt;math.h&gt;</span><br><br><span class="hljs-built_in">int</span> n, m;<br><span class="hljs-built_in">int</span> sx, sy, ex, ey;<br><span class="hljs-built_in">int</span> q;<br><br><span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>;<br><span class="hljs-built_in">int</span> head, tail;<br><span class="hljs-built_in">int</span> row[<span class="hljs-number">1024</span>], col[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>];<br><br><span class="hljs-built_in">bool</span> flag = true;<br><br>void print_map()&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            printf(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">map</span>[i][j]);<br>        &#125;<br>        puts(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br>void ipt()&#123;<br>    scanf(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    scanf(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;sx, &amp;sy, &amp;ex, &amp;ey);<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br><br>    <span class="hljs-built_in">int</span> dx, dy;<br>    <span class="hljs-built_in">len</span> = <span class="hljs-built_in">abs</span>(ex - sx) + <span class="hljs-built_in">abs</span>(ey - sy) + <span class="hljs-number">1</span>;<br>    head = <span class="hljs-number">0</span>, tail = <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(sx == ex) dx = <span class="hljs-number">0</span>, dy = (sy &lt; ey ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> dy = <span class="hljs-number">0</span>, dx = (sx &lt; ex ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>        <span class="hljs-built_in">map</span>[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>, now_x = sx, now_y = sy; i &lt; <span class="hljs-built_in">len</span>; i++, now_x += dx, now_y += dy)&#123;<br>        <span class="hljs-built_in">map</span>[now_x][now_y] = <span class="hljs-number">1</span>;<br>        row[i] = now_x, col[i] = now_y;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> is_valid(<span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y)&#123;<br>    <span class="hljs-keyword">return</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp;<br>            y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp;<br>            <span class="hljs-built_in">map</span>[x][y] == <span class="hljs-number">0</span>);<br>&#125;<br><br>void move()&#123;<br>    <span class="hljs-built_in">int</span> d; scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>    <span class="hljs-built_in">int</span> dx[] = &#123;<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-built_in">int</span> tail_x = row[tail], tail_y = col[tail];<br>    <span class="hljs-built_in">map</span>[tail_x][tail_y] = <span class="hljs-number">0</span>;<br>    tail = tail &gt; <span class="hljs-number">0</span> ? tail - <span class="hljs-number">1</span> : <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">int</span> head_x = row[head], head_y = col[head];<br>    head_x += dx[d], head_y += dy[d];<br>    <span class="hljs-keyword">if</span>(is_valid(head_x, head_y))&#123;<br>        <span class="hljs-built_in">map</span>[head_x][head_y] = <span class="hljs-number">1</span>;<br>        head = head &gt; <span class="hljs-number">0</span> ? head - <span class="hljs-number">1</span> : <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>;<br>        row[head] = head_x, col[head] = head_y;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">map</span>[tail_x][tail_y] = <span class="hljs-number">1</span>;<br>        flag = false;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> main()&#123;<br>    ipt();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; q &amp;&amp; flag; i++)&#123;<br>        move();<br>    &#125;<br>    print_map();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50049. Matrix Multiplication</title>
    <link href="/2023/07/17/judge_girl/50049.%20Matrix%20Multiplication/"/>
    <url>/2023/07/17/judge_girl/50049.%20Matrix%20Multiplication/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used Time: 11:00</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;matrix_multiplication.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">matrix_multiplication</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span>** ptrA, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span>** ptrB, <span class="hljs-type">int</span> S, <span class="hljs-type">int</span> *result)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S; i++) result[i] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++)&#123;<br>            <span class="hljs-keyword">if</span>(ptrA[<span class="hljs-number">2</span>][i] == ptrB[<span class="hljs-number">1</span>][j])&#123;<br>                result[(ptrA[<span class="hljs-number">1</span>][i]) * S + (ptrB[<span class="hljs-number">2</span>][j])] += ptrA[<span class="hljs-number">0</span>][i] * ptrB[<span class="hljs-number">0</span>][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50040. Magic Number</title>
    <link href="/2023/07/17/judge_girl/50040.%20Magic%20Number/"/>
    <url>/2023/07/17/judge_girl/50040.%20Magic%20Number/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, m &gt; <span class="hljs-number">0</span> &amp;&amp; m % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; (m &gt; <span class="hljs-number">10000</span> || m &lt; <span class="hljs-number">1000</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50047. Game of Cell</title>
    <link href="/2023/07/17/judge_girl/50047.%20Game%20of%20Cell/"/>
    <url>/2023/07/17/judge_girl/50047.%20Game%20of%20Cell/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5 Used Time: 13:28</p><p>if很慢，能少用就儘量少用。這題一個if都不能用。</p><p>學到的東西： (1) 與其 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-keyword">return</span> ...<br>&#125;<br><br><span class="hljs-type">int</span> count(<span class="hljs-type">int</span> grid[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)&#123;<br>        <span class="hljs-keyword">if</span>(is_valid(i + dx[k], j + dy[k]))&#123;<br>            cnt += ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>不如直接往右下shift一格，就不用檢查邊界，可以省時間。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">int</span> ext_grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++)&#123;<br>    ext_grid[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = grid[i][j];<br>&#125;<br><br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)&#123;<br>        cnt += ext_grid[i + dx[k]][j + dy[k]]...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>(2)與其 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(ext_grid[i][j] == DEAD)&#123;<br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">3</span>) temp_grid[i][j] = HEALTHY;<br>    <span class="hljs-keyword">else</span> temp_grid[i][j] = DEAD;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ext_grid[i][j] == DYING)&#123;<br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">2</span>) temp_grid[i][j] = HEALTHY;<br>    <span class="hljs-keyword">else</span> temp_grid[i][j] = DYING;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ext_grid[i][j] == HEALTHY)&#123;<br>    <span class="hljs-keyword">if</span>(cnt &lt; <span class="hljs-number">2</span>) temp_grid[i][j] = DEAD;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">3</span>) temp_grid[i][j] = DYING;<br>    <span class="hljs-keyword">else</span> temp_grid[i][j] = HEALTHY;<br>&#125;<br></code></pre></td></tr></table></figure> 可以直接 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> change[<span class="hljs-number">3</span>][<span class="hljs-number">9</span>] = &#123;<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;<br>&#125;;<br><br>temp_grid[i][j] = change[ext_grid[i][j]][count_around(ext_grid, i, j)];<br></code></pre></td></tr></table></figure> 達到更快速的查詢。</p><p>(3)因為要計算的healthycell為2，其他可能出現的cell是0或1，若要計算2出現了幾次（這題用if會TLE），<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)&#123;<br>    <span class="hljs-keyword">if</span>(grid[i + dx[k]][j + dy[k]] == <span class="hljs-number">2</span>) cnt++;<br>&#125;<br></code></pre></td></tr></table></figure> 可以直接： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)<br>    cnt += grid[i + dx[k]][j + dy[k]] / <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></p><h2 id="ver-1-code-tle-70">Ver 1 code (TLE 70%)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEAD 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DYING 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEALTHY 2</span><br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_around</span><span class="hljs-params">(<span class="hljs-type">int</span> grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)&#123;<br>        <span class="hljs-type">int</span> now_x = i + dx[k], now_y = j + dy[k];<br>        <span class="hljs-keyword">if</span>(grid[now_x][now_y] == HEALTHY) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">game_of_cell</span><span class="hljs-params">(<span class="hljs-type">int</span> grid[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], <span class="hljs-type">int</span> outcome[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], <span class="hljs-type">int</span> N)</span>&#123;<br>    <span class="hljs-type">int</span> ext_grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>]; <span class="hljs-built_in">memset</span>(ext_grid, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ext_grid));<br>    <span class="hljs-type">int</span> temp_grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>];<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++)&#123;<br>        ext_grid[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = grid[i][j];<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span>(N--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++)&#123;<br>            <span class="hljs-type">int</span> cnt = count_around(ext_grid, i, j);<br>            <span class="hljs-keyword">if</span>(ext_grid[i][j] == DEAD)&#123;<br>                <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">3</span>) temp_grid[i][j] = HEALTHY;<br>                <span class="hljs-keyword">else</span> temp_grid[i][j] = DEAD;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ext_grid[i][j] == DYING)&#123;<br>                <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">2</span>) temp_grid[i][j] = HEALTHY;<br>                <span class="hljs-keyword">else</span> temp_grid[i][j] = DYING;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ext_grid[i][j] == HEALTHY)&#123;<br>                <span class="hljs-keyword">if</span>(cnt &lt; <span class="hljs-number">2</span>) temp_grid[i][j] = DEAD;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">3</span>) temp_grid[i][j] = DYING;<br>                <span class="hljs-keyword">else</span> temp_grid[i][j] = HEALTHY;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;=  <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++)&#123;<br>            ext_grid[i][j] = temp_grid[i][j];<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++)&#123;<br>        outcome[i][j] = ext_grid[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>];<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ver-6-code-ac">Ver 6 Code (AC)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> change[<span class="hljs-number">3</span>][<span class="hljs-number">9</span>] = &#123;<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;<br>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_around</span><span class="hljs-params">(<span class="hljs-type">int</span> grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++)<br>        cnt += grid[i + dx[k]][j + dy[k]] / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">game_of_cell</span><span class="hljs-params">(<span class="hljs-type">int</span> grid[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], <span class="hljs-type">int</span> outcome[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], <span class="hljs-type">int</span> N)</span>&#123;<br>    <span class="hljs-type">int</span> ext_grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> temp_grid[<span class="hljs-number">52</span>][<span class="hljs-number">52</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++)&#123;<br>        ext_grid[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = grid[i][j];<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span>(N--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++)&#123;<br>            temp_grid[i][j] = change[ext_grid[i][j]][count_around(ext_grid, i, j)];<br>        &#125;<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++)&#123;<br>            ext_grid[i][j] = temp_grid[i][j];<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++)&#123;<br>        outcome[i][j] = ext_grid[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>implementation</tag>
      
      <tag>optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50048. Count the days</title>
    <link href="/2023/07/17/judge_girl/50048.%20Count%20the%20days/"/>
    <url>/2023/07/17/judge_girl/50048.%20Count%20the%20days/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;count_day.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_leap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span>&#123;<br>    <span class="hljs-keyword">return</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) || ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; (year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">count_day</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> day, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> results[<span class="hljs-number">7</span>])</span>&#123;<br>    <span class="hljs-type">int</span> days[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br>    <span class="hljs-keyword">if</span>(is_leap(year)) days[<span class="hljs-number">2</span>] = <span class="hljs-number">29</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++)&#123;<br>        day += days[i];<br>    &#125;<br>    day %= <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; days[month]; i++)&#123;<br>        results[(day + i) % <span class="hljs-number">7</span>]++;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50046. Linear Classifier</title>
    <link href="/2023/07/17/judge_girl/50046.%20Linear%20Classifier/"/>
    <url>/2023/07/17/judge_girl/50046.%20Linear%20Classifier/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used Time: 22:22</p><p>難在理解題目，implementation容易。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, m, q, t;<br><span class="hljs-type">int</span> w[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> c, p[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> h = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            h += w[i][j] * p[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(c == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(h &gt;= t)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>                    <span class="hljs-keyword">if</span>(p[i][j] == <span class="hljs-number">1</span>)&#123;<br>                        w[i][j] /= <span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">if</span>(w[i][j] == <span class="hljs-number">0</span>) w[i][j] = <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(h &lt; t)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>                    <span class="hljs-keyword">if</span>(p[i][j] == <span class="hljs-number">1</span>)&#123;<br>                        w[i][j] *= <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> p[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> h = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            h += w[i][j] * p[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(h &gt;= t) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            w[i][j] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    t = <span class="hljs-number">2</span> * m * m;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        train();<br>    &#125;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++)&#123;<br>        eval();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>constructive</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50050. Spiral Snake</title>
    <link href="/2023/07/17/judge_girl/50050.%20Spiral%20Snake/"/>
    <url>/2023/07/17/judge_girl/50050.%20Spiral%20Snake/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 15:11</p><p>由 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> &lt;<span class="hljs-number">1</span> ^<span class="hljs-number">1</span> &gt;<span class="hljs-number">2</span> v2 &lt;<span class="hljs-number">2</span> ---- <span class="hljs-number">3</span>x3<br><span class="hljs-regexp">//</span> &lt;<span class="hljs-number">1</span> ^<span class="hljs-number">1</span> &gt;<span class="hljs-number">2</span> v2 &lt;<span class="hljs-number">3</span> ^<span class="hljs-number">3</span> &gt;<span class="hljs-number">4</span> v4 &lt;<span class="hljs-number">4</span> ---- <span class="hljs-number">5</span>x5<br><br></code></pre></td></tr></table></figure> 觀察規律即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SpiralSnake</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> *snake, <span class="hljs-type">int</span> *result)</span>&#123;<br>    <span class="hljs-type">int</span> grid[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> x = N / <span class="hljs-number">2</span>, y = N / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    grid[x][y] = snake[cnt++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; N / <span class="hljs-number">2</span>; t++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * t + <span class="hljs-number">1</span>; i++)&#123;<br>            y -= <span class="hljs-number">1</span>;<br>            grid[x][y] = snake[cnt++];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * t + <span class="hljs-number">1</span>; i++)&#123;<br>            x -= <span class="hljs-number">1</span>;<br>            grid[x][y] = snake[cnt++];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * t + <span class="hljs-number">2</span>; i++)&#123;<br>            y += <span class="hljs-number">1</span>;<br>            grid[x][y] = snake[cnt++];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * t + <span class="hljs-number">2</span>; i++)&#123;<br>            x += <span class="hljs-number">1</span>;<br>            grid[x][y] = snake[cnt++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = N - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        grid[N - <span class="hljs-number">1</span>][i] = snake[cnt++];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)&#123;<br>            result[i * N + j] = grid[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50052. K-means Algorithm</title>
    <link href="/2023/07/17/judge_girl/50052.%20K-means%20Algorithm/"/>
    <url>/2023/07/17/judge_girl/50052.%20K-means%20Algorithm/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5 Used Time: 39:56</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vector</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>];<br>    <span class="hljs-type">int</span> group;<br>&#125; <span class="hljs-built_in">vector</span>;<br><br><span class="hljs-type">int</span> n, l, r;<br><span class="hljs-built_in">vector</span> v[<span class="hljs-number">64</span>];<br><span class="hljs-built_in">vector</span> lead[<span class="hljs-number">3</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_v_num</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>* v)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, v-&gt;arr[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_v_char</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>* v)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v-&gt;arr[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>* from, <span class="hljs-built_in">vector</span>* to)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++) to-&gt;arr[i] = from-&gt;arr[i];<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dist</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>* a, <span class="hljs-built_in">vector</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++) ans += <span class="hljs-built_in">abs</span>(a-&gt;arr[i] - b-&gt;arr[i]);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_less</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>* a, <span class="hljs-built_in">vector</span>* b)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a-&gt;arr[i] == b-&gt;arr[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a-&gt;arr[i] &lt; b-&gt;arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> !is_less((<span class="hljs-built_in">vector</span>*)a, (<span class="hljs-built_in">vector</span>*)b);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;l, &amp;r); getchar();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++) v[i].arr[j] = getchar();<br>        getchar();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) copy(&amp;v[i], &amp;lead[i]);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_mean</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123; <span class="hljs-built_in">vector</span>* now_v = &amp;v[i];<br>        <span class="hljs-type">int</span> min_dist = INT_MAX, min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123; <span class="hljs-built_in">vector</span>* now_lead = &amp;lead[j];<br>            <span class="hljs-type">int</span> now_dist = dist(now_v, now_lead);<br>            <span class="hljs-keyword">if</span>(now_dist &lt; min_dist) min_dist = now_dist, min_idx = j;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_dist == min_dist &amp;&amp; is_less(now_lead, &amp;lead[min_idx])) min_idx = j;<br>        &#125;<br>        now_v-&gt;group = min_idx;<br>    &#125;<br><br>    <span class="hljs-built_in">vector</span> avg[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++) avg[i].arr[j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123; <span class="hljs-built_in">vector</span>* now_avg = &amp;avg[i];<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123; <span class="hljs-built_in">vector</span>* now_v = &amp;v[j];<br>            <span class="hljs-keyword">if</span>(now_v-&gt;group != i) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; l; k++)&#123;<br>                now_avg-&gt;arr[k] += now_v-&gt;arr[k];<br>            &#125;<br>            cnt += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; l; k++)&#123;<br>            now_avg-&gt;arr[k] /= cnt;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123; <span class="hljs-built_in">vector</span>* now_avg = &amp;avg[i];<br>        <span class="hljs-type">int</span> min_dist = INT_MAX, min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123; <span class="hljs-built_in">vector</span>* now_v = &amp;v[j];<br>            <span class="hljs-keyword">if</span>(now_v-&gt;group != i) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> now_dist = dist(now_avg, now_v);<br>            <span class="hljs-keyword">if</span>(now_dist &lt; min_dist) min_dist = now_dist, min_idx = j;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_dist == min_dist &amp;&amp; is_less(now_v, &amp;v[min_idx])) min_idx = j;<br>        &#125;<br>        copy(&amp;v[min_idx], &amp;lead[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">opt</span><span class="hljs-params">()</span>&#123;<br>    qsort(lead, <span class="hljs-number">3</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">vector</span>), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) print_v_char(&amp;lead[i]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-keyword">while</span>(r--) k_mean();<br>    opt();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50053. The Most Popular Author</title>
    <link href="/2023/07/17/judge_girl/50053.%20The%20Most%20Popular%20Author/"/>
    <url>/2023/07/17/judge_girl/50053.%20The%20Most%20Popular%20Author/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_book</span>&#123;</span><br>    <span class="hljs-type">char</span> author_name[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">char</span> book_name[<span class="hljs-number">128</span>];<br>&#125; s_book;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_author</span>&#123;</span><br>    <span class="hljs-type">char</span> author_name[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> selling;<br>&#125; s_author;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> author_cnt = <span class="hljs-number">0</span>;<br>s_book book[<span class="hljs-number">128</span>];<br>s_author author[<span class="hljs-number">128</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_author_idx</span><span class="hljs-params">(<span class="hljs-type">char</span> author_name[<span class="hljs-number">128</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; author_cnt; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(author[i].author_name, author_name) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_book_idx</span><span class="hljs-params">(<span class="hljs-type">char</span> book_name[<span class="hljs-number">128</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(book[i].book_name, book_name) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    s_author* sa = (s_author*)a;<br>    s_author* sb = (s_author*)b;<br>    <span class="hljs-keyword">if</span>(sa-&gt;selling &lt; sb-&gt;selling) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sa-&gt;selling &gt; sb-&gt;selling) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>(<span class="hljs-built_in">strcmp</span>(sa-&gt;author_name, sb-&gt;author_name));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, book[i].author_name, book[i].book_name);<br>        <span class="hljs-type">int</span> idx = get_author_idx(book[i].author_name);<br>        <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">strcpy</span>(author[author_cnt].author_name, book[i].author_name);<br>            author[author_cnt].selling = <span class="hljs-number">0</span>;<br>            author_cnt += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">char</span> book_name[<span class="hljs-number">128</span>];<br>        <span class="hljs-type">int</span> selling;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, book_name, &amp;selling);<br>        <span class="hljs-type">int</span> book_idx = get_book_idx(book_name);<br>        <span class="hljs-type">char</span>* author_name = book[book_idx].author_name;<br>        <span class="hljs-type">int</span> author_idx = get_author_idx(author_name);<br>        author[author_idx].selling += selling;<br>    &#125;<br>    qsort(author, author_cnt, <span class="hljs-keyword">sizeof</span>(s_author), cmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, author[<span class="hljs-number">0</span>].author_name, author[<span class="hljs-number">0</span>].selling);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50054. A Hash Table</title>
    <link href="/2023/07/17/judge_girl/50054.%20A%20Hash%20Table/"/>
    <url>/2023/07/17/judge_girl/50054.%20A%20Hash%20Table/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">string</span>&#123;</span><br>    <span class="hljs-type">char</span> st[<span class="hljs-number">105</span>];<br>    <span class="hljs-type">int</span> len;<br>&#125; <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">slot</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">string</span>* <span class="hljs-title">d</span>[10005];</span><br>    <span class="hljs-type">int</span> len;<br>&#125; slot;<br><br><span class="hljs-type">int</span> s, q, n;<br><span class="hljs-built_in">string</span> str_arr[<span class="hljs-number">10005</span>];<br>slot hash_table[<span class="hljs-number">1005</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *now_s)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now_s-&gt;len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isalpha</span>(now_s-&gt;st[i])) ans += now_s-&gt;st[i];<br>        <span class="hljs-keyword">else</span> ans += (now_s-&gt;st[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans % s;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(slot* t, <span class="hljs-built_in">string</span>* now_s)</span>&#123;<br>    t-&gt;d[t-&gt;len++] = now_s;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(slot* t, <span class="hljs-built_in">string</span>* now_s)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t-&gt;len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>((t-&gt;d[i]-&gt;st), now_s-&gt;st) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;s, &amp;n, &amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_arr[i].st);<br>        str_arr[i].len = <span class="hljs-built_in">strlen</span>(str_arr[i].st);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s; i++)&#123;<br>        hash_table[i].len = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> h = hash(&amp;str_arr[i]);<br>        add(&amp;hash_table[h], &amp;str_arr[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++)&#123;<br>        <span class="hljs-built_in">string</span> now_s; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, now_s.st);<br>        now_s.len = <span class="hljs-built_in">strlen</span>(now_s.st);<br>        <span class="hljs-type">int</span> h = hash(&amp;now_s);<br>        <span class="hljs-keyword">if</span>(check(&amp;hash_table[h], &amp;now_s)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, h);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">-1</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50055. Waiting Time at Supermarket</title>
    <link href="/2023/07/17/judge_girl/50055.%20Waiting%20Time%20at%20Supermarket/"/>
    <url>/2023/07/17/judge_girl/50055.%20Waiting%20Time%20at%20Supermarket/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> t, s;<br><br><span class="hljs-type">int</span> counter[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;t, &amp;s);<br><br>        <span class="hljs-type">int</span> min_time = INT_MAX, min_idx;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(counter[j] &lt; min_time)&#123;<br>                min_time = counter[j];<br>                min_idx = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min_time &lt;= t)&#123;<br>            counter[min_idx] = s + t;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans += (min_time  - t);<br>            counter[min_idx] += s;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50056. How Much Money Can You Make_</title>
    <link href="/2023/07/17/judge_girl/50056.%20How%20Much%20Money%20Can%20You%20Make_/"/>
    <url>/2023/07/17/judge_girl/50056.%20How%20Much%20Money%20Can%20You%20Make_/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_material</span>&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">52</span>];<br>    <span class="hljs-type">int</span> qty;<br>    <span class="hljs-type">int</span> price;<br>&#125; s_material;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_product</span>&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">52</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_material</span>* <span class="hljs-title">mtrl_used</span>[128];</span><br>    <span class="hljs-type">int</span> mtrl_used_qty[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> mtrl_len;<br>    <span class="hljs-type">int</span> price;<br>    <span class="hljs-type">int</span> profit;<br>&#125; s_product;<br><br><span class="hljs-type">int</span> n, m;<br>s_material material[<span class="hljs-number">128</span>];<br>s_product product[<span class="hljs-number">128</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> (a &gt; b) ? a : b;&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> (a &lt; b) ? a : b;&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find_material</span><span class="hljs-params">(<span class="hljs-type">char</span> st[<span class="hljs-number">52</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(material[i].name, st) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_material</span><span class="hljs-params">(s_material* mtrl)</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d %d&quot;</span>, mtrl-&gt;name, &amp;(mtrl-&gt;qty), &amp;(mtrl-&gt;price));<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_product</span><span class="hljs-params">(s_product* p)</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, p-&gt;name, &amp;(p-&gt;mtrl_len));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p-&gt;mtrl_len; i++)&#123;<br>        <span class="hljs-type">char</span> st[<span class="hljs-number">52</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, st, &amp;p-&gt;mtrl_used_qty[i]);<br>        p-&gt;mtrl_used[i] = &amp;material[find_material(st)];<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(p-&gt;price));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        get_material(&amp;material[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        get_product(&amp;product[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_profit</span><span class="hljs-params">(s_product *p)</span>&#123;<br>    <span class="hljs-type">int</span> max_can_make = INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p-&gt;mtrl_len; i++)&#123;<br>        max_can_make = min(max_can_make, (p-&gt;mtrl_used[i])-&gt;qty / (p-&gt;mtrl_used_qty[i]));<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, max_can_make);</span><br><br>    <span class="hljs-type">int</span> cost = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p-&gt;mtrl_len; i++)&#123;<br>        cost += (p-&gt;mtrl_used[i])-&gt;price * (p-&gt;mtrl_used_qty[i]);<br>    &#125;<br><br>    p-&gt;profit = max((p-&gt;price - cost) * max_can_make, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    s_product* pa = (s_product*)a;<br>    s_product* pb = (s_product*)b;<br>    <span class="hljs-keyword">if</span>(pa-&gt;profit &lt; pb-&gt;profit) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pa-&gt;profit &gt; pb-&gt;profit) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(pa-&gt;name, pb-&gt;name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        get_profit(&amp;product[i]);<br>    &#125;<br>    qsort(product, m, <span class="hljs-keyword">sizeof</span>(s_product), cmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, product[<span class="hljs-number">0</span>].name, product[<span class="hljs-number">0</span>].profit);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50057. Consecutive 0&#39;s and 1&#39;s</title>
    <link href="/2023/07/17/judge_girl/50057.%20Consecutive%200&#39;s%20and%201&#39;s/"/>
    <url>/2023/07/17/judge_girl/50057.%20Consecutive%200&#39;s%20and%201&#39;s/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>找i-th bit的function是： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_i_bit</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_i_bit</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, cnt = <span class="hljs-number">0</span>, last = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-type">int</span> d; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-type">int</span> b = get_i_bit(d, i);<br>            <span class="hljs-keyword">if</span>(last != <span class="hljs-number">-1</span> &amp;&amp; last != b)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cnt % <span class="hljs-number">40</span>; j++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, b);<br>            last = b, cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50061. Donation</title>
    <link href="/2023/07/17/judge_girl/50061.%20Donation/"/>
    <url>/2023/07/17/judge_girl/50061.%20Donation/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 2.5/5 Used Time (Using array): 9:45 Used Time (Usingbit): 5:30</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> dot[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> arr[<span class="hljs-number">64</span>][<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> max_dot = <span class="hljs-number">-1</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;dot[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_dot, <span class="hljs-type">int</span> now_can_dot[<span class="hljs-number">64</span>])</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        max_dot = max(max_dot, now_dot);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(now_can_dot[now_idx] == <span class="hljs-number">0</span>)&#123;<br>        dfs(now_idx + <span class="hljs-number">1</span>, now_dot, now_can_dot);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        dfs(now_idx + <span class="hljs-number">1</span>, now_dot, now_can_dot);<br>        <span class="hljs-type">int</span> tmp[<span class="hljs-number">64</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) tmp[i] = now_can_dot[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i][now_idx] == <span class="hljs-number">1</span>) tmp[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        dfs(now_idx + <span class="hljs-number">1</span> , now_dot + dot[now_idx], tmp);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-type">int</span> now_can_dot[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) now_can_dot[i] = <span class="hljs-number">1</span>;<br>    dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, now_can_dot);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_dot);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50058. Word Selection</title>
    <link href="/2023/07/17/judge_girl/50058.%20Word%20Selection/"/>
    <url>/2023/07/17/judge_girl/50058.%20Word%20Selection/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 2/5 Used time: 11:40</p><p>Using bit operations can increase speed and decrease using array.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> cost[<span class="hljs-number">32</span>];<br><span class="hljs-type">int</span> arr[<span class="hljs-number">32</span>][<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> min_cost = INT_MAX;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_str</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">64</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, s, &amp;cost[num]);<br>    <span class="hljs-type">int</span> s_len = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s_len; i++) arr[num][s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_cost, <span class="hljs-type">int</span> now_have[<span class="hljs-number">26</span>])</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_cost &gt;= min_cost) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-keyword">if</span>(now_have[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        min_cost = now_cost;<br>    &#125;<br><br>    <span class="hljs-type">int</span> tmp[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) tmp[i] = now_have[i];<br><br>    <span class="hljs-comment">// choose</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-keyword">if</span>(arr[now_idx][i] == <span class="hljs-number">1</span>) tmp[i] = <span class="hljs-number">1</span>;<br>    dfs(now_idx + <span class="hljs-number">1</span>, now_cost + cost[now_idx], tmp);<br><br>    <span class="hljs-comment">// not choose</span><br>    dfs(now_idx + <span class="hljs-number">1</span>, now_cost, now_have);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) get_str(i);<br>    <span class="hljs-type">int</span> now_have[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, now_have);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_cost);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50051. Valid License Plates</title>
    <link href="/2023/07/17/judge_girl/50051.%20Valid%20License%20Plates/"/>
    <url>/2023/07/17/judge_girl/50051.%20Valid%20License%20Plates/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><p>想好再下手</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> plate_1 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> plate_2 2</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span>*)a, (<span class="hljs-type">char</span>*)b);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_1</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(s[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!(<span class="hljs-built_in">isalpha</span>(s[i]) || <span class="hljs-built_in">isdigit</span>(s[i]))) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!(<span class="hljs-built_in">isalpha</span>(s[i]) || <span class="hljs-built_in">isdigit</span>(s[i]))) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_2</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-type">bool</span> have_digit = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[i]))&#123;<br>            have_digit = <span class="hljs-literal">true</span>;<br>            sum += (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> have_digit &amp;&amp; (sum % <span class="hljs-number">7</span> != <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_3</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)&#123;<br>        count[s[i]] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(count[i] &gt;= <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">check_4</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == s[i + <span class="hljs-number">1</span>] &amp;&amp; s[i] == <span class="hljs-string">&#x27;4&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">return</span> check_1(s) &amp;&amp; check_2(s) &amp;&amp; check_3(s) &amp;&amp; check_4(s);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-type">char</span> s1[<span class="hljs-number">32</span>][<span class="hljs-number">10</span>], s2[<span class="hljs-number">32</span>][<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">char</span> s[<span class="hljs-number">10</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>        <span class="hljs-keyword">if</span>(check(s))&#123;<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                <span class="hljs-built_in">strcpy</span>(s1[cnt1++], s);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                <span class="hljs-built_in">strcpy</span>(s2[cnt2++], s);<br>            &#125;<br>        &#125;<br>    &#125;<br>    qsort(s1, cnt1, <span class="hljs-keyword">sizeof</span>(s1[<span class="hljs-number">0</span>]), cmp);<br>    qsort(s2, cnt2, <span class="hljs-keyword">sizeof</span>(s2[<span class="hljs-number">0</span>]), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt1; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s1[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt2; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s2[i]);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50060. Traveling Salesman</title>
    <link href="/2023/07/17/judge_girl/50060.%20Traveling%20Salesman/"/>
    <url>/2023/07/17/judge_girl/50060.%20Traveling%20Salesman/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 3/5 Used Tiem 12:48</p><p>Notice doing a pruning like <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(now_cost + g[<span class="hljs-number">0</span>][arr[now_idx - <span class="hljs-number">1</span>]] &gt; min_cost) <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure> is wrong, because<code>g[0][arr[now_idx - 1]</code> would not be in the route, so addingthis cost may let you find the right path but prune it thus it didn'tcount.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> cost[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> min_cost = INT_MAX;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now_pos, <span class="hljs-type">int</span> visited_num, <span class="hljs-type">int</span> visited[<span class="hljs-number">16</span>], <span class="hljs-type">int</span> now_cost)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_cost &gt;= min_cost) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(visited_num == n)&#123;<br>        now_cost += cost[now_pos][<span class="hljs-number">0</span>];<br>        min_cost = min(min_cost, now_cost);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(visited[i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><br>        visited[i] = <span class="hljs-number">1</span>;<br>        dfs(i, visited_num + <span class="hljs-number">1</span>, visited, now_cost + cost[now_pos][i]);<br>        visited[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cost[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> visited[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    visited[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    dfs(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, visited, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_cost);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50062. Merge Book Information</title>
    <link href="/2023/07/17/judge_girl/50062.%20Merge%20Book%20Information/"/>
    <url>/2023/07/17/judge_girl/50062.%20Merge%20Book%20Information/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>題目看清楚。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;book.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    BookInfo* b_a = (BookInfo*)a;<br>    BookInfo* b_b = (BookInfo*)b;<br>    <span class="hljs-type">int</span> s = <span class="hljs-built_in">strcmp</span>(b_a-&gt;book_title, b_b-&gt;book_title);<br>    <span class="hljs-keyword">if</span>(s != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> s;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> b_a-&gt;date &gt; b_b-&gt;date;<br>    &#125;<br>&#125;<br><br>BookInfoList <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, BookAuthor authorArr[], BookSelling sellingArr[])</span>&#123;<br>    BookInfoList ans;<br>    ans.num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)&#123;<br>        <span class="hljs-type">int</span> j;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; N; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(authorArr[j].book_title, sellingArr[i].book_title) == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j == N) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">strcpy</span>(ans.books[ans.num].book_title, sellingArr[i].book_title);<br>        ans.books[ans.num].selling = sellingArr[i].selling;<br>        ans.books[ans.num].date = sellingArr[i].date;<br>        <span class="hljs-built_in">strcpy</span>(ans.books[ans.num].author, authorArr[j].author);<br>        ans.num++;<br>    &#125;<br><br>    qsort(ans.books, ans.num, <span class="hljs-keyword">sizeof</span>(BookInfo), cmp);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50063. Friend Distance</title>
    <link href="/2023/07/17/judge_girl/50063.%20Friend%20Distance/"/>
    <url>/2023/07/17/judge_girl/50063.%20Friend%20Distance/</url>
    
    <content type="html"><![CDATA[<p>難度：4.3/5</p><p>Second Try: 4/5 Used time: 32:41 I though the problem require us toadd up all the friend pairs' distance, but it was the max distance for apair, I really need to look at the problem carefully.</p><h2 id="version-1-code-tle-2s">Version 1 code (TLE &gt; 2s)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br> <br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> min_dist = INT_MAX;<br><span class="hljs-type">int</span> min_pos[<span class="hljs-number">16</span>];<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">my_abs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -n;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> pos[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_max_dist)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_max_dist &gt;= min_dist) <span class="hljs-keyword">return</span>;<br> <br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        min_dist = now_max_dist;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            min_pos[i] = pos[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(pos[i] == <span class="hljs-number">-1</span>)&#123;<br>                pos[i] = now_idx;<br>                <span class="hljs-type">int</span> temp_max_dist = now_max_dist;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                    <span class="hljs-keyword">if</span>(arr[i][j] == <span class="hljs-number">1</span> &amp;&amp; pos[j] != <span class="hljs-number">-1</span>)&#123;<br>                        temp_max_dist = max(temp_max_dist, my_abs(now_idx - pos[j]));<br>                    &#125;<br>                &#125;<br>                dfs(pos, now_idx + <span class="hljs-number">1</span>, temp_max_dist);<br>                pos[i] = <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m); getchar();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">char</span> a, b;<br>        a = getchar(); getchar();<br>        b = getchar(); getchar();<br>        arr[a - <span class="hljs-string">&#x27;A&#x27;</span>][b - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>        arr[b - <span class="hljs-string">&#x27;A&#x27;</span>][a - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-type">int</span> pos[<span class="hljs-number">16</span>]; <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) pos[i] = <span class="hljs-number">-1</span>;<br>    dfs(pos, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_dist);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(min_pos[j] == i)&#123;<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, j + <span class="hljs-string">&#x27;A&#x27;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>, j + <span class="hljs-string">&#x27;A&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="version-2-code-ac-800ms">Version 2 code (AC 800ms)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a, b) (((a) &gt; (b)) ? (a) : (b))</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> min_dist = INT_MAX;<br><span class="hljs-type">int</span> min_pos[<span class="hljs-number">16</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> used[], <span class="hljs-type">int</span> now_max_dist)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_max_dist &gt;= min_dist) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        min_dist = now_max_dist;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) min_pos[i] = now[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i] == <span class="hljs-number">0</span>)&#123;<br>                used[i] = <span class="hljs-number">1</span>, now[now_idx] = i;<br><br>                <span class="hljs-type">int</span> temp_max_dist = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; now_idx; j++)&#123;<br>                    <span class="hljs-keyword">if</span>(arr[i][now[j]])&#123;<br>                        temp_max_dist = now_idx - j;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                temp_max_dist = max(temp_max_dist, now_max_dist);<br>                dfs(now, now_idx + <span class="hljs-number">1</span>, used, temp_max_dist);<br>                used[i] = <span class="hljs-number">0</span>, now[now_idx] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m); getchar();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">char</span> a, b;<br>        a = getchar(); getchar();<br>        b = getchar(); getchar();<br>        arr[a - <span class="hljs-string">&#x27;A&#x27;</span>][b - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>        arr[b - <span class="hljs-string">&#x27;A&#x27;</span>][a - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> now[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> used[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(now, <span class="hljs-number">0</span>, used, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_dist);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, min_pos[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>, min_pos[i] + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50064. Merge Sort</title>
    <link href="/2023/07/17/judge_girl/50064.%20Merge%20Sort/"/>
    <url>/2023/07/17/judge_girl/50064.%20Merge%20Sort/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>要記得要怎麼用fread。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">fread(dest_ptr(<span class="hljs-built_in">array</span>), <span class="hljs-keyword">sizeof</span>(a_block), cnt, fp);<br></code></pre></td></tr></table></figure><p>會回傳讀到的bytes，所以如果要檢測EOF: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(fread(ptr, <span class="hljs-keyword">sizeof</span>(), cnt, fp) != cnt)&#123;<br>    <span class="hljs-comment">// EOF</span><br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>];<br>FILE* fp[<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> have_num[<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">char</span> s[<span class="hljs-number">20</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>        fp[i] = fopen(s, <span class="hljs-string">&quot;rb&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(fread(&amp;arr[i], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-number">1</span>, fp[i]) == <span class="hljs-number">1</span>)&#123;<br>            have_num[i] = <span class="hljs-number">1</span>, cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            have_num[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(cnt != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_num = INT_MAX;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(have_num[i] &amp;&amp; arr[i] &lt; min_num)&#123;<br>                min_idx = i;<br>                min_num = arr[i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, arr[min_idx]);<br>        <span class="hljs-keyword">if</span>(fread(&amp;arr[min_idx], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-number">1</span>, fp[min_idx]) != <span class="hljs-number">1</span>)&#123;<br>            have_num[min_idx] = <span class="hljs-number">0</span>, cnt--;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50065. Move the Car</title>
    <link href="/2023/07/17/judge_girl/50065.%20Move%20the%20Car/"/>
    <url>/2023/07/17/judge_girl/50065.%20Move%20the%20Car/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><p><span class="math inline">\(t\)</span>有可能不在<spanclass="math inline">\([0, 5]\)</span>之間，但題目沒說。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;car.h&quot;</span></span><br><br>CarStatusList <span class="hljs-title function_">carSimulation</span><span class="hljs-params">(CarStatus car, Command commands[])</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    CarStatusList s;<br>    s.num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> t = commands[i].t, v = commands[i].v;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span> || t &gt; <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) car.g += v;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(car.g &lt; v) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>) car.x += v;<br>                <span class="hljs-keyword">if</span>(t == <span class="hljs-number">3</span>) car.x -= v;<br>                <span class="hljs-keyword">if</span>(t == <span class="hljs-number">4</span>) car.y += v;<br>                <span class="hljs-keyword">if</span>(t == <span class="hljs-number">5</span>) car.y -= v;<br>                car.g -= v;<br><br>                s.status[s.num] = car;<br>                s.num++;<br>            &#125;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50059. Binary Representation</title>
    <link href="/2023/07/17/judge_girl/50059.%20Binary%20Representation/"/>
    <url>/2023/07/17/judge_girl/50059.%20Binary%20Representation/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">33</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> now[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> now_idx = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_char</span><span class="hljs-params">(<span class="hljs-type">char</span> s[<span class="hljs-number">33</span>], <span class="hljs-type">int</span> now[<span class="hljs-number">5</span>])</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">if</span>(now[i] != <span class="hljs-number">0</span>) cnt += p;<br>        p *= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[cnt]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">uint32_t</span> num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            now[now_idx] = (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            now_idx += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(now_idx == <span class="hljs-number">5</span>)&#123;<br>                print_char(s, now);<br>                now_idx = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50068. Tree Traversal</title>
    <link href="/2023/07/17/judge_girl/50068.%20Tree%20Traversal/"/>
    <url>/2023/07/17/judge_girl/50068.%20Tree%20Traversal/</url>
    
    <content type="html"><![CDATA[<p>難度：4.4/5</p><p>注意紀錄的東西是從root到你的current就好，不用把每一步都記下來。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_node</span><span class="hljs-params">(Node* n)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n-&gt;label);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">traversal</span><span class="hljs-params">(Node *root, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> command[])</span>&#123;<br>    Node* history[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>    history[idx] = root;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-type">int</span> t = command[i];<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;<br>            print_node(history[idx]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>)&#123;<br>            print_node(history[idx]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">0</span>)&#123;<br>                print_node(history[idx]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                idx -= <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(history[idx]-&gt;left == <span class="hljs-literal">NULL</span>)&#123;<br>                print_node(history[idx]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                history[idx + <span class="hljs-number">1</span>] = history[idx]-&gt;left;<br>                idx += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">if</span>(history[idx]-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>                print_node(history[idx]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                history[idx + <span class="hljs-number">1</span>] = history[idx]-&gt;right;<br>                idx += <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">0</span>)&#123;<br>                print_node(history[idx]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(history[idx - <span class="hljs-number">1</span>]-&gt;left == <span class="hljs-literal">NULL</span> || history[idx - <span class="hljs-number">1</span>]-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>                print_node(history[idx]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(history[idx] == history[idx - <span class="hljs-number">1</span>]-&gt;left)&#123;<br>                    history[idx] = history[idx - <span class="hljs-number">1</span>]-&gt;right;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    history[idx] = history[idx - <span class="hljs-number">1</span>]-&gt;left;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50067. Walk in a File</title>
    <link href="/2023/07/17/judge_girl/50067.%20Walk%20in%20a%20File/"/>
    <url>/2023/07/17/judge_girl/50067.%20Walk%20in%20a%20File/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>記得fseek用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">128</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    FILE* fp = fopen(s, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> type, para;<br>        <span class="hljs-keyword">if</span>(fread(&amp;type, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-number">1</span>, fp) != <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(fread(&amp;para, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-number">1</span>, fp) != <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">if</span>(type == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, para);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (para &gt;&gt; (<span class="hljs-number">8</span> * i) &amp; (<span class="hljs-number">0xff</span>)));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">char</span> c;<br>            <span class="hljs-keyword">while</span>(c = fgetc(fp))&#123;<br>                <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == <span class="hljs-number">3</span>)&#123;<br>            fseek(fp, para - <span class="hljs-number">8</span>, SEEK_CUR);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == <span class="hljs-number">4</span>)&#123;<br>            fseek(fp, para, SEEK_SET);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == <span class="hljs-number">5</span>)&#123;<br>            fseek(fp, para, SEEK_END);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Seek end\n&quot;</span>);<br>    fclose(fp);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50066. Hotel Manager</title>
    <link href="/2023/07/17/judge_girl/50066.%20Hotel%20Manager/"/>
    <url>/2023/07/17/judge_girl/50066.%20Hotel%20Manager/</url>
    
    <content type="html"><![CDATA[<p>難度：4.7/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;reservation.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_insert</span><span class="hljs-params">(RoomStatus *room, <span class="hljs-type">int</span> np, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span>&#123;<br>    Reservation *prev = <span class="hljs-literal">NULL</span>;<br>    Reservation *now = room-&gt;reservation;<br>    <span class="hljs-keyword">for</span>(; now != <span class="hljs-literal">NULL</span>; prev = now, now = now-&gt;next)&#123;<br>        <span class="hljs-keyword">if</span>(e &lt;= now-&gt;StartTime) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(s &lt; now-&gt;EndTime) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    Reservation* new_res = (Reservation*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Reservation));<br>    new_res-&gt;nP = np;<br>    new_res-&gt;StartTime = s;<br>    new_res-&gt;EndTime = e;<br>    <span class="hljs-keyword">if</span>(prev == <span class="hljs-literal">NULL</span>)&#123;<br>        new_res-&gt;next = room-&gt;reservation;<br>        room-&gt;reservation = new_res;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        prev-&gt;next = new_res;<br>        new_res-&gt;next = now;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ReserveRoom</span><span class="hljs-params">(RoomStatus <span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> nP, <span class="hljs-type">int</span> StartTime, <span class="hljs-type">int</span> EndTime)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i].capacity &lt; nP) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(check_insert(&amp;<span class="hljs-built_in">list</span>[i], nP, StartTime, EndTime) == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>struct</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50069. Hangman</title>
    <link href="/2023/07/17/judge_girl/50069.%20Hangman/"/>
    <url>/2023/07/17/judge_girl/50069.%20Hangman/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;hangman.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> ans[<span class="hljs-number">128</span>], guess_str[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d %s&quot;</span>, ans, &amp;n, guess_str);<br><br>    <span class="hljs-type">int</span> guess_len = <span class="hljs-built_in">strlen</span>(guess_str);<br>    Hangman* h = newGame(ans, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; guess_len; i++)&#123;<br>        <span class="hljs-type">char</span> now_guess = guess_str[i];<br>        <span class="hljs-type">int</span> rtv = guess(h, now_guess);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, rtv);<br>        printStatus(h);<br><br>        <span class="hljs-keyword">if</span>(solved(h))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You Win\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You Lose\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You Quit\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        solve();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;hangman.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hangman</span> &#123;</span><br>    <span class="hljs-type">char</span> answer[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">char</span> now[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> ans_len;<br>    <span class="hljs-type">int</span> now_guess;<br>    <span class="hljs-type">int</span> max_guess;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">have_ch</span><span class="hljs-params">(Hangman* hangman, <span class="hljs-type">char</span> ch)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hangman-&gt;ans_len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(hangman-&gt;answer[i] == ch) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>Hangman* <span class="hljs-title function_">newGame</span><span class="hljs-params">(<span class="hljs-type">char</span> *answer, <span class="hljs-type">int</span> G)</span>&#123;<br>    Hangman* h = (Hangman*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Hangman));<br>    <span class="hljs-built_in">strcpy</span>(h-&gt;answer, answer);<br>    h-&gt;ans_len = <span class="hljs-built_in">strlen</span>(answer);<br>    h-&gt;now_guess = <span class="hljs-number">0</span>;<br>    h-&gt;max_guess = G;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; h-&gt;ans_len; i++) h-&gt;now[i] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>    h-&gt;now[h-&gt;ans_len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">guess</span><span class="hljs-params">(Hangman* hangman, <span class="hljs-type">char</span> ch)</span>&#123;<br>    <span class="hljs-keyword">if</span>(have_ch(hangman, ch))&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hangman-&gt;ans_len; i++)&#123;<br>            <span class="hljs-keyword">if</span>(hangman-&gt;answer[i] == ch)&#123;<br>                hangman-&gt;now[i] = ch;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        hangman-&gt;now_guess += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(hangman-&gt;now_guess &gt;= hangman-&gt;max_guess) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStatus</span><span class="hljs-params">(Hangman* hangman)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, hangman-&gt;now);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">solved</span><span class="hljs-params">(Hangman* hangman)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; hangman-&gt;ans_len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(hangman-&gt;now[i] == <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50072. City Grids</title>
    <link href="/2023/07/17/judge_girl/50072.%20City%20Grids/"/>
    <url>/2023/07/17/judge_girl/50072.%20City%20Grids/</url>
    
    <content type="html"><![CDATA[<p>難度：4.3/5</p><p>Second Try: 4/5 Used Time: 32:18</p><p>Prof. P will punish you if you use global variables :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;City_Grid.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(City* c, <span class="hljs-type">int</span> visited[], <span class="hljs-type">int</span>* cnt)</span>&#123;<br>    <span class="hljs-keyword">if</span>(visited[c-&gt;label]) <span class="hljs-keyword">return</span>;<br><br>    visited[c-&gt;label] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(c-&gt;east != <span class="hljs-literal">NULL</span> &amp;&amp; c-&gt;north != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(c-&gt;east-&gt;north != <span class="hljs-literal">NULL</span> &amp;&amp; c-&gt;north-&gt;east != <span class="hljs-literal">NULL</span>)&#123;<br>            (*cnt) += <span class="hljs-number">1</span>;<br>        &#125;<br>        solve(c-&gt;east, visited, cnt);<br>        solve(c-&gt;north, visited, cnt);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c-&gt;east != <span class="hljs-literal">NULL</span>)&#123;<br>        solve(c-&gt;east, visited, cnt);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c-&gt;north != <span class="hljs-literal">NULL</span>)&#123;<br>        solve(c-&gt;north, visited, cnt);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">City_Grid</span><span class="hljs-params">(City *c)</span>&#123;<br>    <span class="hljs-type">int</span> visited[<span class="hljs-number">10005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    solve(c, visited, &amp;cnt);<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50070. Elevator</title>
    <link href="/2023/07/17/judge_girl/50070.%20Elevator/"/>
    <url>/2023/07/17/judge_girl/50070.%20Elevator/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>free(ptr)是好習慣。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;elevator.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> u, d, f;<br>    <span class="hljs-type">char</span> movement[<span class="hljs-number">1600</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %s&quot;</span>, &amp;u, &amp;d, &amp;f, movement);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(movement);<br><br>    Elevator* e = newElevator(u, d, f);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">char</span> now_mv = movement[i];<br>        <span class="hljs-type">int</span> rtv;<br>        <span class="hljs-keyword">if</span>(now_mv == <span class="hljs-string">&#x27;U&#x27;</span>) rtv = up(e);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_mv == <span class="hljs-string">&#x27;D&#x27;</span>) rtv = down(e);<br><br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Valid %d\n&quot;</span>, getPosition(e));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid\n&quot;</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Broken\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= f; i++)&#123;<br>        <span class="hljs-keyword">if</span>(visited(e, i)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(e);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--) solve();<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// #define MAXF 1000</span><br><span class="hljs-comment">// #define MAXL 1500</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;elevator.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Elevator</span>&#123;</span><br>    <span class="hljs-type">int</span> u;<br>    <span class="hljs-type">int</span> d;<br>    <span class="hljs-type">int</span> f;<br>    <span class="hljs-type">int</span> now_floor;<br>    <span class="hljs-type">int</span> cnsc;<br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">1024</span>];<br>&#125;;<br><br>Elevator* <span class="hljs-title function_">newElevator</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> F)</span>&#123;<br>    Elevator* e = (Elevator*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Elevator));<br>    e-&gt;u = u;<br>    e-&gt;d = d;<br>    e-&gt;f = F;<br>    e-&gt;now_floor = <span class="hljs-number">1</span>;<br>    e-&gt;cnsc = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= e-&gt;f; i++)&#123;<br>        e-&gt;vis[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    e-&gt;vis[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">up</span><span class="hljs-params">(Elevator* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(e-&gt;now_floor + e-&gt;u &lt;= e-&gt;f)&#123; <span class="hljs-comment">// valid</span><br>        e-&gt;now_floor += e-&gt;u;<br>        e-&gt;cnsc = <span class="hljs-number">0</span>;<br>        e-&gt;vis[e-&gt;now_floor] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// invalid</span><br>        <span class="hljs-keyword">if</span>(e-&gt;cnsc &lt; <span class="hljs-number">0</span>) e-&gt;cnsc = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> e-&gt;cnsc += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span>(e-&gt;cnsc &gt;= <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">down</span><span class="hljs-params">(Elevator* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(e-&gt;now_floor - e-&gt;d &gt;= <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// valid</span><br>        e-&gt;now_floor -= e-&gt;d;<br>        e-&gt;cnsc = <span class="hljs-number">0</span>;<br>        e-&gt;vis[e-&gt;now_floor] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// invalid</span><br>        <span class="hljs-keyword">if</span>(e-&gt;cnsc &gt; <span class="hljs-number">0</span>) e-&gt;cnsc = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> e-&gt;cnsc -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span>(e-&gt;cnsc &lt;= <span class="hljs-number">-4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">visited</span><span class="hljs-params">(Elevator* e, <span class="hljs-type">int</span> <span class="hljs-built_in">floor</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">floor</span> &gt; e-&gt;f || <span class="hljs-built_in">floor</span> &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> e-&gt;vis[<span class="hljs-built_in">floor</span>];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getPosition</span><span class="hljs-params">(Elevator* e)</span>&#123;<br>    <span class="hljs-keyword">return</span> e-&gt;now_floor;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50071. Attraction Order</title>
    <link href="/2023/07/17/judge_girl/50071.%20Attraction%20Order/"/>
    <url>/2023/07/17/judge_girl/50071.%20Attraction%20Order/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;attraction.h&quot;</span></span><br><br><span class="hljs-type">int</span> n, m;<br>Attraction* pt;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Attraction* p;<br>    <span class="hljs-type">int</span> dis;<br>    <span class="hljs-type">int</span> group;<br>&#125; s_info;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cal_dis</span><span class="hljs-params">(Attraction* p)</span>&#123;<br>    <span class="hljs-keyword">return</span> min(min(n - p-&gt;x, p-&gt;x + <span class="hljs-number">1</span>), min(n - p-&gt;y, p-&gt;y + <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    s_info* pt_a = (s_info*)a;<br>    s_info* pt_b = (s_info*)b;<br>    <span class="hljs-keyword">if</span>(pt_a-&gt;dis != pt_b-&gt;dis) <span class="hljs-keyword">return</span> (pt_a-&gt;dis &gt; pt_b-&gt;dis) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pt_a-&gt;group != pt_b-&gt;group) <span class="hljs-keyword">return</span> (pt_a-&gt;group &gt; pt_b-&gt;group) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(pt_a-&gt;group == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ((pt_a-&gt;p)-&gt;x &gt; pt_b-&gt;p-&gt;x) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pt_a-&gt;group == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> (pt_a-&gt;p-&gt;y &gt; pt_b-&gt;p-&gt;y) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pt_a-&gt;group == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> (pt_a-&gt;p-&gt;x &lt; pt_b-&gt;p-&gt;x) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (pt_a-&gt;p-&gt;y &lt; pt_b-&gt;p-&gt;y) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    FILE* fp = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;rb&quot;</span>);<br>    pt = (Attraction*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Attraction) * m);<br>    fread(pt, <span class="hljs-keyword">sizeof</span>(Attraction), m, fp);<br>    s_info* info = (s_info*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(s_info) * m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        info[i].p = &amp;(pt[i]);<br>        info[i].dis = cal_dis(&amp;(pt[i]));<br>        <span class="hljs-keyword">if</span>(pt[i].y + <span class="hljs-number">1</span> == info[i].dis) info[i].group = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((n - pt[i].x == info[i].dis)) info[i].group = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((n - pt[i].y == info[i].dis)) info[i].group = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> info[i].group = <span class="hljs-number">4</span>;<br>    &#125;<br>    qsort(info, m, <span class="hljs-keyword">sizeof</span>(s_info), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, info[i].p-&gt;x, info[i].p-&gt;y);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50073. Wealth Histogram</title>
    <link href="/2023/07/17/judge_girl/50073.%20Wealth%20Histogram/"/>
    <url>/2023/07/17/judge_girl/50073.%20Wealth%20Histogram/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>兩數和： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = ...<br><span class="hljs-type">int</span> b = ...<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> c = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)a + (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)b;<br></code></pre></td></tr></table></figure> 記得做typecasting。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">12</span>];<br>    <span class="hljs-type">int</span> w;<br>&#125; s_acct;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    s_acct* acct_a = (s_acct*) a;<br>    s_acct* acct_b = (s_acct*) b;<br>    <span class="hljs-keyword">if</span>(acct_a-&gt;w &gt; acct_b-&gt;w) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(acct_a-&gt;w &lt; acct_b-&gt;w) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(acct_a-&gt;name, acct_b-&gt;name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> args, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>    s_acct acct[<span class="hljs-number">1024</span>];<br><br>    FILE* fp = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(fread(&amp;acct[n], <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, fp) == <span class="hljs-number">1</span>)&#123;<br>        n++;<br>    &#125;<br>    qsort(acct, n, <span class="hljs-keyword">sizeof</span>(s_acct), cmp);<br>    <span class="hljs-comment">// for(int i = 0; i &lt; n; i++)&#123;</span><br>    <span class="hljs-comment">//     printf(&quot;%s %d\n&quot;, acct[i].name, acct[i].w);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, n);</span><br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(acct[i - <span class="hljs-number">1</span>].w / <span class="hljs-number">1000</span> != acct[i].w / <span class="hljs-number">1000</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>            cnt = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, acct[<span class="hljs-number">0</span>].name);<br>    <span class="hljs-type">int</span> max_num = acct[n - <span class="hljs-number">1</span>].w;<br>    <span class="hljs-type">int</span> max_idx;<br>    <span class="hljs-keyword">for</span>(max_idx = n - <span class="hljs-number">1</span>; max_idx &gt;= <span class="hljs-number">0</span>; max_idx--)&#123;<br>        <span class="hljs-keyword">if</span>(acct[max_idx].w != max_num) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    max_idx++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, acct[max_idx].name);<br><br>    <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, acct[n / <span class="hljs-number">2</span>].w);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)acct[n / <span class="hljs-number">2</span>].w + (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)acct[n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>].w;<br>        <span class="hljs-type">int</span> avg = sum / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, avg);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50079. Apple Pile</title>
    <link href="/2023/07/17/judge_girl/50079.%20Apple%20Pile/"/>
    <url>/2023/07/17/judge_girl/50079.%20Apple%20Pile/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-type">int</span> sum = (a + b) * (b - a + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> len = (a + b) + (b - a - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, sum, len);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50081. Robot Simulation</title>
    <link href="/2023/07/17/judge_girl/50081.%20Robot%20Simulation/"/>
    <url>/2023/07/17/judge_girl/50081.%20Robot%20Simulation/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; b) ? a : b;<br>&#125;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> inst;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, x, y);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;inst) != EOF)&#123;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(inst % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>            flag = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inst % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is_valid(x + inst, y)) x += inst;<br>            <span class="hljs-keyword">else</span> flag = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inst % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is_valid(x - inst, y)) x -= inst;<br>            <span class="hljs-keyword">else</span> flag = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inst % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is_valid(x, y + inst)) y += inst;<br>            <span class="hljs-keyword">else</span> flag = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inst % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is_valid(x, y - inst)) y -= inst;<br>            <span class="hljs-keyword">else</span> flag = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, x, y);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50078. Parallelogram</title>
    <link href="/2023/07/17/judge_girl/50078.%20Parallelogram/"/>
    <url>/2023/07/17/judge_girl/50078.%20Parallelogram/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> x, y;<br>&#125; s_pt;<br><br>s_pt <span class="hljs-title function_">add</span><span class="hljs-params">(s_pt a, s_pt b)</span>&#123;<br>    s_pt rtv;<br>    rtv.x = a.x + b.x;<br>    rtv.y = a.y + b.y;<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br>s_pt <span class="hljs-title function_">minus</span><span class="hljs-params">(s_pt a, s_pt b)</span>&#123;<br>    s_pt rtv;<br>    rtv.x = a.x - b.x;<br>    rtv.y = a.y - b.y;<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    s_pt a, b, c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;c.x, &amp;c.y);<br>    s_pt d, e, f;<br><br>    d = add(minus(c, a), b);<br>    e = add(minus(c, b), a);<br>    f = add(minus(b, c), a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n%d\n%d\n%d\n%d\n&quot;</span>, d.x, d.y, e.x, e.y, f.x, f.y);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50084. Machines and Jobs</title>
    <link href="/2023/07/17/judge_girl/50084.%20Machines%20and%20Jobs/"/>
    <url>/2023/07/17/judge_girl/50084.%20Machines%20and%20Jobs/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; b) ? a : b;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> free_time;<br>    <span class="hljs-type">int</span> num_task;<br>    <span class="hljs-type">int</span> task_id[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">int</span> task_time[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">int</span> now_task;<br>&#125; s_job;<br><br><span class="hljs-type">int</span> n, m;<br>s_job job[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> mchn_ready[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_time</span><span class="hljs-params">(s_job* j)</span>&#123;<br>    <span class="hljs-type">int</span> mach_id = j-&gt;task_id[j-&gt;now_task];<br>    <span class="hljs-type">int</span> mach_time = j-&gt;task_time[j-&gt;now_task];<br><br>    <span class="hljs-keyword">return</span> max(j-&gt;free_time, mchn_ready[mach_id]) + mach_time;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">progress</span><span class="hljs-params">(s_job* j)</span>&#123;<br>    <span class="hljs-type">int</span> mach_id = j-&gt;task_id[j-&gt;now_task];<br>    <span class="hljs-type">int</span> mach_time = j-&gt;task_time[j-&gt;now_task];<br><br>    j-&gt;free_time = max(j-&gt;free_time, mchn_ready[mach_id]) + mach_time;<br>    mchn_ready[mach_id] = j-&gt;free_time;<br>    j-&gt;now_task++;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;job[i].free_time, &amp;job[i].num_task);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; job[i].num_task; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;job[i].task_id[j], &amp;job[i].task_time[j]);<br>            job[i].now_task = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> min_job_idx = <span class="hljs-number">-1</span>, min_job_time = INT_MAX;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">if</span>(job[i].now_task == job[i].num_task) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> this_time = get_time(&amp;job[i]);<br>            <span class="hljs-keyword">if</span>(min_job_time &gt; this_time)&#123;<br>                min_job_idx = i;<br>                min_job_time = this_time;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min_job_idx != <span class="hljs-number">-1</span>) progress(&amp;job[min_job_idx]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, job[i].free_time);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50083. Buckets and Balls</title>
    <link href="/2023/07/17/judge_girl/50083.%20Buckets%20and%20Balls/"/>
    <url>/2023/07/17/judge_girl/50083.%20Buckets%20and%20Balls/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; b) ? a : b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, m, r;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;r);<br><br><br>    <span class="hljs-type">int</span> ball;<br>    <span class="hljs-keyword">if</span>(r == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ball) != EOF)&#123;<br>            <span class="hljs-keyword">if</span>(n &gt;= ball) n -= ball;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m &gt;= ball) m -= ball;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, m);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(r == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ball) != EOF)&#123;<br>            <span class="hljs-keyword">if</span>(n &lt;= m)&#123;<br>                <span class="hljs-keyword">if</span>(n &gt;= ball) n -= ball;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m &gt;= ball) m -= ball;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(m &gt;= ball) m -= ball;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n &gt;= ball) n -= ball;<br>            &#125;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, m);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50085. Tank Simulation</title>
    <link href="/2023/07/17/judge_girl/50085.%20Tank%20Simulation/"/>
    <url>/2023/07/17/judge_girl/50085.%20Tank%20Simulation/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5 Used Time: 35:18</p><p>去年考古題，耗時50分，途中看錯兩次題目所以花了很多時間。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; b) ? a : b;<br>&#125;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> x, y;<br>&#125; s_pt;<br> <br><span class="hljs-type">int</span> n, m, l, w;<br>s_pt tank;<br><span class="hljs-type">int</span> obj_cnt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;m, &amp;l, &amp;w);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;obj_cnt);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; obj_cnt; i++)&#123;<br>        <span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">map</span>[b][a] = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> ( x &gt;= tank.x &amp;&amp; x &lt; tank.x + l &amp;&amp;<br>             y &gt;= tank.y &amp;&amp; y &lt; tank.y + w);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-keyword">if</span>(is_tank(i, j)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">map</span>[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">0</span>) print_arr();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(tank.y + w == m) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + i][tank.y + w] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &lt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x + i][tank.y + w] = <span class="hljs-number">0</span>;<br>                &#125;<br>                tank.y++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">if</span>(tank.x + l == n) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + l][tank.y + i] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &lt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x + l][tank.y + i] = <span class="hljs-number">0</span>;<br>                &#125;<br>                tank.x++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-keyword">if</span>(tank.y == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + i][tank.y - <span class="hljs-number">1</span>] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &lt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x + i][tank.y - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                &#125;<br>                tank.y--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">if</span>(tank.x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x - <span class="hljs-number">1</span>][tank.y + i] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &lt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x - <span class="hljs-number">1</span>][tank.y + i] = <span class="hljs-number">0</span>;<br>                &#125;<br>                tank.x--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">if</span>(tank.y + w == m || tank.x + l == n) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; l; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + i][tank.y + w] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; w; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + l][tank.y + i] == <span class="hljs-number">2</span>) cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[tank.x + l][tank.y + w] == <span class="hljs-number">2</span>) cnt++;<br> <br>            <span class="hljs-keyword">if</span>(cnt &lt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; l; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x + i][tank.y + w] = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; w; i++)&#123;<br>                    <span class="hljs-built_in">map</span>[tank.x + l][tank.y + i] = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-built_in">map</span>[tank.x + l][tank.y + w] = <span class="hljs-number">0</span>;<br>                tank.x++, tank.y++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-type">int</span> cmd;<br>    <span class="hljs-comment">// print_arr();</span><br>    <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cmd) != EOF)&#123;<br>        move(cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50080. Scan The Blocks</title>
    <link href="/2023/07/17/judge_girl/50080.%20Scan%20The%20Blocks/"/>
    <url>/2023/07/17/judge_girl/50080.%20Scan%20The%20Blocks/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; b) ? a : b;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> now_num;<br>    <span class="hljs-type">int</span> min_num = INT_MAX, max_num = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now_num) == EOF)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_num);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            min_num = min(min_num, now_num);<br>            max_num = max(max_num, now_num);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_num);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        solve(n);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50074. Tree Statistics</title>
    <link href="/2023/07/17/judge_girl/50074.%20Tree%20Statistics/"/>
    <url>/2023/07/17/judge_girl/50074.%20Tree%20Statistics/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>call四個遞迴會超時，想辦法把壓成3或2個。</p><p>Second Try: 3/5 Used Time: 10:35 Using 1 recursive function isenough.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;trace.h&quot;</span></span><br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br> <br><span class="hljs-type">int</span> internal = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> leaf = <span class="hljs-number">0</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">count_max_branch</span><span class="hljs-params">(Node* root)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>)&#123;<br>        leaf++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    internal++;<br> <br>    <span class="hljs-type">int</span> this_branch = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max_num = <span class="hljs-number">0</span>;<br>    ChildList* now = root-&gt;<span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">while</span>(now)&#123;<br>        max_num = max(max_num, count_max_branch(now-&gt;node));<br>        now = now-&gt;next;<br>        this_branch++;<br>    &#125;<br> <br>    max_num = max(max_num, this_branch);<br>    <span class="hljs-keyword">return</span> max_num;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">count_depth</span><span class="hljs-params">(Node* root)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">list</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-type">int</span> max_depth = <span class="hljs-number">0</span>;<br>    ChildList* now = root-&gt;<span class="hljs-built_in">list</span>;<br>    <span class="hljs-keyword">while</span>(now)&#123;<br>        max_depth = max(max_depth, count_depth(now-&gt;node));<br>        now = now-&gt;next;<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> max_depth + <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(Node *root, Answer *ans)</span>&#123;<br>    ans-&gt;MaxBranchFactor = count_max_branch(root);<br>    ans-&gt;Depth = count_depth(root);<br>    ans-&gt;InternalNode = internal;<br>    ans-&gt;Leaf = leaf;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;trace.h&quot;</span></span><br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br> <br><span class="hljs-type">int</span> now_d = <span class="hljs-number">-1</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(Node *root, Answer *ans)</span>&#123;<br>    now_d++;<br>    <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">list</span> != <span class="hljs-literal">NULL</span>) (ans-&gt;InternalNode)++;<br>    <span class="hljs-keyword">else</span> (ans-&gt;Leaf)++;<br> <br>    ChildList* now = root-&gt;<span class="hljs-built_in">list</span>;<br>    <span class="hljs-type">int</span> this_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(now)&#123;<br>        trace(now-&gt;node, ans);<br>        now = now-&gt;next;<br>        this_b++;<br>    &#125;<br>    ans-&gt;MaxBranchFactor = max(ans-&gt;MaxBranchFactor, this_b);<br>    ans-&gt;Depth = max(ans-&gt;Depth, now_d);<br>    now_d--;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2016</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50089. Buckets and Balls, Again</title>
    <link href="/2023/07/17/judge_girl/50089.%20Buckets%20and%20Balls,%20Again/"/>
    <url>/2023/07/17/judge_girl/50089.%20Buckets%20and%20Balls,%20Again/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;placement.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">first_fit</span><span class="hljs-params">(<span class="hljs-type">int</span> bucket[<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> ball[<span class="hljs-number">16384</span>], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> result[<span class="hljs-number">16384</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; m; s++)&#123; <span class="hljs-type">int</span> now_ball = ball[s];<br>        <span class="hljs-type">int</span> putted = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(bucket[i] &gt;= now_ball)&#123;<br>                result[s] = i;<br>                bucket[i] -= now_ball;<br>                putted = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!putted) result[s] = <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">best_fit</span><span class="hljs-params">(<span class="hljs-type">int</span> bucket[<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> ball[<span class="hljs-number">16384</span>], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> result[<span class="hljs-number">16384</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; m; s++)&#123; <span class="hljs-type">int</span> now_ball = ball[s];<br>        <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_cap = INT_MAX;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(bucket[i] - now_ball &gt;= <span class="hljs-number">0</span> &amp;&amp; bucket[i] - now_ball &lt; min_cap)&#123;<br>                min_idx = i;<br>                min_cap = bucket[i] - now_ball;<br>            &#125;<br>        &#125;<br>        result[s] = min_idx;<br>        <span class="hljs-keyword">if</span>(min_idx != <span class="hljs-number">-1</span>) bucket[min_idx] -= now_ball;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">worst_fit</span><span class="hljs-params">(<span class="hljs-type">int</span> bucket[<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> ball[<span class="hljs-number">16384</span>], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> result[<span class="hljs-number">16384</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; m; s++)&#123; <span class="hljs-type">int</span> now_ball = ball[s];<br>        <span class="hljs-type">int</span> max_idx = <span class="hljs-number">-1</span>, max_cap = INT_MIN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(bucket[i] - now_ball &gt;= <span class="hljs-number">0</span> &amp;&amp; bucket[i] - now_ball &gt;= max_cap)&#123;<br>                max_idx = i;<br>                max_cap = bucket[i] - now_ball;<br>            &#125;<br>        &#125;<br>        result[s] = max_idx;<br>        <span class="hljs-keyword">if</span>(max_idx != <span class="hljs-number">-1</span>) bucket[max_idx] -= now_ball;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">place</span><span class="hljs-params">(<span class="hljs-type">int</span> bucket[<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> ball[<span class="hljs-number">16384</span>], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> method, <span class="hljs-type">int</span> result[<span class="hljs-number">16384</span>])</span>&#123;<br>    <span class="hljs-keyword">if</span>(method == <span class="hljs-number">0</span>) first_fit(bucket, n, ball, m, result);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method == <span class="hljs-number">1</span>) best_fit(bucket, n, ball, m, result);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method == <span class="hljs-number">2</span>) worst_fit(bucket, n, ball, m, result);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50082. Two Machines</title>
    <link href="/2023/07/17/judge_girl/50082.%20Two%20Machines/"/>
    <url>/2023/07/17/judge_girl/50082.%20Two%20Machines/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arrv_time, time_a, time_b;<br>    <span class="hljs-type">int</span> ready_a = <span class="hljs-number">0</span>, ready_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;arrv_time, &amp;time_a, &amp;time_b) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(arrv_time &lt;= ready_a) ready_a += time_a;<br>        <span class="hljs-keyword">else</span> ready_a = arrv_time + time_a;<br><br>        <span class="hljs-keyword">if</span>(ready_a &lt;= ready_b) ready_b += time_b;<br>        <span class="hljs-keyword">else</span> ready_b = ready_a + time_b;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ready_b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50086. Students and Party</title>
    <link href="/2023/07/17/judge_girl/50086.%20Students%20and%20Party/"/>
    <url>/2023/07/17/judge_girl/50086.%20Students%20and%20Party/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, e;<br><span class="hljs-type">int</span> g[<span class="hljs-number">32768</span>][<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">32768</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> invt[<span class="hljs-number">32768</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, e;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;e);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e; i++)&#123;<br>        <span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>        g[a][cnt[a]++] = b;<br>        g[b][cnt[b]++] = a;<br>    &#125;<br><br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id) != EOF)&#123;<br>        invt[id] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt[id]; i++)&#123;<br>            invt[g[id][i]] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(invt[i] == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50090. Count Pointers</title>
    <link href="/2023/07/17/judge_girl/50090.%20Count%20Pointers/"/>
    <url>/2023/07/17/judge_girl/50090.%20Count%20Pointers/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;count.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">s_pair</span>&#123;</span><br>    <span class="hljs-type">int</span>* address;<br>    <span class="hljs-type">int</span> count;<br>&#125; s_pair;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    s_pair* pa = (s_pair*)a;<br>    s_pair* pb = (s_pair*)b;<br><br>    <span class="hljs-type">int</span> na = *(pa-&gt;address);<br>    <span class="hljs-type">int</span> nb = *(pb-&gt;address);<br>    <span class="hljs-comment">// printf(&quot;cmping %d %d\n&quot;, na, nb);</span><br><br>    <span class="hljs-keyword">if</span>(pa-&gt;count != pb-&gt;count) <span class="hljs-keyword">return</span> pa-&gt;count - pb-&gt;count;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (na) - (nb);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">(<span class="hljs-type">int</span> **p[])</span>&#123;<br>    s_pair <span class="hljs-built_in">pair</span>[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; p[i] != <span class="hljs-literal">NULL</span>; i++)&#123;<br>        <span class="hljs-type">int</span>* a = *(p[i]);<br><br>        <span class="hljs-type">int</span> j;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; cnt; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pair</span>[j].address == a)&#123;<br>                <span class="hljs-built_in">pair</span>[j].count++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j == cnt)&#123;<br>            <span class="hljs-built_in">pair</span>[cnt].address = a;<br>            <span class="hljs-built_in">pair</span>[cnt].count = <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    qsort(<span class="hljs-built_in">pair</span>, cnt, <span class="hljs-keyword">sizeof</span>(s_pair), cmp);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, *(<span class="hljs-built_in">pair</span>[i].address), <span class="hljs-built_in">pair</span>[i].count);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50091. Two-level Table</title>
    <link href="/2023/07/17/judge_girl/50091.%20Two-level%20Table/"/>
    <url>/2023/07/17/judge_girl/50091.%20Two-level%20Table/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;constructTable.h&quot;</span></span><br><br><span class="hljs-type">int</span> ***<span class="hljs-title function_">constructTable</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> B[])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(A[n] != <span class="hljs-number">0</span>) n++; n++;<br><br>    <span class="hljs-type">int</span>*** first_level = (<span class="hljs-type">int</span>***) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>**) * n);<br>    first_level[n - <span class="hljs-number">1</span>] = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>* uni_p = B;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-type">int</span> par_size = A[i];<br>        <span class="hljs-type">int</span>** second_level = (<span class="hljs-type">int</span>**) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*) * par_size);<br>        first_level[i] = second_level;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; par_size; j++)&#123;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                second_level[j] = uni_p;<br>                flag = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span>(*uni_p != <span class="hljs-number">0</span>) uni_p++;<br>                uni_p++;<br>                second_level[j] = uni_p;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> first_level;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50087. See-Saw</title>
    <link href="/2023/07/17/judge_girl/50087.%20See-Saw/"/>
    <url>/2023/07/17/judge_girl/50087.%20See-Saw/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[<span class="hljs-number">2055</span>];<br><span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_pt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l_bucket = <span class="hljs-number">0</span>, r_bucket = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) r += (i) * w[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) r_bucket += w[i];<br><br>    <span class="hljs-type">int</span> ptr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> ptr;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>        l_bucket += w[ptr], r_bucket -= w[ptr];<br>        l += l_bucket, r -= r_bucket;<br>        ptr++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> rtv = find_pt();<br>        <span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, w[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>                <span class="hljs-keyword">if</span>(i != rtv) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, w[i]);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; v&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br><br>        <span class="hljs-type">int</span> temp = w[s];<br>        w[s] = w[n - s - <span class="hljs-number">1</span>];<br>        w[n - s - <span class="hljs-number">1</span>] = temp;<br>        s++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>loop</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50095. Lines of Words</title>
    <link href="/2023/07/17/judge_girl/50095.%20Lines%20of%20Words/"/>
    <url>/2023/07/17/judge_girl/50095.%20Lines%20of%20Words/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> ipt[<span class="hljs-number">1050624</span>];<br><span class="hljs-type">char</span> arr[<span class="hljs-number">10000000</span>];<br><span class="hljs-type">char</span>* arr_ptr;<br><br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> word_cnt[<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cnt_words</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27; &#x27;</span>) ans += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">char</span>*** <span class="hljs-title function_">get_ptr</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>*** first_level = (<span class="hljs-type">char</span>***) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>**) * n);<br><br>    arr_ptr = arr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fgets(arr_ptr, <span class="hljs-number">1050624</span>, <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-type">int</span> len_s = <span class="hljs-built_in">strlen</span>(arr_ptr);<br>        <span class="hljs-type">int</span> cnt = cnt_words(arr_ptr, len_s);<br>        word_cnt[i] = cnt;<br><br>        <span class="hljs-type">char</span>** second_level = (<span class="hljs-type">char</span>**) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>*) * cnt);<br>        first_level[i] = second_level;<br><br>        <span class="hljs-type">int</span> _cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span>* token = strtok(arr_ptr, <span class="hljs-string">&quot; \n&quot;</span>);<br>        <span class="hljs-keyword">while</span>(token != <span class="hljs-literal">NULL</span>)&#123;<br>            second_level[_cnt++] = token;<br>            token = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; \n&quot;</span>);<br>        &#125;<br>        arr_ptr += len_s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> first_level;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">char</span>*** ptr)</span>&#123;<br>    <span class="hljs-type">int</span> l1, w1, l2, w2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;l1, &amp;w1, &amp;l2, &amp;w2);<br><br>    <span class="hljs-type">char</span>* temp = ptr[l1][w1];<br>    ptr[l1][w1] = ptr[l2][w2];<br>    ptr[l2][w2] = temp;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_word</span><span class="hljs-params">(<span class="hljs-type">char</span>* p)</span>&#123;<br>    <span class="hljs-keyword">while</span>(*p != <span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-built_in">putchar</span>(*p), p++;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span>*** ptr)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; word_cnt[i]; j++)&#123;<br>            print_word(ptr[i][j]);<br>            <span class="hljs-keyword">if</span>(j != word_cnt[i] - <span class="hljs-number">1</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); getchar();<br>    <span class="hljs-type">char</span>*** ptr = get_ptr();<br>    <span class="hljs-comment">// print(ptr);</span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--) solve(ptr);<br>    print(ptr);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50088. Mountain Travelers</title>
    <link href="/2023/07/17/judge_girl/50088.%20Mountain%20Travelers/"/>
    <url>/2023/07/17/judge_girl/50088.%20Mountain%20Travelers/</url>
    
    <content type="html"><![CDATA[<p>難度：4.7/5 Used Time: 28:54</p><p>邊界條件非常多，必重練。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;travel.h&quot;</span></span><br><br><span class="hljs-type">int</span> vis[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_max_idx</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-type">int</span> max_idx = <span class="hljs-number">-1</span>, max_num = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; <span class="hljs-number">8</span>; d++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[d], now_y = y + dy[d];<br>        <span class="hljs-keyword">if</span>(!is_valid(now_x, now_y, n, m)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[now_x][now_y] &gt; max_num)&#123;<br>            max_idx = d;<br>            max_num = <span class="hljs-built_in">map</span>[now_x][now_y];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(max_num &lt; <span class="hljs-built_in">map</span>[x][y]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> max_idx;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_min_idx</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_num = INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; <span class="hljs-number">8</span>; d++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[d], now_y = y + dy[d];<br>        <span class="hljs-keyword">if</span>(!is_valid(now_x, now_y, n, m)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[now_x][now_y] &lt; min_num)&#123;<br>            min_idx = d;<br>            min_num = <span class="hljs-built_in">map</span>[now_x][now_y];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(min_num &gt; <span class="hljs-built_in">map</span>[x][y]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> min_idx;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> a_r, <span class="hljs-type">int</span> a_c, <span class="hljs-type">int</span> b_r, <span class="hljs-type">int</span> b_c, <span class="hljs-type">int</span> directionA[], <span class="hljs-type">int</span> directionB[])</span>&#123;<br>    vis[a_r][a_c] = <span class="hljs-number">1</span>, vis[b_r][b_c] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> ptr_a = <span class="hljs-number">0</span>, ptr_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a_mov = <span class="hljs-number">1</span>, b_mov = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> rtv_a, rtv_b;<br>    <span class="hljs-keyword">while</span>(a_mov || b_mov)&#123;<br>        <span class="hljs-keyword">if</span>(a_mov) rtv_a = find_max_idx(<span class="hljs-built_in">map</span>, a_r, a_c, n, m);<br>        <span class="hljs-keyword">if</span>(b_mov) rtv_b = find_min_idx(<span class="hljs-built_in">map</span>, b_r, b_c, n, m);<br><br>        <span class="hljs-keyword">if</span>(a_mov) directionA[ptr_a++] = rtv_a;<br>        <span class="hljs-keyword">if</span>(b_mov) directionB[ptr_b++] = rtv_b;<br>        <span class="hljs-keyword">if</span>(rtv_a == <span class="hljs-number">-1</span>) a_mov = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(rtv_b == <span class="hljs-number">-1</span>) b_mov = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(a_mov) a_r += dx[rtv_a], a_c += dy[rtv_a];<br>        <span class="hljs-keyword">if</span>(b_mov) b_r += dx[rtv_b], b_c += dy[rtv_b];<br>        <span class="hljs-keyword">if</span>(a_mov &amp;&amp; vis[a_r][a_c] == <span class="hljs-number">1</span>)&#123;<br>            directionA[ptr_a++] = <span class="hljs-number">-1</span>;<br>            a_mov = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(b_mov &amp;&amp; vis[b_r][b_c] == <span class="hljs-number">1</span>)&#123;<br>            directionB[ptr_b++] = <span class="hljs-number">-1</span>;<br>            b_mov = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a_mov &amp;&amp; b_mov &amp;&amp; a_r == b_r &amp;&amp; a_c == b_c)&#123;<br>            directionA[ptr_a++] = <span class="hljs-number">-1</span>;<br>            directionB[ptr_b++] = <span class="hljs-number">-1</span>;<br>            a_mov = <span class="hljs-number">0</span>;<br>            b_mov = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a_mov) vis[a_r][a_c] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(b_mov) vis[b_r][b_c] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50096. Hamming Distance</title>
    <link href="/2023/07/17/judge_girl/50096.%20Hamming%20Distance/"/>
    <url>/2023/07/17/judge_girl/50096.%20Hamming%20Distance/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span>&#123;</span><br>    <span class="hljs-type">uint64_t</span> code;<br>    <span class="hljs-type">uint8_t</span> c[<span class="hljs-number">8</span>];<br>&#125; helper;<br><br><span class="hljs-type">int</span> n, m, p;<br>helper valid_code[<span class="hljs-number">4</span>];<br><span class="hljs-type">uint8_t</span> text[<span class="hljs-number">256</span>];<br><span class="hljs-type">uint8_t</span>* code_arr;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_bin</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (n &gt;&gt; i) &amp; <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_valid_code</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">uint64_t</span> t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;(valid_code[i].code));<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>            <span class="hljs-type">uint8_t</span> temp = valid_code[i].c[j];<br>            valid_code[i].c[j] = valid_code[i].c[<span class="hljs-number">7</span> - j];<br>            valid_code[i].c[<span class="hljs-number">7</span> - j] = temp;<br>        &#125;<br>    &#125;<br>    code_arr = valid_code[<span class="hljs-number">0</span>].c;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_exact</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> message)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(message == code_arr[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> message)</span>&#123;<br>    <span class="hljs-keyword">if</span>(check_exact(message))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%hhu\n&quot;</span>, message);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-type">int</span> now_message = message ^ (<span class="hljs-number">1</span> &lt;&lt; i);<br>        <span class="hljs-keyword">if</span>(check_exact(now_message))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%hhu\n&quot;</span>, now_message);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;p);<br>    get_valid_code();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p; i++)&#123;<br>        <span class="hljs-type">uint8_t</span> message;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%hhu&quot;</span>, &amp;message);<br>        solve(message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50098. Disjoint Clubs</title>
    <link href="/2023/07/17/judge_girl/50098.%20Disjoint%20Clubs/"/>
    <url>/2023/07/17/judge_girl/50098.%20Disjoint%20Clubs/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5</p><p>將19行的<code>i &lt; n</code>剪成<code>i &lt;= (k - cnt)</code>可以從772ms加速到254 ms。記得只要跟<code>uint64_t</code>做operation，另一個operand也要typecast成<code>uint64_t</code>。</p><p>Second Try: 3/5 Used Time: 16:12 But my runtime is a lot worse...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">uint64_t</span> club[<span class="hljs-number">101</span>] = &#123;(<span class="hljs-type">uint64_t</span>)<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> vis[], <span class="hljs-type">uint64_t</span> in_members, <span class="hljs-type">int</span> cnt, <span class="hljs-type">int</span> now_c)</span>&#123;<br>    <span class="hljs-keyword">if</span>(cnt == k)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_c == n)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = now_c; i &lt;= n - (k - cnt); i++)&#123;<br>            <span class="hljs-keyword">if</span>((in_members &amp; club[i]) != (<span class="hljs-type">uint64_t</span>)<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> rtv = dfs(vis, in_members | club[i], cnt + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            vis[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_bin</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">63</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (n &gt;&gt; i) &amp; (<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-type">int</span> ppl; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ppl);<br>            club[i] |= ((<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; ppl);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">101</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(vis, (<span class="hljs-type">uint64_t</span>)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>bit-masking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50099. Seesaw Chandelier</title>
    <link href="/2023/07/17/judge_girl/50099.%20Seesaw%20Chandelier/"/>
    <url>/2023/07/17/judge_girl/50099.%20Seesaw%20Chandelier/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Second Try: 3.5/5 Used Time: 20:13</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">uint64_t</span> arr[<span class="hljs-number">16384</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> is_toqure[<span class="hljs-number">16384</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(r - l &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">uint64_t</span> l_bucket = <span class="hljs-number">0</span>, r_bucket = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint64_t</span> l_weight = <span class="hljs-number">0</span>, r_weight = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++) r_bucket += arr[i], r_weight += ((p++) * arr[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++)&#123;<br>        <span class="hljs-keyword">if</span>(l_weight &gt; r_weight) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l_weight == r_weight)&#123;<br>            is_toqure[i] = <span class="hljs-number">1</span>;<br>            dfs(l, i - <span class="hljs-number">1</span>);<br>            dfs(i + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            l_bucket += arr[i], r_bucket -= arr[i];<br>            l_weight += l_bucket, r_weight -= r_bucket;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;arr[i]);<br><br>    dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(is_toqure[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50100. Impact Factor</title>
    <link href="/2023/07/17/judge_girl/50100.%20Impact%20Factor/"/>
    <url>/2023/07/17/judge_girl/50100.%20Impact%20Factor/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;compute.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXP 1024</span><br><br><span class="hljs-comment">// typedef struct &#123;</span><br><span class="hljs-comment">//     char journalName[64];</span><br><span class="hljs-comment">//     int numCitedPaper;</span><br><span class="hljs-comment">//     int citedPaperIndex[1024];</span><br><span class="hljs-comment">// &#125; paper;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">int</span> publish_cnt;<br>    <span class="hljs-type">int</span> num_cited;<br>&#125; s_helper;<br><br>s_helper helper[<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">char</span>* name_arr[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> publish_cnt[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> num_cited[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span>* name)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(name, name_arr[i]) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(((s_helper*)a)-&gt;name, ((s_helper*)b)-&gt;name);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(paper p[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> rtv = find(p[i].journalName);<br>        <span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">-1</span>)&#123;<br>            publish_cnt[rtv]++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            name_arr[cnt] = p[i].journalName;<br>            publish_cnt[cnt] = <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> cited_num = p[i].numCitedPaper;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cited_num; j++)&#123;<br>            <span class="hljs-type">int</span> cite_id = p[i].citedPaperIndex[j];<br>            num_cited[find(p[cite_id].journalName)]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        helper[i].name = name_arr[i];<br>        helper[i].publish_cnt = publish_cnt[i];<br>        helper[i].num_cited = num_cited[i];<br>    &#125;<br>    qsort(helper, cnt, <span class="hljs-keyword">sizeof</span>(s_helper), cmp);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d/%d\n&quot;</span>, helper[i].name, helper[i].num_cited, helper[i].publish_cnt);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50103. File Mirroring and Shifting</title>
    <link href="/2023/07/17/judge_girl/50103.%20File%20Mirroring%20and%20Shifting/"/>
    <url>/2023/07/17/judge_girl/50103.%20File%20Mirroring%20and%20Shifting/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>在長度<span class="math inline">\(l\)</span>的array中倒轉並left shift<span class="math inline">\(n\)</span>格，相當於對前<spanclass="math inline">\(l-n\)</span>項做reverse，再對最後<spanclass="math inline">\(n\)</span>項做reverse。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span><br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">rev_bits</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> num)</span>&#123;<br>    <span class="hljs-type">uint8_t</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(((num &gt;&gt; i) &amp; <span class="hljs-number">1</span>)) ans |= ((<span class="hljs-type">uint8_t</span>)<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">7</span> - i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">uint8_t</span> temp = arr[l];<br>        arr[l] = arr[r];<br>        arr[r] = temp;<br>        l++, r--;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) arr[i] = rev_bits(arr[i]);<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(FILE* in, FILE* out, <span class="hljs-type">int</span> n)</span>&#123;<br>    fseek(in, <span class="hljs-number">0</span>, SEEK_END); <span class="hljs-type">int</span> len = ftell(in);<br>    <span class="hljs-type">int</span> n_first = len - n;<br> <br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">4096</span>];<br>    fseek(in, n_first, SEEK_SET);<br>    <span class="hljs-keyword">while</span>(n_first)&#123;<br>        <span class="hljs-type">int</span> arr_size = min(n_first, <span class="hljs-number">4096</span>);<br>        fseek(in, -arr_size, SEEK_CUR); fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), arr_size, in); fseek(in, -arr_size, SEEK_CUR);<br>        reverse(arr, arr_size);<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), arr_size, out);<br> <br>        n_first -= arr_size;<br>    &#125;<br> <br>    <span class="hljs-type">int</span> n_second = n;<br>    fseek(in, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-keyword">while</span>(n_second)&#123;<br>        <span class="hljs-type">int</span> arr_size = min(n_second, <span class="hljs-number">4096</span>);<br> <br>        fseek(in, -arr_size, SEEK_CUR); fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), arr_size, in); fseek(in, -arr_size, SEEK_CUR);<br>        reverse(arr, arr_size);<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), arr_size, out);<br> <br>        n_second -= arr_size;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> in_name[<span class="hljs-number">64</span>], out_name[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%d&quot;</span>, in_name, out_name, &amp;n);<br>    FILE* in = fopen(in_name, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* out = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br>    solve(in, out, n);<br>    fclose(in);<br>    fclose(out);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// l = 7, n = 3</span><br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7]</span><br><span class="hljs-comment">// [4, 3, 2, 1, 7, 6, 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50102. File Addition</title>
    <link href="/2023/07/17/judge_girl/50102.%20File%20Addition/"/>
    <url>/2023/07/17/judge_girl/50102.%20File%20Addition/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5</p><p>本題不能從尾端一次抓8個bytes來處理，需要開一個4096的array來批次處理進位問題。另外即使一個wb的filepointer沒有任何東西，還是可以指向後面n格的距離，以此來先寫最後面的bytes。</p><p>（參見morris大神的code） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(FILE *in_1, FILE *in_2, FILE *out)</span>&#123;<br>fseek(in_1, <span class="hljs-number">0</span>, SEEK_END); fseek(in_2, <span class="hljs-number">0</span>, SEEK_END);<br><span class="hljs-type">int</span> len_1 = ftell(in_1), len_2 = ftell(in_2);<br><span class="hljs-keyword">if</span>(len_1 &lt; len_2)&#123;<br>FILE *temp_f = in_1; in_1 = in_2; in_2 = temp_f;<br><span class="hljs-type">int</span> temp_l = len_1; len_1 = len_2; len_2 = temp_l;<br>&#125;<br>fseek(out, len_1, SEEK_SET);<br><br><span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> arr_1[<span class="hljs-number">4096</span>];<br><span class="hljs-type">uint8_t</span> arr_2[<span class="hljs-number">4096</span>];<br><span class="hljs-keyword">while</span>(len_1 &amp;&amp; len_2)&#123;<br><span class="hljs-type">int</span> n = min(min(len_1, len_2), <span class="hljs-number">4096</span>);<br><br>fseek(in_1, -n, SEEK_CUR); fread(arr_1, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), n, in_1); fseek(in_1, -n, SEEK_CUR);<br>fseek(in_2, -n, SEEK_CUR); fread(arr_2, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), n, in_2); fseek(in_2, -n, SEEK_CUR);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br><span class="hljs-type">uint32_t</span> sum = (<span class="hljs-type">int</span>)arr_1[i] + (<span class="hljs-type">int</span>)arr_2[i] + carry;<br><span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">255</span>) carry = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> carry = <span class="hljs-number">0</span>;<br>arr_1[i] = (<span class="hljs-type">uint8_t</span>)sum;<br>&#125;<br>fseek(out, -n, SEEK_CUR); fwrite(arr_1, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), n, out); fseek(out, -n, SEEK_CUR);<br>len_1 -= n, len_2 -= n;<br>&#125;<br><span class="hljs-keyword">while</span>(len_1)&#123;<br><span class="hljs-type">int</span> n = min(len_1, <span class="hljs-number">4096</span>);<br><br>fseek(in_1, -n, SEEK_CUR); fread(arr_1, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), n, in_1); fseek(in_1, -n, SEEK_CUR);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br><span class="hljs-type">uint32_t</span> sum = (<span class="hljs-type">int</span>)arr_1[i] + carry;<br><span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">255</span>) carry = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> carry = <span class="hljs-number">0</span>;<br>arr_1[i] = (<span class="hljs-type">uint8_t</span>)sum;<br>&#125;<br>fseek(out, -n, SEEK_CUR); fwrite(arr_1, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), n, out); fseek(out, -n, SEEK_CUR);<br>len_1 -= n;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br> <span class="hljs-type">char</span> in_1_name[<span class="hljs-number">64</span>], in_2_name[<span class="hljs-number">64</span>], out_name[<span class="hljs-number">64</span>];<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%s&quot;</span>, in_1_name, in_2_name, out_name);<br> FILE *in_1 = fopen(in_1_name, <span class="hljs-string">&quot;rb&quot;</span>), *in_2 = fopen(in_2_name, <span class="hljs-string">&quot;rb&quot;</span>);<br> FILE *out = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br> solve(in_1, in_2, out);<br> fclose(in_1); fclose(in_2); fclose(out);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50101. Component and Parts</title>
    <link href="/2023/07/17/judge_girl/50101.%20Component%20and%20Parts/"/>
    <url>/2023/07/17/judge_girl/50101.%20Component%20and%20Parts/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>Second Try: 3/5 Used Time: 14:10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;componentPart.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLENGTH 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXCOMPONENT 64</span><br><br><span class="hljs-comment">// typedef struct&#123;</span><br><span class="hljs-comment">//     char name[MAXLENGTH];</span><br><span class="hljs-comment">//     int numComponent;</span><br><span class="hljs-comment">//     int componentPartList[MAXCOMPONENT];</span><br><span class="hljs-comment">//     int price;</span><br><span class="hljs-comment">// &#125;ComponentPart;</span><br><br><span class="hljs-type">int</span> cnt;<br>ComponentPart* cp;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(((ComponentPart*)a)-&gt;name, ((ComponentPart*)b)-&gt;name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_price</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[idx] == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> cp[idx].price;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cp[idx].numComponent == <span class="hljs-number">0</span>)&#123;<br>        vis[idx] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> cp[idx].price;<br>    &#125;<br><br>    <span class="hljs-type">int</span> total_price = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cp[idx].numComponent; i++)&#123;<br>        total_price += get_price(cp[idx].componentPartList[i], n);<br>    &#125;<br>    vis[idx] = <span class="hljs-number">1</span>;<br>    cp[idx].price = total_price;<br>    <span class="hljs-keyword">return</span> total_price;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">findPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> n, ComponentPart <span class="hljs-built_in">list</span>[])</span>&#123;<br>    cp = <span class="hljs-built_in">list</span>;<br>    cnt = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(vis[i] == <span class="hljs-number">0</span>) get_price(i, n);<br>    &#125;<br>    qsort(<span class="hljs-built_in">list</span>, n, <span class="hljs-keyword">sizeof</span>(ComponentPart), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, <span class="hljs-built_in">list</span>[i].name, <span class="hljs-built_in">list</span>[i].price);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50094. Word Learning</title>
    <link href="/2023/07/17/judge_girl/50094.%20Word%20Learning/"/>
    <url>/2023/07/17/judge_girl/50094.%20Word%20Learning/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 20:55</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">26</span>][<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> used[<span class="hljs-number">26</span>][<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">map_alpha</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; <span class="hljs-number">26</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], j == <span class="hljs-number">25</span> ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">record</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-type">int</span> n1 = map_alpha(s[i]);<br>        <span class="hljs-type">int</span> n2 = map_alpha(s[i + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(is_valid(n1) &amp;&amp; is_valid(n2))&#123;<br>            arr[n1][n2]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-type">int</span> start_x, start_y, max_cnt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i][j] &gt; max_cnt)&#123;<br>                start_x = i, start_y = j;<br>                max_cnt = arr[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>, start_x + <span class="hljs-string">&#x27;a&#x27;</span>, start_y + <span class="hljs-string">&#x27;a&#x27;</span>);<br>    vis[start_x] = <span class="hljs-number">1</span>, vis[start_y] = <span class="hljs-number">1</span>;<br><br>    start_x = start_y;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> max_idx, max_cnt = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[start_x][i] &gt; max_cnt &amp;&amp; vis[i] == <span class="hljs-number">0</span>)&#123;<br>                max_idx = i;<br>                max_cnt = arr[start_x][i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(max_cnt &lt;= t) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, max_idx + <span class="hljs-string">&#x27;a&#x27;</span>);<br>        vis[max_idx] = <span class="hljs-number">1</span>;<br>        start_x = max_idx;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(fgets(line, <span class="hljs-number">1024</span>, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(line);<br>        record(line, n);<br>    &#125;<br>    print_arr();<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50104. Students and Clubs</title>
    <link href="/2023/07/17/judge_girl/50104.%20Students%20and%20Clubs/"/>
    <url>/2023/07/17/judge_girl/50104.%20Students%20and%20Clubs/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 4/5 Used Time: 33:35</p><p>I didn't debug once but I took me that long...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">64</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> *<span class="hljs-title">left</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> *<span class="hljs-title">right</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> <span class="hljs-title">stnt_node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">club_node</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">char</span> leader[<span class="hljs-number">64</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">club_node</span> *<span class="hljs-title">left</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">club_node</span> *<span class="hljs-title">right</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> *<span class="hljs-title">stnt_set</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">club_node</span> <span class="hljs-title">club_node</span>;</span><br><br>stnt_node *<span class="hljs-title function_">find_stnt</span><span class="hljs-params">(stnt_node *root, <span class="hljs-type">char</span>* s_name)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> rtv = <span class="hljs-built_in">strcmp</span>(s_name, root-&gt;name);<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> find_stnt(root-&gt;left, s_name);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> find_stnt(root-&gt;right, s_name);<br>    &#125;<br>&#125;<br>stnt_node *<span class="hljs-title function_">insert_stnt</span><span class="hljs-params">(stnt_node *root, <span class="hljs-type">char</span>* s_name)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stnt_node</span> *<span class="hljs-title">now</span>;</span><br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        now = (stnt_node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(stnt_node));<br>        <span class="hljs-built_in">strcpy</span>(now-&gt;name, s_name);<br>        now-&gt;left = <span class="hljs-literal">NULL</span>, now-&gt;right = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> now;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(s_name, root-&gt;name) &lt; <span class="hljs-number">0</span>) root-&gt;left = insert_stnt(root-&gt;left, s_name);<br>        <span class="hljs-keyword">else</span> root-&gt;right = insert_stnt(root-&gt;right, s_name);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br>club_node *<span class="hljs-title function_">find_club</span><span class="hljs-params">(club_node *root, <span class="hljs-type">char</span>* c_name)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> rtv = <span class="hljs-built_in">strcmp</span>(c_name, root-&gt;name);<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> find_club(root-&gt;left, c_name);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> find_club(root-&gt;right, c_name);<br>    &#125;<br>&#125;<br>club_node *<span class="hljs-title function_">insert_club</span><span class="hljs-params">(club_node *root, <span class="hljs-type">char</span>* c_name, <span class="hljs-type">char</span>* s_name)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">club_node</span> *<span class="hljs-title">now</span>;</span><br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        now = (club_node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(club_node));<br>        <span class="hljs-built_in">strcpy</span>(now-&gt;name, c_name);<br>        <span class="hljs-built_in">strcpy</span>(now-&gt;leader, s_name);<br>        now-&gt;left = <span class="hljs-literal">NULL</span>, now-&gt;right = <span class="hljs-literal">NULL</span>, now-&gt;stnt_set = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> now;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(c_name, root-&gt;name) &lt; <span class="hljs-number">0</span>) root-&gt;left = insert_club(root-&gt;left, c_name, s_name);<br>        <span class="hljs-keyword">else</span> root-&gt;right = insert_club(root-&gt;right, c_name, s_name);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> q;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> s_name[<span class="hljs-number">64</span>], c_name[<span class="hljs-number">64</span>];<br><br>    club_node* root = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %s %s&quot;</span>, &amp;n, s_name, c_name);<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) root = insert_club(root, c_name, s_name);<br>        <span class="hljs-keyword">else</span>&#123;<br>            club_node* this_club = find_club(root, c_name);<br>            this_club-&gt;stnt_set = insert_stnt(this_club-&gt;stnt_set, s_name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, c_name);<br>            club_node* this_club = find_club(root, c_name);<br>            <span class="hljs-keyword">if</span>(this_club != <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, this_club-&gt;leader);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;None\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, s_name, c_name);<br>            club_node* this_club = find_club(root, c_name);<br>            <span class="hljs-keyword">if</span>(this_club == <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(s_name, this_club-&gt;leader) == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(find_stnt(this_club-&gt;stnt_set, s_name) != <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>pointer</tag>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>bst</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50093. String Substitution</title>
    <link href="/2023/07/17/judge_girl/50093.%20String%20Substitution/"/>
    <url>/2023/07/17/judge_girl/50093.%20String%20Substitution/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> ins[<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">match</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">char</span>* pattern, <span class="hljs-type">int</span> len_s, <span class="hljs-type">int</span> len_p, <span class="hljs-type">int</span> delta)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len_p; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i + delta] != pattern[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_match</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">char</span>* pattern, <span class="hljs-type">int</span> len_s, <span class="hljs-type">int</span> len_p)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> delta = <span class="hljs-number">0</span>; delta &lt;= len_s - len_p; delta++)&#123;<br>        <span class="hljs-keyword">if</span>(match(s, pattern, len_s, len_p, delta)) <span class="hljs-keyword">return</span> delta;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">get_ps</span><span class="hljs-params">(<span class="hljs-type">char</span>* ins, <span class="hljs-type">char</span>* pattern, <span class="hljs-type">char</span>* sub, <span class="hljs-type">int</span>* pattern_len, <span class="hljs-type">int</span>* sub_len)</span>&#123;<br>    <span class="hljs-type">char</span> sep = ins[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; ins[i] != sep; i++) pattern[n++] = ins[i];<br>    pattern[n] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n + <span class="hljs-number">3</span>; ins[i] != sep; i++) sub[m++] = ins[i];<br>    sub[m] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    *pattern_len = n, *sub_len = m;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">substitute</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> len_s, <span class="hljs-type">char</span>* pattern, <span class="hljs-type">char</span>* sub, <span class="hljs-type">int</span> pattern_len, <span class="hljs-type">int</span> sub_len, <span class="hljs-type">int</span> delta)</span>&#123;<br>    <span class="hljs-keyword">if</span>(pattern_len &gt;= sub_len)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sub_len; i++) s[i + delta] = sub[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = delta + pattern_len; i &lt;= len_s; i++) s[i - (pattern_len - sub_len)] = s[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len_s; i &gt;= delta + pattern_len; i--) s[i + (sub_len - pattern_len)] = s[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sub_len; i++) s[i + delta] = sub[i];<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1024</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-type">int</span> len_s = <span class="hljs-built_in">strlen</span>(s);<br><br>    <span class="hljs-keyword">while</span>(fgets(ins, <span class="hljs-number">1024</span>, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ins[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;p&#x27;</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ins[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;s&#x27;</span>)&#123;<br>            <span class="hljs-type">char</span> pattern[<span class="hljs-number">1024</span>], sub[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> pattern_len, sub_len;<br>            get_ps(ins, pattern, sub, &amp;pattern_len, &amp;sub_len);<br><br>            <span class="hljs-type">int</span> rtv = get_match(s, pattern, len_s, pattern_len);<br>            <span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">-1</span>)&#123;<br>                substitute(s, len_s, pattern, sub, pattern_len, sub_len, rtv);<br>                len_s += (sub_len - pattern_len);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50105. Seesaw Chandelier Tree</title>
    <link href="/2023/07/17/judge_girl/50105.%20Seesaw%20Chandelier%20Tree/"/>
    <url>/2023/07/17/judge_girl/50105.%20Seesaw%20Chandelier%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：3.7/5</p><p>Second Try: 3/5 Used time 17:10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;construct.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node&#123;</span><br><span class="hljs-comment">//     int value;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br><span class="hljs-type">int</span>* arr;<br><span class="hljs-type">int</span> n;<br><br>Node *<span class="hljs-title function_">make_left</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    Node *head = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br><br>    Node *now = head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = r; i &gt;= l; i--)&#123;<br>        Node* temp = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        temp-&gt;value = arr[i];<br>        now-&gt;left = temp;<br>        now-&gt;right = <span class="hljs-literal">NULL</span>;<br>        now = now-&gt;left;<br>    &#125;<br>    now-&gt;left = <span class="hljs-literal">NULL</span>;<br>    now-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> head-&gt;left;<br>&#125;<br><br>Node *<span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(r - l &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> make_left(l, r);<br><br>    <span class="hljs-type">uint64_t</span> l_bucket = <span class="hljs-number">0</span>, r_bucket = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint64_t</span> l_weight = <span class="hljs-number">0</span>, r_weight = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">uint64_t</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++)&#123;<br>        r_bucket += arr[i];<br>        r_weight += (p++) * arr[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++)&#123;<br>        <span class="hljs-keyword">if</span>(l_weight &gt; r_weight) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l_weight == r_weight)&#123;<br>            Node* torque = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>            torque-&gt;value = arr[i];<br>            torque-&gt;left = dfs(l, i - <span class="hljs-number">1</span>);<br>            torque-&gt;right = dfs(i + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-keyword">return</span> torque;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            l_bucket += (<span class="hljs-type">uint64_t</span>)arr[i], r_bucket -= (<span class="hljs-type">uint64_t</span>)arr[i];<br>            l_weight += l_bucket, r_weight -= r_bucket;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> make_left(l, r);<br>&#125;<br><br>Node *<span class="hljs-title function_">ConstructTree</span><span class="hljs-params">(<span class="hljs-type">int</span> T[], <span class="hljs-type">int</span> N)</span>&#123;<br>    arr = T;<br>    n = N;<br>    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50108. Sequence to Binary Tree</title>
    <link href="/2023/07/17/judge_girl/50108.%20Sequence%20to%20Binary%20Tree/"/>
    <url>/2023/07/17/judge_girl/50108.%20Sequence%20to%20Binary%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 3/5 Used Time: 17:55</p><p>有點小複雜，注意<code>cmp</code>不要直return大於的結果，1, 0,-1都要討論。</p><p>Second Try: 3/5 Used Time: 13:54</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;construct.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct node&#123;</span><br><span class="hljs-comment">//     int value;</span><br><span class="hljs-comment">//     struct node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br><span class="hljs-type">int</span> b[<span class="hljs-number">16384</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span>*)b) - (*(<span class="hljs-type">int</span>*)a);<br>&#125;<br><br>Node* <span class="hljs-title function_">ConstructTree</span><span class="hljs-params">(<span class="hljs-type">int</span> s[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span>(n &lt; MAXLENGTH)&#123;<br>        Node* head = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        head-&gt;left = <span class="hljs-literal">NULL</span>, head-&gt;right = <span class="hljs-literal">NULL</span>;<br>        Node* p = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            Node* cur = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>            cur-&gt;value = s[i];<br>            p-&gt;left = cur;<br>            p-&gt;right = <span class="hljs-literal">NULL</span>;<br>            p = cur;<br>        &#125;<br>        p-&gt;left = <span class="hljs-literal">NULL</span>, p-&gt;right = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> head-&gt;left;<br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>(b, s, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>    qsort(b, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br><br>    <span class="hljs-type">int</span> root_val = b[MAXLENGTH - <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-keyword">for</span>(idx = <span class="hljs-number">0</span>; idx &lt; n; idx++)&#123;<br>        <span class="hljs-keyword">if</span>(s[idx] == root_val) <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    Node* root = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    root-&gt;value = root_val;<br>    root-&gt;left = ConstructTree(s, idx);<br>    root-&gt;right = ConstructTree(s + idx + <span class="hljs-number">1</span>, n - idx - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50097. Conveyor Belt</title>
    <link href="/2023/07/17/judge_girl/50097.%20Conveyor%20Belt/"/>
    <url>/2023/07/17/judge_girl/50097.%20Conveyor%20Belt/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;transmission.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 1048576</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> temp = arr[l];<br>        arr[l] = arr[r];<br>        arr[r] = temp;<br>        l++, r--;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">left_shift</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> arr[], <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> n)</span>&#123;<br>    s %= n;<br>    reverse(arr, <span class="hljs-number">0</span>, s - <span class="hljs-number">1</span>);<br>    reverse(arr, s, n - <span class="hljs-number">1</span>);<br>    reverse(arr, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">bit_shift</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> arr[], <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> mask = (((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-number">1</span> &lt;&lt; t) - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> carry = (arr[<span class="hljs-number">0</span>] &gt;&gt; (<span class="hljs-number">64</span> - t)) &amp; mask;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> t_carry = (arr[i] &gt;&gt; (<span class="hljs-number">64</span> - t)) &amp; mask;<br>        arr[i] = (arr[i] &lt;&lt; t) | (carry);<br>        carry = t_carry;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">transmission</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> belt[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> t)</span>&#123;<br>    left_shift(belt, t / <span class="hljs-number">64</span>, n);<br>    bit_shift(belt, t % <span class="hljs-number">64</span>, n);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50110. Tree Operations</title>
    <link href="/2023/07/17/judge_girl/50110.%20Tree%20Operations/"/>
    <url>/2023/07/17/judge_girl/50110.%20Tree%20Operations/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>記得看清楚題目。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;operations.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node&#123;</span><br><span class="hljs-comment">//     int n;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br>Node *<span class="hljs-title function_">FlipTree</span><span class="hljs-params">(Node *root)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    Node* new_root = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    new_root-&gt;n = root-&gt;n;<br>    new_root-&gt;left = FlipTree(root-&gt;right);<br>    new_root-&gt;right = FlipTree(root-&gt;left);<br>    <span class="hljs-keyword">return</span> new_root;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">isIdentical</span><span class="hljs-params">(Node *root1, Node *root2)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root1 == <span class="hljs-literal">NULL</span> &amp;&amp; root2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root1 == <span class="hljs-literal">NULL</span> || root2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (root1-&gt;n == root2-&gt;n) &amp;&amp; isIdentical(root1-&gt;left, root2-&gt;left)<br>        &amp;&amp; isIdentical(root1-&gt;right, root2-&gt;right);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(Node *root, <span class="hljs-type">int</span> d)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>        sum += d;<br>        num++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(root-&gt;left) dfs(root-&gt;left, d + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(root-&gt;right) dfs(root-&gt;right, d + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">depthAvg</span><span class="hljs-params">(Node *root)</span>&#123;<br>    sum = <span class="hljs-number">0</span>;<br>    num = <span class="hljs-number">0</span>;<br>    dfs(root, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d/%d\n&quot;</span>, sum, num);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50106. Construct a Binary Search Tree</title>
    <link href="/2023/07/17/judge_girl/50106.%20Construct%20a%20Binary%20Search%20Tree/"/>
    <url>/2023/07/17/judge_girl/50106.%20Construct%20a%20Binary%20Search%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;construct.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node&#123;</span><br><span class="hljs-comment">//     char name[16];</span><br><span class="hljs-comment">//     int height;</span><br><span class="hljs-comment">//     int weight;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br>Node* <span class="hljs-title function_">insert</span><span class="hljs-params">(Node* root, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> h, <span class="hljs-type">int</span> w)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        Node* now = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        <span class="hljs-built_in">strcpy</span>(now-&gt;name, name);<br>        now-&gt;height = h;<br>        now-&gt;weight = w;<br>        now-&gt;left = <span class="hljs-literal">NULL</span>;<br>        now-&gt;right = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> now;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HEIGHT</span><br>            <span class="hljs-keyword">if</span>(h &lt; root-&gt;height) root-&gt;left = insert(root-&gt;left, name, h, w);<br>            <span class="hljs-keyword">else</span> root-&gt;right = insert(root-&gt;right, name, h, w);<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WEIGHT</span><br>            <span class="hljs-keyword">if</span>(w &lt; root-&gt;weight) root-&gt;left = insert(root-&gt;left, name, h, w);<br>            <span class="hljs-keyword">else</span> root-&gt;right = insert(root-&gt;right, name, h, w);<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br>Node *<span class="hljs-title function_">ConstructBSTree</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">char</span> name[][<span class="hljs-number">16</span>], <span class="hljs-type">int</span> height[], <span class="hljs-type">int</span> weight[])</span>&#123;<br>    Node* root = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>        root = insert(root, name[i], height[i], weight[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>bst</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50107. Height and Weight</title>
    <link href="/2023/07/17/judge_girl/50107.%20Height%20and%20Weight/"/>
    <url>/2023/07/17/judge_girl/50107.%20Height%20and%20Weight/</url>
    
    <content type="html"><![CDATA[<p>難度：2.8/5</p><p>記得存long long跟cmp回傳比較結果而不是相減。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> n[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> h;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> w;<br>&#125; student;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* s_a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* s_b)</span>&#123;<br>    student* a = (student*)s_a;<br>    student* b = (student*)s_b;<br>    <span class="hljs-keyword">if</span>(a-&gt;w * b-&gt;h * b-&gt;h != b-&gt;w * a-&gt;h * a-&gt;h)&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;w * b-&gt;h * b-&gt;h &gt; b-&gt;w * a-&gt;h * a-&gt;h;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a-&gt;w != b-&gt;w)&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;w &gt; b-&gt;w;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a-&gt;h != b-&gt;h)&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;h &gt; b-&gt;h;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(a-&gt;n, b-&gt;n);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> n;<br>student arr[<span class="hljs-number">100005</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %lld %lld&quot;</span>, arr[i].n, &amp;arr[i].h, &amp;arr[i].w);<br>    &#125;<br>    qsort(arr, n, <span class="hljs-keyword">sizeof</span>(student), cmp);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %lld %lld\n&quot;</span>, arr[i].n, arr[i].h, arr[i].w);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50109. H-index</title>
    <link href="/2023/07/17/judge_girl/50109.%20H-index/"/>
    <url>/2023/07/17/judge_girl/50109.%20H-index/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>如果沒有hint的話應該有4。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> n;<br>&#125; scholar;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br><span class="hljs-type">int</span> rtv = <span class="hljs-built_in">strcmp</span>(((scholar*)a)-&gt;name, ((scholar*)b)-&gt;name);<br><span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> rtv;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(((scholar*)a)-&gt;n &gt; ((scholar*)b)-&gt;n) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(((scholar*)a)-&gt;n == ((scholar*)b)-&gt;n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>scholar arr[<span class="hljs-number">20000</span>];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_index</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++)&#123;<br>p++;<br><span class="hljs-keyword">if</span>(arr[i].n &lt; p)&#123;<br>p--;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, arr[l].name, p);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, arr[cnt].name, &amp;arr[cnt].n) != EOF) cnt++;<br><br>qsort(arr, cnt, <span class="hljs-keyword">sizeof</span>(scholar), cmp);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br><span class="hljs-type">int</span> last = i;<br><span class="hljs-keyword">while</span>(last &lt; cnt &amp;&amp; <span class="hljs-built_in">strcmp</span>(arr[i].name, arr[last].name) == <span class="hljs-number">0</span>) last++;<br>get_index(i, last - <span class="hljs-number">1</span>);<br>i = last - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50114. Simple Polygon</title>
    <link href="/2023/07/17/judge_girl/50114.%20Simple%20Polygon/"/>
    <url>/2023/07/17/judge_girl/50114.%20Simple%20Polygon/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;pt;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    pt a, b, c, d;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d %d %d&quot;</span>, &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;c.x, &amp;c.y, &amp;d.x, &amp;d.y);<br><br>    <span class="hljs-type">int</span> area = <span class="hljs-number">0</span>;<br>    area += (b.x - a.x) * (b.y - a.y);<br>    area += (c.x - a.x) * (d.y - b.y);<br>    area += (c.x - d.x) * (c.y - d.y);<br><br>    <span class="hljs-type">int</span> per = <span class="hljs-number">0</span>;<br>    per += <span class="hljs-number">2</span> * (c.x - a.x + c.y - a.y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, per, area);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50111. Hamiltonian Cycle</title>
    <link href="/2023/07/17/judge_girl/50111.%20Hamiltonian%20Cycle/"/>
    <url>/2023/07/17/judge_girl/50111.%20Hamiltonian%20Cycle/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>意外寫起來很順手（？）記得排列的時候要順便把有沒有存在路徑先找出來<code>g[i][last] == 0</code>剪掉。</p><p>Second Try: 3/5 Used Time 7:31</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, e;<br><span class="hljs-type">char</span> g[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> vis[], <span class="hljs-type">int</span> now_cnt)</span>&#123;<br><span class="hljs-keyword">if</span>(now_cnt == n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, arr[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> last = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(now_cnt != <span class="hljs-number">0</span>) last = arr[now_cnt - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-keyword">if</span>(last != <span class="hljs-number">-1</span> &amp;&amp; (vis[i] == <span class="hljs-number">1</span> || g[i][last] == <span class="hljs-number">0</span>)) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(now_cnt == n - <span class="hljs-number">1</span> &amp;&amp; g[i][arr[<span class="hljs-number">0</span>]] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>arr[now_cnt] = i, vis[i] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> rtv = dfs(arr, vis, now_cnt + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>arr[now_cnt] = <span class="hljs-number">-1</span>, vis[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;e);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e; i++)&#123;<br><span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>g[a][b] = <span class="hljs-number">1</span>;<br>g[b][a] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> rtv = dfs(arr, vis, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO SOLUTION\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50112. Apartments and Friends</title>
    <link href="/2023/07/17/judge_girl/50112.%20Apartments%20and%20Friends/"/>
    <url>/2023/07/17/judge_girl/50112.%20Apartments%20and%20Friends/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>Second Try: 3/5 Used Time: 9:45</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> abs(x) ((x)&lt;(0)?(-(x)):(x))</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> friends[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span> f_cnt[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> min_dis = INT_MAX;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> idx[], <span class="hljs-type">int</span> now_cnt, <span class="hljs-type">int</span> now_dis)</span>&#123;<br><span class="hljs-keyword">if</span>(now_dis &gt; min_dis) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span>(now_cnt == n) min_dis = min(min_dis, now_dis);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-keyword">if</span>(idx[i] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br><br>idx[i] = now_cnt;<br><span class="hljs-type">int</span> add_dis = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; f_cnt[i]; j++)&#123;<br><span class="hljs-keyword">if</span>(idx[friends[i][j]] != <span class="hljs-number">-1</span>) add_dis += now_cnt - idx[friends[i][j]];<br>&#125;<br>dfs(idx, now_cnt + <span class="hljs-number">1</span>, now_dis + add_dis);<br>idx[i] = <span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br><span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>friends[a][f_cnt[a]++] = b;<br>friends[b][f_cnt[b]++] = a;<br>&#125;<br><br><span class="hljs-type">int</span> idx[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) idx[i] = <span class="hljs-number">-1</span>;<br>dfs(idx, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_dis);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50113. Ternary Search Tree</title>
    <link href="/2023/07/17/judge_girl/50113.%20Ternary%20Search%20Tree/"/>
    <url>/2023/07/17/judge_girl/50113.%20Ternary%20Search%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><p>沒想到如果root-&gt;val是<spanclass="math inline">\((-1,l)\)</span>然後要插入的<spanclass="math inline">\(v &gt; l\)</span>時，要把root-&gt;改成<spanclass="math inline">\((l, n)\)</span>。</p><p>Second Try: 2/5 Used Time 13:20</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;construct.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 32768</span><br><br><span class="hljs-comment">// typedef struct node&#123;</span><br><span class="hljs-comment">//     int small, large;</span><br><span class="hljs-comment">//     struct node *left, *mid, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br>Node* <span class="hljs-title function_">new_node</span><span class="hljs-params">()</span>&#123;<br>    Node* r = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    r-&gt;small = <span class="hljs-number">-1</span>, r-&gt;large = <span class="hljs-number">-1</span>;<br>    r-&gt;left = <span class="hljs-literal">NULL</span>, r-&gt;mid = <span class="hljs-literal">NULL</span>, r-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br>Node* <span class="hljs-title function_">insert</span><span class="hljs-params">(Node* root, <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        Node* cur = new_node();<br>        cur-&gt;large = val;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(root-&gt;small == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(val &lt; root-&gt;large) root-&gt;small = val;<br>            <span class="hljs-keyword">else</span>&#123;<br>                root-&gt;small = root-&gt;large;<br>                root-&gt;large = val;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(val &lt; root-&gt;small) root-&gt;left = insert(root-&gt;left, val);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val &gt; root-&gt;large) root-&gt;right = insert(root-&gt;right, val);<br>            <span class="hljs-keyword">else</span> root-&gt;mid = insert(root-&gt;mid, val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br>Node* <span class="hljs-title function_">ConstructTree</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    Node* root = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        root = insert(root, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>bst</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50118. Connect Integers</title>
    <link href="/2023/07/17/judge_girl/50118.%20Connect%20Integers/"/>
    <url>/2023/07/17/judge_girl/50118.%20Connect%20Integers/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_msd</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> msd = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        msd = n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> msd;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_lsd</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> n % <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_len</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        cnt++;<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> last_tail = get_lsd(n);<br>    <span class="hljs-type">int</span> now_len = get_len(n);<br>    <span class="hljs-type">int</span> max_len = now_len;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(last_tail == get_msd(n))&#123;<br>            now_len += get_len(n);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            now_len = get_len(n);<br>        &#125;<br>        max_len = max(max_len, now_len);<br>        last_tail = get_lsd(n);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_len);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50119. Paper, Scissors, Stone</title>
    <link href="/2023/07/17/judge_girl/50119.%20Paper,%20Scissors,%20Stone/"/>
    <url>/2023/07/17/judge_girl/50119.%20Paper,%20Scissors,%20Stone/</url>
    
    <content type="html"><![CDATA[<p>難度：2.3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> x, a, b, c;<br><span class="hljs-type">int</span> y, d, e, f;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">step</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a * x + b) % c;<br>&#125;<br><br><span class="hljs-comment">// p = 0</span><br><span class="hljs-comment">// s = 1</span><br><span class="hljs-comment">// r = 2</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_win</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    x %= <span class="hljs-number">3</span>, y %= <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(x == y) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>((x == <span class="hljs-number">2</span> &amp;&amp; y == <span class="hljs-number">1</span>) || (x == <span class="hljs-number">1</span> &amp;&amp; y == <span class="hljs-number">0</span>) || (x == <span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">2</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        cnt++;<br>        <span class="hljs-type">int</span> rtv = get_win(x, y);<br>        x = step(x, a, b, c);<br>        y = step(y, d, e, f);<br><br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-number">0</span>, cnt);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-number">1</span>, cnt);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;x, &amp;a, &amp;b, &amp;c);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;y, &amp;d, &amp;e, &amp;f);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        solve();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50116. Play with digits</title>
    <link href="/2023/07/17/judge_girl/50116.%20Play%20with%20digits/"/>
    <url>/2023/07/17/judge_girl/50116.%20Play%20with%20digits/</url>
    
    <content type="html"><![CDATA[<p>難度：1.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// static inline int abs(int n)&#123;</span><br><span class="hljs-comment">//     return (n &lt; 0) ? -n : n;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num_digits = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>, even = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt_zero = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> is_even = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        num_digits++;<br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) is_even = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> is_even = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) cnt_zero++;<br><br>        <span class="hljs-keyword">if</span>(flag) odd += n;<br>        <span class="hljs-keyword">else</span> even += n;<br>        flag = !flag;<br>    &#125;<br><br>    <span class="hljs-type">int</span> is_mul11 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(even - odd) % <span class="hljs-number">11</span> == <span class="hljs-number">0</span>) is_mul11 = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, num_digits);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, is_even);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt_zero);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, is_mul11);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50115. Depth of Water</title>
    <link href="/2023/07/17/judge_girl/50115.%20Depth%20of%20Water/"/>
    <url>/2023/07/17/judge_girl/50115.%20Depth%20of%20Water/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b, h, c, d;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;h, &amp;c, &amp;d);<br>    <span class="hljs-type">int</span> v = a * b * h;<br>    <span class="hljs-type">int</span> new_h = v / (a * b - c * d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, new_h);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50121. Push Stones</title>
    <link href="/2023/07/17/judge_girl/50121.%20Push%20Stones/"/>
    <url>/2023/07/17/judge_girl/50121.%20Push%20Stones/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5 Used Time: 25:57</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> x, y, e;<br><span class="hljs-type">int</span> o;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">//  4</span><br><span class="hljs-comment">// 3 1</span><br><span class="hljs-comment">//  2</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; n &amp;&amp; j &lt; m;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;e);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;o);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; o; i++)&#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        arr[a][b] = c;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_map</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> temp_info = arr[x][y];<br>    arr[x][y] = e;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], (j == m - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>    arr[x][y] = temp_info;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> op)</span>&#123;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">0</span>) print_map();<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> dl_x = dx[op], dl_y = dy[op];<br><br>        <span class="hljs-type">int</span> start_x = x, start_y = y;<br>        <span class="hljs-type">int</span> end_x = x + dl_x, end_y = y + dl_y;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(is_valid(end_x, end_y))&#123;<br>            <span class="hljs-keyword">if</span>(arr[end_x][end_y] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            sum += arr[end_x][end_y];<br>            end_x += dl_x, end_y += dl_y;<br>        &#125;<br>        <span class="hljs-keyword">if</span>((!is_valid(end_x, end_y)) || sum &gt; e) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-type">int</span> move_x = end_x, move_y = end_y;<br>        <span class="hljs-keyword">while</span>(!(move_x == start_x &amp;&amp; move_y == start_y))&#123;<br>            arr[move_x][move_y] = arr[move_x - dl_x][move_y - dl_y];<br>            move_x -= dl_x, move_y -= dl_y;<br>        &#125;<br>        arr[move_x][move_y] = <span class="hljs-number">0</span>;<br>        x += dl_x, y += dl_y;<br>        e -= sum;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op) != EOF)&#123;<br>        solve(op);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50117. Divide a number</title>
    <link href="/2023/07/17/judge_girl/50117.%20Divide%20a%20number/"/>
    <url>/2023/07/17/judge_girl/50117.%20Divide%20a%20number/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> q = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        n += (<span class="hljs-number">10</span> * q);<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span> &amp;&amp; n / k == <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n / k);<br>            flag = <span class="hljs-number">0</span>;<br>        &#125;<br>        q = n % k;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">01</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50123. Magic Square</title>
    <link href="/2023/07/17/judge_girl/50123.%20Magic%20Square/"/>
    <url>/2023/07/17/judge_girl/50123.%20Magic%20Square/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5 Used Time: 15:13</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n, k, x, y;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">next_x</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">next_y</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(s == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;k, &amp;x, &amp;y);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) x = next_y(x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) y = next_x(y);<br><br>    <span class="hljs-keyword">while</span>(cnt &lt;= n * n)&#123;<br>        <span class="hljs-keyword">if</span>(arr[next_x(x)][next_y(y)] != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">while</span>(arr[x][y] != <span class="hljs-number">0</span>)&#123;<br>                x = next_y(x);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            x = next_x(x), y = next_y(y);<br>        &#125;<br>        arr[x][y] = cnt;<br>        cnt++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50122. Knights&#39; Tour</title>
    <link href="/2023/07/17/judge_girl/50122.%20Knights&#39;%20Tour/"/>
    <url>/2023/07/17/judge_girl/50122.%20Knights&#39;%20Tour/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5 Used Time: 19:16</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> step;<br>    <span class="hljs-type">char</span> moving;<br>&#125;pt;<br> <br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> moving_cnt;<br>pt kt[<span class="hljs-number">10005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ans[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <br><span class="hljs-type">int</span> dx[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n &amp;&amp; ans[x][y] == <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;kt[i].x, &amp;kt[i].y);<br>        ans[kt[i].x][kt[i].y] = <span class="hljs-number">10000</span> * i;<br>        kt[i].step = <span class="hljs-number">0</span>;<br>        kt[i].moving = <span class="hljs-number">1</span>;<br>    &#125;<br>    moving_cnt = m;<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count_steps</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-type">int</span> a_x = x + dx[i], a_y = y + dy[i];<br>        <span class="hljs-keyword">if</span>(is_valid(a_x, a_y)) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">choose_step</span><span class="hljs-params">(pt* k)</span>&#123;<br>    <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_cnt = INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-type">int</span> mov_x = k-&gt;x + dx[i], mov_y = k-&gt;y + dy[i];<br>        <span class="hljs-keyword">if</span>(!is_valid(mov_x, mov_y)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> cnt = count_steps(mov_x, mov_y);<br>        <span class="hljs-keyword">if</span>(cnt &lt; min_cnt) min_idx = i, min_cnt = cnt;<br>    &#125;<br>    <span class="hljs-keyword">return</span> min_idx;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(moving_cnt &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123; pt* now_k = &amp;kt[i];<br>            <span class="hljs-keyword">if</span>(now_k-&gt;moving == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> step_idx = choose_step(now_k);<br>            <span class="hljs-keyword">if</span>(step_idx == <span class="hljs-number">-1</span>)&#123;<br>                now_k-&gt;moving = <span class="hljs-number">0</span>;<br>                moving_cnt--;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                now_k-&gt;x += dx[step_idx];<br>                now_k-&gt;y += dy[step_idx];<br>                now_k-&gt;step++;<br>                ans[now_k-&gt;x][now_k-&gt;y] = <span class="hljs-number">10000</span> * i + now_k-&gt;step;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    solve();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, ans[i][j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50124. Knights&#39; Tour with Functions</title>
    <link href="/2023/07/17/judge_girl/50124.%20Knights&#39;%20Tour%20with%20Functions/"/>
    <url>/2023/07/17/judge_girl/50124.%20Knights&#39;%20Tour%20with%20Functions/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5 Used Time: 29:12</p><p>複雜細節多。</p><h2 id="main.c">main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nextMove.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;validMoveNum.h&quot;</span></span><br> <br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> k[<span class="hljs-number">10005</span>][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> step[<span class="hljs-number">10005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> moving_k;<br> <br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;k[i][<span class="hljs-number">0</span>], &amp;k[i][<span class="hljs-number">1</span>]);<br>        step[i] = <span class="hljs-number">0</span>;<br>        vis[k[i][<span class="hljs-number">0</span>]][k[i][<span class="hljs-number">1</span>]] = <span class="hljs-number">10000</span> * i;<br>    &#125;<br>    moving_k = m;<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(moving_k &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>            <span class="hljs-keyword">if</span>(step[i] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br> <br>            <span class="hljs-type">int</span> nxt_move = nextMove(k[i][<span class="hljs-number">0</span>], k[i][<span class="hljs-number">1</span>], n, vis);<br>            <span class="hljs-comment">// printf(&quot;idx %d, having nxt %d\n&quot;, i, nxt_move);</span><br>            <span class="hljs-keyword">if</span>(nxt_move == <span class="hljs-number">-1</span>)&#123;<br>                step[i] = <span class="hljs-number">-1</span>;<br>                moving_k--;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                step[i]++;<br>                k[i][<span class="hljs-number">0</span>] += dx[nxt_move];<br>                k[i][<span class="hljs-number">1</span>] += dy[nxt_move];<br>                vis[k[i][<span class="hljs-number">0</span>]][k[i][<span class="hljs-number">1</span>]] = <span class="hljs-number">10000</span> * i + step[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, vis[i][j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    solve();<br>    print();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="validmovenum.c">validMoveNum.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;validMoveNum.h&quot;</span></span><br> <br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> vis[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>])</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n &amp;&amp; vis[x][y] == <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">validMoveNum</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> vis[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>])</span>&#123;<br>    <span class="hljs-keyword">if</span>(!is_valid(r, c, n, vis)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br> <br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(is_valid(r + dx[i], c + dy[i], n, vis)) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nextmove.c">nextMove.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;validMoveNum.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nextMove.h&quot;</span></span><br> <br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> vis[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>])</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n &amp;&amp; vis[x][y] == <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">nextMove</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> vis[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>])</span>&#123;<br>    <span class="hljs-comment">// if(!is_valid(r, c, n, vis)) return -1;</span><br>    <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_p = <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-type">int</span> x = r + dx[i], y = c + dy[i];<br>        <span class="hljs-keyword">if</span>(!is_valid(x, y, n, vis)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> cnt = validMoveNum(x, y, n, vis);<br>        <span class="hljs-keyword">if</span>(cnt &lt; min_p) min_idx = i, min_p = cnt;<br>    &#125;<br>    <span class="hljs-keyword">return</span> min_idx;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50129. Loops</title>
    <link href="/2023/07/17/judge_girl/50129.%20Loops/"/>
    <url>/2023/07/17/judge_girl/50129.%20Loops/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;loops.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> vis[<span class="hljs-number">1000005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">next_idx</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> *b[], <span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-keyword">return</span> (b[idx] - a);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> max_num;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> min_num;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> len;<br><span class="hljs-type">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b[], <span class="hljs-type">int</span> idx)</span>&#123;<br>    max_num = INT_MIN, min_num = INT_MAX, len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!vis[idx])&#123;<br>        vis[idx] = <span class="hljs-number">1</span>;<br>        max_num = max(max_num, a[idx]);<br>        min_num = min(min_num, a[idx]);<br>        len++;<br>        idx = next_idx(a, b, idx);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loops</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b[], <span class="hljs-type">int</span> ans[<span class="hljs-number">4</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) vis[i] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> min_len = INT_MAX;<br>    <span class="hljs-type">int</span> min_el = INT_MAX;<br>    <span class="hljs-type">int</span> max_len = INT_MIN;<br>    <span class="hljs-type">int</span> max_el = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-keyword">continue</span>;<br>        traverse(a, b, i);<br><br>        <span class="hljs-keyword">if</span>(len &lt; min_len)&#123;<br>            min_el = min_num;<br>            min_len = len;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == min_len)&#123;<br>            min_el = min(min_el, min_num);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(len &gt; max_len)&#123;<br>            max_el = max_num;<br>            max_len = len;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == max_len)&#123;<br>            max_el = max(max_el, max_num);<br>        &#125;<br>    &#125;<br>    ans[<span class="hljs-number">0</span>] = max_len;<br>    ans[<span class="hljs-number">1</span>] = min_len;<br>    ans[<span class="hljs-number">2</span>] = max_el;<br>    ans[<span class="hljs-number">3</span>] = min_el;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50126. Line Up Numbers</title>
    <link href="/2023/07/17/judge_girl/50126.%20Line%20Up%20Numbers/"/>
    <url>/2023/07/17/judge_girl/50126.%20Line%20Up%20Numbers/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> B[], <span class="hljs-type">int</span>* a[], <span class="hljs-type">int</span>* b[])</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size_a = <span class="hljs-number">0</span>, size_b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[size_a] != <span class="hljs-literal">NULL</span>) size_a++;<br>    <span class="hljs-keyword">while</span>(b[size_b] != <span class="hljs-literal">NULL</span>) size_b++;<br>    size_a++, size_b++;<br><br>    <span class="hljs-type">int</span>** ptr;<br>    <span class="hljs-keyword">if</span>(A[<span class="hljs-number">0</span>] &lt; B[<span class="hljs-number">0</span>])&#123;<br>        ptr = &amp;(a[<span class="hljs-number">0</span>]);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ptr = &amp;(b[<span class="hljs-number">0</span>]);<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(i &lt; size_a &amp;&amp; j &lt; size_b)&#123;<br>        <span class="hljs-keyword">if</span>(A[i] &lt; B[j])&#123;<br>            *ptr = &amp;(A[i]);<br>            ptr = &amp;a[i];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            *ptr = &amp;(B[j]);<br>            ptr = &amp;b[j];<br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt; size_a)&#123;<br>        *ptr = &amp;(A[i]);<br>        ptr = &amp;a[i];<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j &lt; size_b)&#123;<br>        *ptr = &amp;(B[j]);<br>        ptr = &amp;b[j];<br>        j++;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50130. Bank Accounts</title>
    <link href="/2023/07/17/judge_girl/50130.%20Bank%20Accounts/"/>
    <url>/2023/07/17/judge_girl/50130.%20Bank%20Accounts/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>細節多。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">int</span> bal;<br>&#125; helper;<br><br><span class="hljs-type">int</span> n;<br>helper arr[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">char</span> *p, <span class="hljs-type">int</span> s_len, <span class="hljs-type">int</span> p_len)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= (s_len - p_len); i++)&#123;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; p_len; j++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i + j] != p[j])&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">idty_op</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(cmd);<br>    <span class="hljs-keyword">if</span>(is_str(cmd, <span class="hljs-string">&quot;earns&quot;</span>, n, <span class="hljs-number">5</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(is_str(cmd, <span class="hljs-string">&quot;spends&quot;</span>, n, <span class="hljs-number">6</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(is_str(cmd, <span class="hljs-string">&quot;gives&quot;</span>, n, <span class="hljs-number">5</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(is_str(cmd, <span class="hljs-string">&quot;becomes&quot;</span>, n, <span class="hljs-number">7</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_idx</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(s, arr[i].name) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">earns</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = find_idx(name);<br>    <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    arr[rtv].bal += num;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">spends</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = find_idx(name);<br>    <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(arr[rtv].bal &lt; num) <span class="hljs-keyword">return</span>;<br>    arr[rtv].bal -= num;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">gives</span><span class="hljs-params">(<span class="hljs-type">char</span>* name1, <span class="hljs-type">char</span>* name2, <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> rtv1 = find_idx(name1);<br>    <span class="hljs-type">int</span> rtv2 = find_idx(name2);<br>    <span class="hljs-keyword">if</span>(rtv1 == <span class="hljs-number">-1</span> || rtv2 == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(arr[rtv1].bal &lt; num) <span class="hljs-keyword">return</span>;<br>    arr[rtv1].bal -= num;<br>    arr[rtv2].bal += num;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">becomes</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = find_idx(name);<br>    <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    arr[rtv].bal = num;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, arr[i].name, &amp;arr[i].bal);<br>    &#125;<br><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>], cmd[<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, name, cmd) != EOF)&#123;<br>        <span class="hljs-type">int</span> rtv = idty_op(cmd);<br>        <span class="hljs-comment">// printf(&quot;rtv = %d\n&quot;, rtv);</span><br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>)&#123;<br>            fgets(buffer, <span class="hljs-number">1024</span>, <span class="hljs-built_in">stdin</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>            earns(name, num);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>            spends(name, num);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">char</span> name2[<span class="hljs-number">32</span>]; <span class="hljs-type">int</span> num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, name2, &amp;num);<br>            gives(name, name2, num);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">int</span> num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>            becomes(name, num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, arr[i].name, arr[i].bal);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50128. Split a List</title>
    <link href="/2023/07/17/judge_girl/50128.%20Split%20a%20List/"/>
    <url>/2023/07/17/judge_girl/50128.%20Split%20a%20List/</url>
    
    <content type="html"><![CDATA[<p>難度：2.7/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;split.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_len</span><span class="hljs-params">(<span class="hljs-type">int</span> *a[])</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(*a != <span class="hljs-literal">NULL</span>) cnt++, a++;<br>    <span class="hljs-keyword">return</span> cnt + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> *a[], <span class="hljs-type">int</span> *head[], <span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-type">int</span> n = get_len(a);<br><br>    <span class="hljs-type">int</span> now_ptrs[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) now_ptrs[i] = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> now_num = A[i];<br>        <span class="hljs-type">int</span> r = now_num % k;<br>        <span class="hljs-keyword">if</span>(now_ptrs[r] == <span class="hljs-number">-1</span>)&#123;<br>            head[r] = &amp;A[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            a[now_ptrs[r]] = &amp;A[i];<br>        &#125;<br>        a[i] = <span class="hljs-literal">NULL</span>;<br>        now_ptrs[r] = i;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50127. Connect the Numbers</title>
    <link href="/2023/07/17/judge_girl/50127.%20Connect%20the%20Numbers/"/>
    <url>/2023/07/17/judge_girl/50127.%20Connect%20the%20Numbers/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;constructPointerArray.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> num;<br>&#125; helper;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    helper* ha = (helper*)a;<br>    helper* hb = (helper*)b;<br>    <span class="hljs-keyword">return</span> (ha-&gt;num) - (hb-&gt;num);<br>&#125;<br><br>helper arr[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">constructPointerArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> a[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>], <span class="hljs-type">const</span> <span class="hljs-type">int</span> *b[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            arr[i * n + j].x = i;<br>            arr[i * n + j].y = j;<br>            arr[i * n + j].num = a[i][j];<br>        &#125;<br>    &#125;<br>    qsort(arr, n * n, <span class="hljs-keyword">sizeof</span>(helper), cmp);<br><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n - <span class="hljs-number">1</span>; i++)&#123;<br>        b[arr[i].x][arr[i].y] = &amp;(a[arr[i + <span class="hljs-number">1</span>].x][arr[i + <span class="hljs-number">1</span>].y]);<br>    &#125;<br>    b[arr[n * n - <span class="hljs-number">1</span>].x][arr[n * n - <span class="hljs-number">1</span>].y] = &amp;(a[arr[<span class="hljs-number">0</span>].x][arr[<span class="hljs-number">0</span>].y]);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50131. Mark Syllables</title>
    <link href="/2023/07/17/judge_girl/50131.%20Mark%20Syllables/"/>
    <url>/2023/07/17/judge_girl/50131.%20Mark%20Syllables/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_vowel</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_v</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> start_a, <span class="hljs-type">int</span> end_a, <span class="hljs-type">int</span> start_b, <span class="hljs-type">int</span> end_b)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &gt;= start_a &amp;&amp; i &lt;= end_a) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &gt;= start_b &amp;&amp; i &lt;= end_b) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>((i &gt;= start_b &amp;&amp; i &lt;= end_b) || (i &gt;= start_a &amp;&amp; i &lt;= end_a)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-type">int</span> start_a, end_a, start_b, end_b ;<br><br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> start_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!is_vowel(s[i])) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(cnt == a)&#123;<br>            start_a = start_idx;<br>            end_a = i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt == b)&#123;<br>            start_b = start_idx;<br>            end_b = i;<br>        &#125;<br>        cnt++;<br>        start_idx = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    print_v(s, n, start_a, end_a, start_b, end_b);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">10005</span>]; <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d %d&quot;</span>, s, &amp;a, &amp;b) == <span class="hljs-number">3</span>)&#123;<br>        solve(s, a, b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50132. Only Consonants</title>
    <link href="/2023/07/17/judge_girl/50132.%20Only%20Consonants/"/>
    <url>/2023/07/17/judge_girl/50132.%20Only%20Consonants/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_vowel</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> last;<br>    <span class="hljs-keyword">while</span>((ch = getchar()) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(ch &gt; <span class="hljs-string">&#x27;z&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;a&#x27;</span> || is_vowel(ch)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;<br>            last = ch;<br>            flag = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(last &lt; ch) cnt++;<br>            last = ch;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50134. 64, 32, 16, and 8</title>
    <link href="/2023/07/17/judge_girl/50134.%2064,%2032,%2016,%20and%208/"/>
    <url>/2023/07/17/judge_girl/50134.%2064,%2032,%2016,%20and%208/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>開union必會遇到Little-Endian的問題！一開始享用union跟memcpy來處理，但遇到Endianess的問題所以卡了很久。警惕自己沒事不要亂開union，能用一般得處理方式最好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">pow_func</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> b, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">uint64_t</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(r--) ans *= b;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">solve_0</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> l;<br>    <span class="hljs-type">uint16_t</span> s;<br>    <span class="hljs-type">uint8_t</span> c1, c2;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %u %hu %c %c&quot;</span>, cmd, &amp;l, &amp;s, &amp;c1, &amp;c2) != EOF)&#123;<br>        <span class="hljs-type">uint64_t</span> ans = <span class="hljs-number">0</span>; <span class="hljs-type">int</span> ans_ptr = <span class="hljs-number">0</span>, c2_appeared = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(cmd[i] == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>                ans += pow_func(<span class="hljs-number">256</span>, ans_ptr) * (<span class="hljs-type">uint64_t</span>)l;<br>                ans_ptr += <span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd[i] == <span class="hljs-string">&#x27;S&#x27;</span>)&#123;<br>                ans += pow_func(<span class="hljs-number">256</span>, ans_ptr) * (<span class="hljs-type">uint64_t</span>)s;<br>                ans_ptr += <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c2_appeared == <span class="hljs-number">0</span>)&#123;<br>                ans += pow_func(<span class="hljs-number">256</span>, ans_ptr) * (<span class="hljs-type">uint64_t</span>)c2;<br>                ans_ptr += <span class="hljs-number">1</span>;<br>                c2_appeared = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ans += pow_func(<span class="hljs-number">256</span>, ans_ptr) * (<span class="hljs-type">uint64_t</span>)c1;<br>                ans_ptr += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve_1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">uint64_t</span> ans;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %llu&quot;</span>, cmd, &amp;ans) != EOF)&#123;<br>        <span class="hljs-type">uint32_t</span> l; <span class="hljs-type">uint16_t</span> s; <span class="hljs-type">uint8_t</span> c1, c2;<br>        <span class="hljs-type">int</span> c2_appeared = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(cmd[i] == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>                l = (<span class="hljs-type">uint32_t</span>)ans;<br>                ans &gt;&gt;= <span class="hljs-number">32</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd[i] == <span class="hljs-string">&#x27;S&#x27;</span>)&#123;<br>                s = (<span class="hljs-type">uint16_t</span>)ans;<br>                ans &gt;&gt;= <span class="hljs-number">16</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c2_appeared == <span class="hljs-number">0</span>)&#123;<br>                c2 = (<span class="hljs-type">uint16_t</span>)ans;<br>                ans &gt;&gt;= <span class="hljs-number">8</span>;<br>                c2_appeared = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                c1 = (<span class="hljs-type">uint16_t</span>)ans;<br>                ans &gt;&gt;= <span class="hljs-number">8</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u %hu %c%c\n&quot;</span>, l, s, c1, c2);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> task; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;task);<br>    <span class="hljs-keyword">if</span>(task == <span class="hljs-number">0</span>) solve_0();<br>    <span class="hljs-keyword">else</span> solve_1();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50135. String and Integer</title>
    <link href="/2023/07/17/judge_girl/50135.%20String%20and%20Integer/"/>
    <url>/2023/07/17/judge_girl/50135.%20String%20and%20Integer/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">pow_func</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> b, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">uint64_t</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(r--) ans *= b;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve_0</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint64_t</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> c;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;c) != EOF &amp;&amp; c != <span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>        ans = ans * (<span class="hljs-type">uint64_t</span>)<span class="hljs-number">256</span> + (<span class="hljs-type">uint64_t</span>)c;<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, ans);<br>            ans = <span class="hljs-number">0</span>;<br>            cnt = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(cnt != <span class="hljs-number">8</span>)&#123;<br>        ans *= (<span class="hljs-type">uint64_t</span>)<span class="hljs-number">256</span>;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve_1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">uint64_t</span> ans; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;ans);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">7</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-type">uint8_t</span> c = (<span class="hljs-type">uint8_t</span>)(ans &gt;&gt; (<span class="hljs-number">8</span> * j));<br>            <span class="hljs-keyword">if</span>(c != <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, c);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> task; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;task); getchar();<br>    <span class="hljs-keyword">if</span>(task == <span class="hljs-number">0</span>) solve_0();<br>    <span class="hljs-keyword">else</span> solve_1();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50133. Word Merge Sort</title>
    <link href="/2023/07/17/judge_girl/50133.%20Word%20Merge%20Sort/"/>
    <url>/2023/07/17/judge_girl/50133.%20Word%20Merge%20Sort/</url>
    
    <content type="html"><![CDATA[<p>難度：2.7/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-comment">//    v</span><br><span class="hljs-comment">// OOOOOOOOO</span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">char</span>* a, <span class="hljs-type">char</span>* b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*a != *b) <span class="hljs-keyword">return</span> (*a) - (*b);<br>    a++, b++;<br>    <span class="hljs-keyword">if</span>(*a != *b) <span class="hljs-keyword">return</span> (*a) - (*b);<br>    a++, b++;<br>    <span class="hljs-keyword">return</span> (*a) - (*b);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">char</span>* a, <span class="hljs-type">char</span>* b, <span class="hljs-type">char</span>* c)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a), m = <span class="hljs-built_in">strlen</span>(b);<br>    <span class="hljs-type">int</span> ptr_a = <span class="hljs-number">0</span>, ptr_b = <span class="hljs-number">0</span>, ptr_c = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-keyword">while</span>(ptr_a &lt; n &amp;&amp; ptr_b &lt; m)&#123;<br>        <span class="hljs-type">int</span> rtv = compare(a + ptr_a, b + ptr_b);<br>        <span class="hljs-keyword">if</span>(rtv &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">memcpy</span>(c + ptr_c, a + ptr_a, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">3</span>);<br>            ptr_a += <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">memcpy</span>(c + ptr_c, b + ptr_b, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">3</span>);<br>            ptr_b += <span class="hljs-number">3</span>;<br>        &#125;<br>        ptr_c += <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(ptr_a &lt; n)&#123;<br>        <span class="hljs-built_in">memcpy</span>(c + ptr_c, a + ptr_a, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">3</span>);<br>        ptr_a += <span class="hljs-number">3</span>, ptr_c += <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(ptr_b &lt; m)&#123;<br>        <span class="hljs-built_in">memcpy</span>(c + ptr_c, b + ptr_b, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">3</span>);<br>        ptr_b += <span class="hljs-number">3</span>, ptr_c += <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">100005</span>], b[<span class="hljs-number">100005</span>], c[<span class="hljs-number">100005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a);<br> <br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, b) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;<br>            merge(a, b, c);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, c);<br>            flag = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            merge(c, b, a);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, a);<br>            flag = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50136. Build Strings</title>
    <link href="/2023/07/17/judge_girl/50136.%20Build%20Strings/"/>
    <url>/2023/07/17/judge_girl/50136.%20Build%20Strings/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5</p><p>卡了70分鐘才想出來... 用global記次。</p><p>Second Try: 4.5/5 Used Time: 19:20 Remember to initialize allelements of string to '\0'。 Used Time: 10:34</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">char</span> c;<br><span class="hljs-type">int</span> k, l, n;<br><span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gen_string</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">int</span> now_len)</span>&#123;<br>    <span class="hljs-keyword">if</span>(counter &gt;= n) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_len == l)&#123;<br>        <span class="hljs-keyword">if</span>(counter &lt; n)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>            counter++;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">char</span> prev = s[now_len - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(prev + k &gt;= <span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> now = <span class="hljs-string">&#x27;a&#x27;</span>; now &lt;= prev + k - <span class="hljs-number">26</span>; now++)&#123;<br>                s[now_len] = now;<br>                gen_string(s, now_len + <span class="hljs-number">1</span>); <span class="hljs-keyword">if</span>(counter &gt;= n) <span class="hljs-keyword">return</span>;<br>                s[now_len] = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> now = prev + <span class="hljs-number">1</span>; now &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; now++)&#123;<br>                s[now_len] = now;<br>                gen_string(s, now_len + <span class="hljs-number">1</span>); <span class="hljs-keyword">if</span>(counter &gt;= n) <span class="hljs-keyword">return</span>;<br>                s[now_len] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> now = prev + <span class="hljs-number">1</span>; now &lt;= prev + k; now++)&#123;<br>                s[now_len] = now;<br>                gen_string(s, now_len + <span class="hljs-number">1</span>); <span class="hljs-keyword">if</span>(counter &gt;= n) <span class="hljs-keyword">return</span>;<br>                s[now_len] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c %d %d %d&quot;</span>, &amp;c, &amp;k, &amp;l, &amp;n);<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1050</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    s[<span class="hljs-number">0</span>] = c, s[l] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    gen_string(s, <span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50137. Stack Rectangles</title>
    <link href="/2023/07/17/judge_girl/50137.%20Stack%20Rectangles/"/>
    <url>/2023/07/17/judge_girl/50137.%20Stack%20Rectangles/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 4/5 Used Time: 20:42</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-type">int</span> l;<br>&#125; s_box;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">arr_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> lst[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) s += lst[i];<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-type">int</span> n;<br>s_box box[<span class="hljs-number">256</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">can_stack</span><span class="hljs-params">(s_box* a, s_box* b)</span>&#123; <span class="hljs-comment">// a &lt; b</span><br>    <span class="hljs-keyword">if</span>(a-&gt;w &lt;= b-&gt;w &amp;&amp; a-&gt;l &lt;= b-&gt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a-&gt;w &lt;= b-&gt;l &amp;&amp; a-&gt;l &lt;= b-&gt;w) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> max_size = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> max_sum_idx = <span class="hljs-number">-1</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size, <span class="hljs-type">int</span> now_idx)</span>&#123;<br>    <span class="hljs-comment">// (n - now_idx): from now on all choose</span><br>    <span class="hljs-keyword">if</span>(arr_size + (n - now_idx) &lt; max_size) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        <span class="hljs-keyword">if</span>(arr_size &lt; max_size) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> sum_idx = arr_sum(arr, arr_size);<br>        <span class="hljs-keyword">if</span>(arr_size &gt; max_size)&#123;<br>            max_size = arr_size;<br>            max_sum_idx = sum_idx;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr_size == max_size)&#123;<br>            max_sum_idx = max(max_sum_idx, sum_idx);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// choose (is possible)</span><br>        <span class="hljs-keyword">if</span>(arr_size == <span class="hljs-number">0</span> || can_stack(&amp;box[now_idx], &amp;box[arr[arr_size - <span class="hljs-number">1</span>]]))&#123;<br>            arr[arr_size] = now_idx;<br>            dfs(arr, arr_size + <span class="hljs-number">1</span>, now_idx + <span class="hljs-number">1</span>);<br>            arr[arr_size] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// no choose</span><br>        dfs(arr, arr_size, now_idx + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>        box[i].w = a, box[i].l = b;<br>    &#125;<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(arr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_size, max_sum_idx);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50138. Compute Grade</title>
    <link href="/2023/07/17/judge_girl/50138.%20Compute%20Grade/"/>
    <url>/2023/07/17/judge_girl/50138.%20Compute%20Grade/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;computeGrade.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><br><span class="hljs-comment">// typedef struct&#123;</span><br><span class="hljs-comment">//     int rawScore;</span><br><span class="hljs-comment">//     double scaledScore;</span><br><span class="hljs-comment">// &#125;Score;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct&#123;</span><br><span class="hljs-comment">//     char id[10];</span><br><span class="hljs-comment">//     Score score[18];</span><br><span class="hljs-comment">//     double finalScore;</span><br><span class="hljs-comment">// &#125;Student;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct&#123;</span><br><span class="hljs-comment">//     int numStudent;</span><br><span class="hljs-comment">//     Student student[1000];</span><br><span class="hljs-comment">// &#125;Classes;</span><br><br><br><span class="hljs-type">double</span> <span class="hljs-title function_">get_avg</span><span class="hljs-params">(Classes* c, <span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c-&gt;numStudent; i++)&#123;<br>        Student* s = &amp;c-&gt;student[i];<br>        sum += s-&gt;score[idx].rawScore;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)sum / (<span class="hljs-type">double</span>)c-&gt;numStudent;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">original_score</span><span class="hljs-params">(Classes* c, <span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c-&gt;numStudent; i++)&#123;<br>        Student* s = &amp;c-&gt;student[i];<br>        s-&gt;score[idx].scaledScore = (<span class="hljs-type">double</span>)s-&gt;score[idx].rawScore;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">scale_score</span><span class="hljs-params">(Classes* c, <span class="hljs-type">int</span> idx, <span class="hljs-type">double</span> r)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c-&gt;numStudent; i++)&#123;<br>        Student* s = &amp;c-&gt;student[i];<br>        s-&gt;score[idx].scaledScore = (<span class="hljs-type">double</span>)s-&gt;score[idx].rawScore * (<span class="hljs-type">double</span>)r;<br>        <span class="hljs-keyword">if</span>(s-&gt;score[idx].scaledScore &gt; (<span class="hljs-type">double</span>)<span class="hljs-number">100</span>) s-&gt;score[idx].scaledScore = (<span class="hljs-type">double</span>)<span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_student_final</span><span class="hljs-params">(Student* s)</span>&#123;<br>    <span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        sum += s-&gt;score[i].scaledScore;<br>    &#125;<br>    s-&gt;finalScore = (<span class="hljs-type">double</span>)<span class="hljs-number">0.06</span> * sum;<br>    <span class="hljs-keyword">if</span>(s-&gt;finalScore &gt; (<span class="hljs-type">double</span>)<span class="hljs-number">100</span>) s-&gt;finalScore = (<span class="hljs-type">double</span>)<span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">get_class_final</span><span class="hljs-params">(Classes* c)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c-&gt;numStudent; i++)&#123;<br>        Student* s = &amp;c-&gt;student[i];<br>        get_student_final(s);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_student_final</span><span class="hljs-params">(Student* s)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %f\n&quot;</span>, s-&gt;id, s-&gt;finalScore);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_class_final</span><span class="hljs-params">(Classes* c)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c-&gt;numStudent; i++)&#123;<br>        Student* s = &amp;c-&gt;student[i];<br>        print_student_final(s);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">computeGrade</span><span class="hljs-params">(Classes classes[<span class="hljs-number">2</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        <span class="hljs-type">double</span> avg0 = get_avg(&amp;classes[<span class="hljs-number">0</span>], i);<br>        <span class="hljs-type">double</span> avg1 = get_avg(&amp;classes[<span class="hljs-number">1</span>], i);<br>        <span class="hljs-type">double</span> r = max(avg0, avg1) / min(avg0, avg1);<br>        <span class="hljs-keyword">if</span>(avg0 &gt; avg1)&#123;<br>            original_score(&amp;classes[<span class="hljs-number">0</span>], i);<br>            scale_score(&amp;classes[<span class="hljs-number">1</span>], i, r);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            scale_score(&amp;classes[<span class="hljs-number">0</span>], i, r);<br>            original_score(&amp;classes[<span class="hljs-number">1</span>], i);<br>        &#125;<br>    &#125;<br>    get_class_final(&amp;classes[<span class="hljs-number">0</span>]);<br>    get_class_final(&amp;classes[<span class="hljs-number">1</span>]);<br><br>    print_class_final(&amp;classes[<span class="hljs-number">0</span>]);<br>    print_class_final(&amp;classes[<span class="hljs-number">1</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>struct</tag>
      
      <tag>float</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50139. GPA</title>
    <link href="/2023/07/17/judge_girl/50139.%20GPA/"/>
    <url>/2023/07/17/judge_girl/50139.%20GPA/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;GPA_calculation.h&quot;</span></span><br><br><span class="hljs-comment">// struct Class&#123;</span><br><span class="hljs-comment">//     int academic_credit;</span><br><span class="hljs-comment">//     char score[3];</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">// struct Student&#123;</span><br><span class="hljs-comment">//     char name[20];</span><br><span class="hljs-comment">//     int N_class; // total number of classes the student takes.</span><br><span class="hljs-comment">//     int N_credit; // total number of academic credits.</span><br><span class="hljs-comment">//     double GPA;</span><br><span class="hljs-comment">//     struct Class all_class[10];</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* sa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* sb)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>* <span class="hljs-title">a</span> =</span> (<span class="hljs-keyword">struct</span> Student*)sa;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>* <span class="hljs-title">b</span> =</span> (<span class="hljs-keyword">struct</span> Student*)sb;<br><br>    <span class="hljs-keyword">if</span>(b-&gt;GPA &gt; a-&gt;GPA) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b-&gt;GPA == a-&gt;GPA) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">double</span> mapping[<span class="hljs-number">10</span>] = &#123;(<span class="hljs-type">double</span>)<span class="hljs-number">4.3</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">4.0</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">3.7</span>,<br>                             (<span class="hljs-type">double</span>)<span class="hljs-number">3.3</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">3.0</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">2.7</span>,<br>                             (<span class="hljs-type">double</span>)<span class="hljs-number">2.3</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">2.0</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">1.7</span>, (<span class="hljs-type">double</span>)<span class="hljs-number">0.0</span>&#125;;<br><br><span class="hljs-type">double</span> <span class="hljs-title function_">get_gpa</span><span class="hljs-params">(<span class="hljs-type">char</span>* score)</span>&#123;<br>    <span class="hljs-type">int</span> p;<br>    <span class="hljs-keyword">if</span>(score[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>) p = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;B&#x27;</span>) p = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span>) p = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;F&#x27;</span>) p = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">if</span>(score[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;+&#x27;</span>) p--;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) p++;<br>    <span class="hljs-keyword">return</span> mapping[p];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_cred_gpa</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student* s)</span>&#123;<br>    s-&gt;N_credit = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> sum = (<span class="hljs-type">double</span>)<span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s-&gt;N_class; i++)&#123;<br>        s-&gt;N_credit += s-&gt;all_class[i].academic_credit;<br>        sum += get_gpa(s-&gt;all_class[i].score) * (<span class="hljs-type">double</span>)(s-&gt;all_class[i].academic_credit);<br>    &#125;<br>    s-&gt;GPA = (<span class="hljs-type">double</span>)sum / (<span class="hljs-type">double</span>)(s-&gt;N_credit);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">GPA_calculation</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student stnd[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> num_awards = ((n - <span class="hljs-number">1</span>) / <span class="hljs-number">20</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) get_cred_gpa(&amp;stnd[i]);<br>    qsort(stnd, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Student), cmp);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num_awards; i++)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>* <span class="hljs-title">s</span> =</span> &amp;stnd[i];<br>        <span class="hljs-keyword">if</span>(s-&gt;N_credit &lt; <span class="hljs-number">15</span> || s-&gt;GPA &lt; (<span class="hljs-type">double</span>)(<span class="hljs-number">3.38</span>)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %f\n&quot;</span>, i + <span class="hljs-number">1</span>, s-&gt;name, s-&gt;GPA);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50140. File Encoder and Decoder</title>
    <link href="/2023/07/17/judge_girl/50140.%20File%20Encoder%20and%20Decoder/"/>
    <url>/2023/07/17/judge_girl/50140.%20File%20Encoder%20and%20Decoder/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;conversion.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bin2ascii</span><span class="hljs-params">(<span class="hljs-type">char</span> input_file[<span class="hljs-number">32</span>], <span class="hljs-type">char</span> output_file[<span class="hljs-number">32</span>], <span class="hljs-type">char</span> dict[<span class="hljs-number">17</span>])</span>&#123;<br>    FILE* f_in = fopen(input_file, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* f_out = fopen(output_file, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-type">uint8_t</span> n;<br>    <span class="hljs-keyword">while</span>(fread(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">1</span>, f_in) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(f_out, <span class="hljs-string">&quot;%c%c&quot;</span>, dict[(<span class="hljs-type">uint8_t</span>) n &gt;&gt; <span class="hljs-number">4</span>], dict[n &amp; (<span class="hljs-type">uint8_t</span>)<span class="hljs-number">0xf</span>]);<br>    &#125;<br>    fclose(f_in);<br>    fclose(f_out);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ascii2bin</span><span class="hljs-params">(<span class="hljs-type">char</span> input_file[<span class="hljs-number">32</span>], <span class="hljs-type">char</span> output_file[<span class="hljs-number">32</span>], <span class="hljs-type">char</span> dict[<span class="hljs-number">17</span>])</span>&#123;<br>    FILE* f_in = fopen(input_file, <span class="hljs-string">&quot;r&quot;</span>);<br>    FILE* f_out = fopen(output_file, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-type">char</span> c1, c2;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(f_in, <span class="hljs-string">&quot;%c%c&quot;</span>, &amp;c1, &amp;c2) != EOF)&#123;<br>        <span class="hljs-type">uint8_t</span> i, j;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(dict[i] == c1) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(dict[j] == c2) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">uint8_t</span> n = i * <span class="hljs-number">16</span> + j;<br>        fwrite(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">1</span>, f_out);<br>    &#125;<br>    fclose(f_in);<br>    fclose(f_out);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50141. Merge Link Lists</title>
    <link href="/2023/07/17/judge_girl/50141.%20Merge%20Link%20Lists/"/>
    <url>/2023/07/17/judge_girl/50141.%20Merge%20Link%20Lists/</url>
    
    <content type="html"><![CDATA[<p>難度：4.4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;merge.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct node &#123;</span><br><span class="hljs-comment">//     int data;</span><br><span class="hljs-comment">//     struct node *next;</span><br><span class="hljs-comment">// &#125;Node;</span><br><br>Node *<span class="hljs-title function_">merge</span><span class="hljs-params">(Node *<span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> k)</span>&#123;<br>    Node* head = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    Node* prev = head;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] != <span class="hljs-literal">NULL</span>) cnt++;<br>    <span class="hljs-keyword">while</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">continue</span>;<br>            Node* temp = <span class="hljs-built_in">list</span>[i];<br>            <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[i]-&gt;next;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) cnt--;<br>            prev-&gt;next = temp;<br>            prev = prev-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">continue</span>;<br>            Node* temp = <span class="hljs-built_in">list</span>[i];<br>            <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[i]-&gt;next;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) cnt--;<br>            prev-&gt;next = temp;<br>            prev = prev-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50125. Consecutive 1’s with Function</title>
    <link href="/2023/07/17/judge_girl/50125.%20Consecutive%201%E2%80%99s%20with%20Function/"/>
    <url>/2023/07/17/judge_girl/50125.%20Consecutive%201%E2%80%99s%20with%20Function/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 15:30</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;findLength.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findLength</span> <span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">256</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> dr, <span class="hljs-type">int</span> dc)</span>&#123;<br>    <span class="hljs-type">int</span> now_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(is_valid(r, c, n))&#123;<br>        <span class="hljs-keyword">if</span>(arr[r][c] == <span class="hljs-number">1</span>) now_cnt += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> now_cnt = <span class="hljs-number">0</span>;<br>        max_cnt = max(max_cnt, now_cnt);<br>        r += dr, c += dc;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max_cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50142. Word Merge Sort, Again</title>
    <link href="/2023/07/17/judge_girl/50142.%20Word%20Merge%20Sort,%20Again/"/>
    <url>/2023/07/17/judge_girl/50142.%20Word%20Merge%20Sort,%20Again/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> k;<br><span class="hljs-type">char</span> file_names[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> out_name[<span class="hljs-number">40</span>];<br>FILE* f_in[<span class="hljs-number">20</span>];<br>FILE* f_out;<br><br><span class="hljs-type">int</span> using_cnt;<br><span class="hljs-type">int</span> using[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">20</span>][<span class="hljs-number">3</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_chars</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = <span class="hljs-built_in">fscanf</span>(f_in[idx], <span class="hljs-string">&quot;%c%c%c&quot;</span>, &amp;<span class="hljs-built_in">list</span>[idx][<span class="hljs-number">0</span>], &amp;<span class="hljs-built_in">list</span>[idx][<span class="hljs-number">1</span>], &amp;<span class="hljs-built_in">list</span>[idx][<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">write_chars</span><span class="hljs-params">(FILE* f_out, <span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-built_in">fprintf</span>(f_out, <span class="hljs-string">&quot;%c%c%c&quot;</span>, <span class="hljs-built_in">list</span>[idx][<span class="hljs-number">0</span>], <span class="hljs-built_in">list</span>[idx][<span class="hljs-number">1</span>], <span class="hljs-built_in">list</span>[idx][<span class="hljs-number">2</span>]);<br>&#125;<br><span class="hljs-comment">// void print_chars(int idx)&#123;</span><br><span class="hljs-comment">//     printf(&quot;%c%c%c&quot;, list[idx][0], list[idx][1], list[idx][2]);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">list</span>[a][<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * (<span class="hljs-number">26</span> * <span class="hljs-number">26</span>) +<br>           (<span class="hljs-built_in">list</span>[a][<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * (<span class="hljs-number">26</span>) +<br>           (<span class="hljs-built_in">list</span>[a][<span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(using_cnt &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> min_idx = <span class="hljs-number">-1</span>, min_val = INT_MAX;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-keyword">if</span>(using[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> h = hash(i);<br>            <span class="hljs-keyword">if</span>(h &lt; min_val) min_idx = i, min_val = h;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min_idx == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>        write_chars(f_out, min_idx);<br>        <span class="hljs-type">int</span> rtv = read_chars(min_idx);<br>        <span class="hljs-keyword">if</span>(rtv == EOF) using[min_idx] = <span class="hljs-number">0</span>, using_cnt--;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, file_names[i]);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, out_name);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) f_in[i] = fopen(file_names[i], <span class="hljs-string">&quot;r&quot;</span>), using[i] = <span class="hljs-number">1</span>;<br>    f_out = fopen(out_name, <span class="hljs-string">&quot;w&quot;</span>);<br><br>    using_cnt = k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-type">int</span> rtv = read_chars(i);<br>        <span class="hljs-keyword">if</span>(rtv == EOF) using[i] = <span class="hljs-number">0</span>, using_cnt--;<br>    &#125;<br>    solve();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) fclose(f_in[i]);<br>    fclose(f_out);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50120. Consecutive 1&#39;s</title>
    <link href="/2023/07/17/judge_girl/50120.%20Consecutive%201&#39;s/"/>
    <url>/2023/07/17/judge_girl/50120.%20Consecutive%201&#39;s/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used Time: 7:20</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> max_len = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">row</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i][j] == <span class="hljs-number">1</span>) cnt++;<br>            <span class="hljs-keyword">else</span>&#123;<br>                max_len = max(max_len, cnt);<br>                cnt = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        max_len = max(max_len, cnt);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">col</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j][i] == <span class="hljs-number">1</span>) cnt++;<br>            <span class="hljs-keyword">else</span>&#123;<br>                max_len = max(max_len, cnt);<br>                cnt = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        max_len = max(max_len, cnt);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">diag</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = i;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x &lt; n &amp;&amp; y &lt; n)&#123;<br>            <span class="hljs-keyword">if</span>(arr[x][y] == <span class="hljs-number">1</span>) cnt++;<br>            <span class="hljs-keyword">else</span>&#123;<br>                max_len = max(max_len, cnt);<br>                cnt = <span class="hljs-number">0</span>;<br>            &#125;<br>            x++, y++;<br>        &#125;<br>        max_len = max(max_len, cnt);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> x = i, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x &lt; n &amp;&amp; y &lt; n)&#123;<br>            <span class="hljs-keyword">if</span>(arr[x][y] == <span class="hljs-number">1</span>) cnt++;<br>            <span class="hljs-keyword">else</span>&#123;<br>                max_len = max(max_len, cnt);<br>                cnt = <span class="hljs-number">0</span>;<br>            &#125;<br>            x++, y++;<br>        &#125;<br>        max_len = max(max_len, cnt);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>    row();<br>    col();<br>    diag();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_len);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>simulation</tag>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50092. Pointer Chasing</title>
    <link href="/2023/07/17/judge_girl/50092.%20Pointer%20Chasing/"/>
    <url>/2023/07/17/judge_girl/50092.%20Pointer%20Chasing/</url>
    
    <content type="html"><![CDATA[<p>難度：4.8/5</p><p>誰他媽寫得出來。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;chasing.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_ABC</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span> || s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;B&#x27;</span> || s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_num</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isdigit</span>(s[i])) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">map_char</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">chasing</span><span class="hljs-params">(<span class="hljs-type">int</span> **A[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> *B[], <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> C[], <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-built_in">memset</span>(A, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(A[<span class="hljs-number">0</span>])*a);<br>    <span class="hljs-built_in">memset</span>(B, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(B[<span class="hljs-number">0</span>])*b);<br>    <span class="hljs-type">int</span> arr_sizes[<span class="hljs-number">3</span>] = &#123;a, b, c&#125;;<br><br>    <span class="hljs-type">char</span> ipt[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">while</span>(fgets(ipt, <span class="hljs-number">64</span>, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-type">char</span>* s[<span class="hljs-number">5</span>];<br>        s[<span class="hljs-number">0</span>] = strtok(ipt, <span class="hljs-string">&quot; \n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) s[i] = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; \n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>((!s[<span class="hljs-number">0</span>]) || (!s[<span class="hljs-number">1</span>]) || (!s[<span class="hljs-number">2</span>]) || (!s[<span class="hljs-number">3</span>]) || (s[<span class="hljs-number">4</span>])) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(s[<span class="hljs-number">0</span>]) != <span class="hljs-number">1</span> || <span class="hljs-built_in">strlen</span>(s[<span class="hljs-number">2</span>]) !=  <span class="hljs-number">1</span> || !is_ABC(s[<span class="hljs-number">0</span>]) || !is_ABC(s[<span class="hljs-number">2</span>])) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(!is_num(s[<span class="hljs-number">1</span>]) || !is_num(s[<span class="hljs-number">3</span>])) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">continue</span>;&#125;<br><br><br>        <span class="hljs-type">int</span> f_array = map_char(s[<span class="hljs-number">0</span>]), t_array = map_char(s[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(t_array - f_array != <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">continue</span>;&#125;<br><br>        <span class="hljs-type">int</span> f_int = atoi(s[<span class="hljs-number">1</span>]), t_int = atoi(s[<span class="hljs-number">3</span>]);<br>        <span class="hljs-keyword">if</span>(f_int &gt;= arr_sizes[f_array] || t_int &gt;= arr_sizes[t_array]<br>        || f_int &lt; <span class="hljs-number">0</span> || t_int &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">continue</span>;&#125;<br><br>        <span class="hljs-keyword">if</span>(f_array == <span class="hljs-number">0</span>) A[f_int] = &amp;B[t_int];<br>        <span class="hljs-keyword">else</span> B[f_int] = &amp;C[t_int];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2017</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50143. AND &amp; OR of Trees</title>
    <link href="/2023/07/17/judge_girl/50143.%20AND%20&amp;%20OR%20of%20Trees/"/>
    <url>/2023/07/17/judge_girl/50143.%20AND%20&amp;%20OR%20of%20Trees/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Second Try: 2/5 Used Time: 9:27</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><br>Node *<span class="hljs-title function_">treeAND</span><span class="hljs-params">(Node *root1, Node *root2)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root1 == <span class="hljs-literal">NULL</span> || root2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    Node* new_root = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    new_root-&gt;val = root1-&gt;val * root2-&gt;val;<br>    new_root-&gt;left = treeAND(root1-&gt;left, root2-&gt;left);<br>    new_root-&gt;right = treeAND(root1-&gt;right, root2-&gt;right);<br>    <span class="hljs-keyword">return</span> new_root;<br>&#125;<br><br>Node *<span class="hljs-title function_">treeOR</span><span class="hljs-params">(Node *root1, Node *root2)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root1 == <span class="hljs-literal">NULL</span> &amp;&amp; root2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    Node* new_root = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span>(root2 == <span class="hljs-literal">NULL</span>)&#123;<br>        new_root-&gt;val = root1-&gt;val;<br>        new_root-&gt;left = treeOR(root1-&gt;left, <span class="hljs-literal">NULL</span>);<br>        new_root-&gt;right = treeOR(root1-&gt;right, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root1 == <span class="hljs-literal">NULL</span>)&#123;<br>        new_root-&gt;val = root2-&gt;val;<br>        new_root-&gt;left = treeOR(<span class="hljs-literal">NULL</span>, root2-&gt;left);<br>        new_root-&gt;right = treeOR(<span class="hljs-literal">NULL</span>, root2-&gt;right);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        new_root-&gt;val = root1-&gt;val + root2-&gt;val;<br>        new_root-&gt;left = treeOR(root1-&gt;left, root2-&gt;left);<br>        new_root-&gt;right = treeOR(root1-&gt;right, root2-&gt;right);<br>    &#125;<br>    <span class="hljs-keyword">return</span> new_root;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50145. Sub Linked List</title>
    <link href="/2023/07/17/judge_girl/50145.%20Sub%20Linked%20List/"/>
    <url>/2023/07/17/judge_girl/50145.%20Sub%20Linked%20List/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sub.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node&#123;</span><br><span class="hljs-comment">//     char c;</span><br><span class="hljs-comment">//     struct Node *next;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_same</span><span class="hljs-params">(Node *t_ptr, Node *pattern)</span>&#123;<br>    <span class="hljs-keyword">while</span>(t_ptr != <span class="hljs-literal">NULL</span> &amp;&amp; pattern != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(t_ptr-&gt;c != pattern-&gt;c) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        t_ptr = t_ptr-&gt;next, pattern = pattern-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t_ptr == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(Node* p)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>) p = p-&gt;next, n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">substring</span><span class="hljs-params">(Node* text, Node* pattern)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    Node* p_ptr = pattern;<br>    <span class="hljs-keyword">for</span>(Node* t_ptr = text; t_ptr != <span class="hljs-literal">NULL</span>; t_ptr = t_ptr-&gt;next)&#123;<br>        <span class="hljs-keyword">if</span>(check_same(t_ptr, pattern))&#123;<br>            <span class="hljs-type">int</span> len = get_size(pattern);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (cnt + cnt + len - <span class="hljs-number">1</span>) * (len) / <span class="hljs-number">2</span> );<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cnt++;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">subsequence</span><span class="hljs-params">(Node* text, Node* pattern)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    Node* p_ptr = pattern;<br>    <span class="hljs-keyword">for</span>(Node* t_ptr = text; t_ptr != <span class="hljs-literal">NULL</span>; t_ptr = t_ptr-&gt;next)&#123;<br>        <span class="hljs-keyword">if</span>(t_ptr-&gt;c == p_ptr-&gt;c) p_ptr = p_ptr-&gt;next, ans += cnt;<br>        <span class="hljs-keyword">if</span>(p_ptr == <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cnt++;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50144. Tree Construction and Queries</title>
    <link href="/2023/07/17/judge_girl/50144.%20Tree%20Construction%20and%20Queries/"/>
    <url>/2023/07/17/judge_girl/50144.%20Tree%20Construction%20and%20Queries/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Second Try: 3/5 Used Time: 18:24</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tree.h&quot;</span></span><br><br>Node* <span class="hljs-title function_">get_node</span><span class="hljs-params">()</span>&#123;<br>    Node* new_node = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    new_node-&gt;data = <span class="hljs-number">1</span>, new_node-&gt;left = <span class="hljs-literal">NULL</span>, new_node-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> new_node;<br>&#125;<br><br>Node *<span class="hljs-title function_">construct</span><span class="hljs-params">(Node *root, <span class="hljs-type">char</span> s[MAXN])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)&#123;<br>        Node* new_node = get_node();<br>        root = new_node;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        root-&gt;data++;<br>    &#125;<br><br>    Node* now = root;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(now-&gt;left == <span class="hljs-literal">NULL</span>)&#123;<br>                Node* new_node = get_node();<br>                now-&gt;left = new_node;<br>                now = now-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                now = now-&gt;left;<br>                now-&gt;data++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(now-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>                Node* new_node = get_node();<br>                now-&gt;right = new_node;<br>                now = now-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                now = now-&gt;right;<br>                now-&gt;data++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(Node *root, <span class="hljs-type">char</span> s[MAXN])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br><br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(root-&gt;left == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> root = root-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> root = root-&gt;right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root-&gt;data;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50146. Merge Link Lists, Again</title>
    <link href="/2023/07/17/judge_girl/50146.%20Merge%20Link%20Lists,%20Again/"/>
    <url>/2023/07/17/judge_girl/50146.%20Merge%20Link%20Lists,%20Again/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;merge.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct node &#123;</span><br><span class="hljs-comment">//     int data;</span><br><span class="hljs-comment">//     struct node *next;</span><br><span class="hljs-comment">// &#125;Node;</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>Node *<span class="hljs-title function_">merge</span><span class="hljs-params">(Node *<span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> k)</span>&#123;<br>    Node* head = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    Node* prev = head;<br><br>    cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] != <span class="hljs-literal">NULL</span>) cnt++;<br><br>    <span class="hljs-type">int</span> init_1, init_2, di_1, di_2;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ZIGZAG</span><br>    init_1 = <span class="hljs-number">0</span>, init_2 = k - <span class="hljs-number">1</span>;<br>    di_1 = <span class="hljs-number">1</span>, di_2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> TOPDOWN</span><br>    init_1 = <span class="hljs-number">0</span>, init_2 = <span class="hljs-number">0</span>;<br>    di_1 = <span class="hljs-number">1</span>, di_2 = <span class="hljs-number">1</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> BOTTOMUP</span><br>    init_1 = k - <span class="hljs-number">1</span>, init_2 = k - <span class="hljs-number">1</span>;<br>    di_1 = <span class="hljs-number">-1</span>, di_2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">while</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = init_1; i &lt; k &amp;&amp; i &gt;= <span class="hljs-number">0</span>; i += di_1)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">continue</span>;<br>            Node* now = <span class="hljs-built_in">list</span>[i];<br>            <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[i]-&gt;next;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) cnt--;<br>            prev-&gt;next = now;<br>            prev = now;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = init_2; i &lt; k &amp;&amp; i &gt;= <span class="hljs-number">0</span>; i += di_2)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">continue</span>;<br>            Node* now = <span class="hljs-built_in">list</span>[i];<br>            <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[i]-&gt;next;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i] == <span class="hljs-literal">NULL</span>) cnt--;<br>            prev-&gt;next = now;<br>            prev = now;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head-&gt;next;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linked-list</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50147. Circles</title>
    <link href="/2023/07/17/judge_girl/50147.%20Circles/"/>
    <url>/2023/07/17/judge_girl/50147.%20Circles/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">uint64_t</span> arr[<span class="hljs-number">1000105</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint64_t</span>*)a - *(<span class="hljs-type">uint64_t</span>*)b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">uint64_t</span> x, y; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu %llu&quot;</span>, &amp;x, &amp;y);<br>        arr[i] = x * x + y * y;<br>    &#125;<br>    qsort(arr, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>), cmp);<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> max_cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> max_rad = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// for(int i = 0; i &lt; n; i++) printf(&quot;%llu &quot;, arr[i]);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i - <span class="hljs-number">1</span>] == arr[i]) cnt++;<br>        <span class="hljs-keyword">else</span> cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(cnt &gt; max_cnt) max_cnt = cnt, max_rad = arr[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt == max_cnt) max_rad = arr[i];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_rad);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50148. Stack Rectangles, Again</title>
    <link href="/2023/07/17/judge_girl/50148.%20Stack%20Rectangles,%20Again/"/>
    <url>/2023/07/17/judge_girl/50148.%20Stack%20Rectangles,%20Again/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>Second Try: 4/5 Used Time 18:40</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> l;<br>    <span class="hljs-type">int</span> w;<br>&#125; s_box;<br><br><span class="hljs-type">int</span> n;<br>s_box box[<span class="hljs-number">128</span>];<br><br><span class="hljs-type">int</span> max_size = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> target_area;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">can_place</span><span class="hljs-params">(s_box* a, s_box* b)</span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LARGEONSMALL</span><br>    <span class="hljs-keyword">if</span>(a-&gt;l &gt;= b-&gt;l &amp;&amp; a-&gt;w &gt;= b-&gt;w) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a-&gt;l &gt;= b-&gt;w &amp;&amp; a-&gt;w &gt;= b-&gt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SMALLONLARGE</span><br>    <span class="hljs-keyword">if</span>(a-&gt;l &lt;= b-&gt;l &amp;&amp; a-&gt;w &lt;= b-&gt;w) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a-&gt;l &lt;= b-&gt;w &amp;&amp; a-&gt;w &lt;= b-&gt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_area_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr_size; i++)&#123;<br>        <span class="hljs-type">int</span> idx = arr[i];<br>        ans += (box[idx].l * box[idx].w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size, <span class="hljs-type">int</span> now_idx)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        <span class="hljs-keyword">if</span>(arr_size &lt; max_size) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> this_area_sum = get_area_sum(arr, arr_size);<br><br>        <span class="hljs-keyword">if</span>(arr_size &gt; max_size)&#123;<br>            max_size = arr_size;<br>            target_area = this_area_sum;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MAXAREASUM</span><br>            target_area = max(target_area, this_area_sum);<br>            <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MINAREASUM</span><br>            target_area = min(target_area, this_area_sum);<br>            <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// choose (if possible)</span><br>        <span class="hljs-keyword">if</span>(arr_size == <span class="hljs-number">0</span> || can_place(&amp;box[now_idx], &amp;box[arr[arr_size - <span class="hljs-number">1</span>]]))&#123;<br>            arr[arr_size] = now_idx;<br>            dfs(arr, arr_size + <span class="hljs-number">1</span>, now_idx + <span class="hljs-number">1</span>);<br>            arr[arr_size] = <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// no choose</span><br>        dfs(arr, arr_size, now_idx + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;box[i].l, &amp;box[i].w);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MAXAREASUM</span><br>    target_area = INT_MIN;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MINAREASUM</span><br>    target_area = INT_MAX;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(arr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_size, target_area);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50149. Admission</title>
    <link href="/2023/07/17/judge_girl/50149.%20Admission/"/>
    <url>/2023/07/17/judge_girl/50149.%20Admission/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> ch, en, ma, sc, ss;<br>    <span class="hljs-type">int</span> total;<br>&#125; student;<br><br><span class="hljs-type">int</span> m, n;<br>student arr[<span class="hljs-number">20005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    student* a = (student*)aa;<br>    student* b = (student*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;total != b-&gt;total) <span class="hljs-keyword">return</span> b-&gt;total - a-&gt;total;<br>    <span class="hljs-keyword">if</span>(a-&gt;ma != b-&gt;ma) <span class="hljs-keyword">return</span> b-&gt;ma - a-&gt;ma;<br>    <span class="hljs-keyword">if</span>(a-&gt;en != b-&gt;en) <span class="hljs-keyword">return</span> b-&gt;en - a-&gt;en;<br>    <span class="hljs-keyword">if</span>(a-&gt;sc != b-&gt;sc) <span class="hljs-keyword">return</span> b-&gt;sc - a-&gt;sc;<br>    <span class="hljs-keyword">if</span>(a-&gt;ch != b-&gt;ch) <span class="hljs-keyword">return</span> b-&gt;ch - a-&gt;ch;<br>    <span class="hljs-keyword">return</span> b-&gt;ss - a-&gt;ss;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_info</span><span class="hljs-params">(student* s)</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;s-&gt;id, &amp;s-&gt;ch, &amp;s-&gt;en, &amp;s-&gt;ma, &amp;s-&gt;sc, &amp;s-&gt;ss);<br>    s-&gt;total = s-&gt;ch + s-&gt;en + s-&gt;ma + s-&gt;sc + s-&gt;ss;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">all_same</span><span class="hljs-params">(student* a, student* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a-&gt;ch == b-&gt;ch) &amp;&amp; (a-&gt;en == b-&gt;en) &amp;&amp;<br>           (a-&gt;ma == b-&gt;ma) &amp;&amp; (a-&gt;sc == b-&gt;sc) &amp;&amp;<br>           (a-&gt;ss == b-&gt;ss);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        student* s = &amp;arr[i];<br>        get_info(s);<br>    &#125;<br>    qsort(arr, n, <span class="hljs-keyword">sizeof</span>(student), cmp);<br><br>    <span class="hljs-type">int</span> qualify = m;<br>    student* last = &amp;arr[m - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = m; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(all_same(last, &amp;arr[i])) qualify++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; qualify; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, arr[i].id);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2018</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50153. Stepped Polygon</title>
    <link href="/2023/07/17/judge_girl/50153.%20Stepped%20Polygon/"/>
    <url>/2023/07/17/judge_girl/50153.%20Stepped%20Polygon/</url>
    
    <content type="html"><![CDATA[<p>難度：1/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d, e, f;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f);<br><br>    <span class="hljs-type">int</span> per = <span class="hljs-number">2</span> * (a + b + c + d + e + f);<br>    <span class="hljs-type">int</span> area = (a * b) + (a + c) * d + (a + c + e) * f;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, per, area);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50154. Path within a Network</title>
    <link href="/2023/07/17/judge_girl/50154.%20Path%20within%20a%20Network/"/>
    <url>/2023/07/17/judge_girl/50154.%20Path%20within%20a%20Network/</url>
    
    <content type="html"><![CDATA[<p>難度：1.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d, e, f, g;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f, &amp;g);<br><br>    <span class="hljs-type">int</span> cnt_edge = a + b + c + d + (a * e) + (b * e) + (c * e)<br>                    + (c * f) + (d * f) + (e * g) + g + f;<br><br>    <span class="hljs-type">int</span> cnt_path = (a * e * g) + (b * e * g) + (c * e * g) + (c * f)<br>                    + (d * f);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, cnt_edge, cnt_path);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50158. Stop the Sequence</title>
    <link href="/2023/07/17/judge_girl/50158.%20Stop%20the%20Sequence/"/>
    <url>/2023/07/17/judge_girl/50158.%20Stop%20the%20Sequence/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> a, b, c, d, e;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span>*)a - *(<span class="hljs-type">int</span>*)b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_c</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x &lt; d || x &gt; e)&#123;<br>        x = (a * x + b) % c;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_conseq</span><span class="hljs-params">(<span class="hljs-type">int</span> a[<span class="hljs-number">3</span>])</span>&#123;<br>    <span class="hljs-type">int</span> b[<span class="hljs-number">3</span>];<br>    b[<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>], b[<span class="hljs-number">2</span>] = a[<span class="hljs-number">2</span>];<br>    qsort(b, <span class="hljs-number">3</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">1</span>] == b[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> &amp;&amp; b[<span class="hljs-number">2</span>] == b[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);<br>    <span class="hljs-type">int</span> record[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">-100</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">-100</span>&#125;, c_num[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">-100</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">-100</span>&#125;;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x) != EOF)&#123;<br>        record[<span class="hljs-number">0</span>] = record[<span class="hljs-number">1</span>], record[<span class="hljs-number">1</span>] = record[<span class="hljs-number">2</span>];<br>        c_num[<span class="hljs-number">0</span>] = c_num[<span class="hljs-number">1</span>], c_num[<span class="hljs-number">1</span>] = c_num[<span class="hljs-number">2</span>];<br>        record[<span class="hljs-number">2</span>] = x, c_num[<span class="hljs-number">2</span>] = get_c(x);<br>        <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, x, get_c(x));</span><br>        <span class="hljs-keyword">if</span>(is_conseq(c_num))&#123;<br>            found = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, record[<span class="hljs-number">0</span>], record[<span class="hljs-number">1</span>], record[<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!found) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50156. Highest Discount Rate</title>
    <link href="/2023/07/17/judge_girl/50156.%20Highest%20Discount%20Rate/"/>
    <url>/2023/07/17/judge_girl/50156.%20Highest%20Discount%20Rate/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>記得單獨處理0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">geq</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d)</span>&#123;<br>    <span class="hljs-keyword">return</span> a * d &gt;= b * c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">gt</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d)</span>&#123;<br>    <span class="hljs-keyword">return</span> a * d &gt; b * c;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a, b, v, w, x, y, z;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;v, &amp;w, &amp;x, &amp;y, &amp;z);<br> <br>    <span class="hljs-type">int</span> max_num, max_den;<br>    <span class="hljs-keyword">if</span>(a % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(geq(v, a, w, a + <span class="hljs-number">1</span>)) max_num = v, max_den = a;<br>        <span class="hljs-keyword">else</span> max_num = w, max_den = a + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// v / a , w / (a + 1)</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(geq(w, a, v, a + <span class="hljs-number">1</span>)) max_num = w, max_den = a;<br>        <span class="hljs-keyword">else</span> max_num = v, max_den = a + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// w / a , v / (a + 1)</span><br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(b % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(gt(x, b, max_num, max_den)) max_num = x, max_den = b;<br>        <span class="hljs-keyword">if</span>(gt(y, b + <span class="hljs-number">1</span>, max_num, max_den)) max_num = y, max_den = b + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(gt(z, b + <span class="hljs-number">2</span>, max_num, max_den)) max_num = z, max_den = b + <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// x / b, y / b + 1, z / b + 2</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(gt(y, b, max_num, max_den)) max_num = y, max_den = b;<br>        <span class="hljs-keyword">if</span>(gt(z, b + <span class="hljs-number">1</span>, max_num, max_den)) max_num = z, max_den = b + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(gt(x, b + <span class="hljs-number">2</span>, max_num, max_den)) max_num = x, max_den = b + <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// y / b, z / b + 1, x / b + 2</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(gt(z, b, max_num, max_den)) max_num = z, max_den = b;<br>        <span class="hljs-keyword">if</span>(gt(x, b + <span class="hljs-number">1</span>, max_num, max_den)) max_num = x, max_den = b + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(gt(y, b + <span class="hljs-number">2</span>, max_num, max_den)) max_num = y, max_den = b + <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// z / b, x / b + 1, y / b + 2</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(v == <span class="hljs-number">0</span> &amp;&amp; w == <span class="hljs-number">0</span> &amp;&amp; x == <span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">0</span> &amp;&amp; z == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_den);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50155. Iron Block in Tank</title>
    <link href="/2023/07/17/judge_girl/50155.%20Iron%20Block%20in%20Tank/"/>
    <url>/2023/07/17/judge_girl/50155.%20Iron%20Block%20in%20Tank/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>因為假使挑快一定沈下（水就會浮上來），所以如果tank_area ==block_area時應該要看tank跟block的高度，來決定有多少水在槽內。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a, b, c, d, e, f, g;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f, &amp;g);<br><br>    <span class="hljs-type">int</span> water = a * b * d;<br>    <span class="hljs-type">int</span> tank_area = a * b;<br>    <span class="hljs-type">int</span> block_area = e * f;<br>    <span class="hljs-type">int</span> depth;<br><br>    <span class="hljs-keyword">if</span>(water == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(tank_area == block_area) &#123;<br>            <span class="hljs-keyword">if</span>(g &gt;= c) depth = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> depth = g + water / tank_area;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> remain_area = tank_area - block_area;<br>            <span class="hljs-keyword">if</span>(water &lt;= remain_area * g) depth = water / remain_area;<br>            <span class="hljs-keyword">else</span> depth = g + (water - remain_area * g) / tank_area;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(depth &gt;= c) depth = c;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, depth);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50159. Stock Price</title>
    <link href="/2023/07/17/judge_girl/50159.%20Stock%20Price/"/>
    <url>/2023/07/17/judge_girl/50159.%20Stock%20Price/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5</p><p>好複雜。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int8_t</span> arr[<span class="hljs-number">40000</span>];<br><span class="hljs-type">int</span> max_len = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> max_left_len = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> max_idx = <span class="hljs-number">-1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_mono</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>, neg = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">1</span>) pos = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">-1</span>) neg = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(pos &amp;&amp; neg) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">deal</span><span class="hljs-params">(<span class="hljs-type">int</span> up, <span class="hljs-type">int</span> down, <span class="hljs-type">int</span> idx)</span>&#123;<br>    <span class="hljs-type">int</span> len = up + down + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(len &gt; max_len)&#123;<br>        max_len = len, max_left_len = up, max_idx = idx - up - down + <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == max_len &amp;&amp; up &gt; max_left_len)&#123;<br>         max_left_len = up, max_idx = idx - up - down + <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find_mountain</span><span class="hljs-params">(<span class="hljs-type">int8_t</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>, drc = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last_inc = <span class="hljs-number">0</span>, last_drc = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">1</span>)&#123;<br>            inc++;<br>            <span class="hljs-keyword">if</span>(drc != <span class="hljs-number">0</span>) last_drc = drc, drc = <span class="hljs-number">0</span>;<br>            deal(last_drc, inc, i);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">-1</span>)&#123;<br>            drc++;<br>            <span class="hljs-keyword">if</span>(inc != <span class="hljs-number">0</span>) last_inc = inc, inc = <span class="hljs-number">0</span>;<br>            deal(last_inc, drc, i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    n = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;last) == EOF)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(last &lt; num) arr[n - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> arr[n - <span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>        n++;<br>        last = num;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(is_mono())&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        find_mountain(arr, n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_len, max_idx);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//          v</span><br><span class="hljs-comment">//  i i d d i i</span><br><span class="hljs-comment">// 0 1 2 1 0 1 2</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>online</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50162. RPG Queue</title>
    <link href="/2023/07/17/judge_girl/50162.%20RPG%20Queue/"/>
    <url>/2023/07/17/judge_girl/50162.%20RPG%20Queue/</url>
    
    <content type="html"><![CDATA[<p>難度：2.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">5000</span>];<br>    <span class="hljs-type">int</span> front, rear;<br>    <span class="hljs-type">int</span> size;<br>&#125; cir_array;<br><br>cir_array a[<span class="hljs-number">3</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">step</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">return</span> (x + <span class="hljs-number">1</span>) % <span class="hljs-number">5000</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) a[i].front = <span class="hljs-number">0</span>, a[i].rear = <span class="hljs-number">0</span>, a[i].size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num) != EOF)&#123;<br>        cir_array* this_arr = &amp;a[num % <span class="hljs-number">3</span>];<br>        this_arr-&gt;arr[this_arr-&gt;rear] = num;<br>        this_arr-&gt;rear= step(this_arr-&gt;rear);<br>        this_arr-&gt;size += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>].size &gt;= <span class="hljs-number">3</span> &amp;&amp; a[<span class="hljs-number">1</span>].size &gt;= <span class="hljs-number">1</span> &amp;&amp; a[<span class="hljs-number">2</span>].size &gt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[<span class="hljs-number">0</span>].arr[a[<span class="hljs-number">0</span>].front]);<br>                a[<span class="hljs-number">0</span>].front = step(a[<span class="hljs-number">0</span>].front);<br>                a[<span class="hljs-number">0</span>].size -= <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a[<span class="hljs-number">1</span>].arr[a[<span class="hljs-number">1</span>].front], a[<span class="hljs-number">2</span>].arr[a[<span class="hljs-number">2</span>].front]);<br>            a[<span class="hljs-number">1</span>].front = step(a[<span class="hljs-number">1</span>].front); a[<span class="hljs-number">1</span>].size -= <span class="hljs-number">1</span>;<br>            a[<span class="hljs-number">2</span>].front = step(a[<span class="hljs-number">2</span>].front); a[<span class="hljs-number">2</span>].size -= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>array</tag>
      
      <tag>queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50163. Seat Assignment</title>
    <link href="/2023/07/17/judge_girl/50163.%20Seat%20Assignment/"/>
    <url>/2023/07/17/judge_girl/50163.%20Seat%20Assignment/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5 Used Time: 27:48</p><p>沒事不要亂開<code>uint8_t</code>，他最大256而已。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> row;<br>    <span class="hljs-type">int</span> col;<br>&#125; pos;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">uint8_t</span> car[<span class="hljs-number">1000</span>][<span class="hljs-number">20</span>][<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>pos single = &#123;<span class="hljs-number">0</span>&#125;;<br>pos double1 = &#123;<span class="hljs-number">0</span>&#125;;<br>pos double2 = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">step</span><span class="hljs-params">(pos* p)</span>&#123;<br>    p-&gt;col++;<br>    <span class="hljs-keyword">if</span>(p-&gt;col == <span class="hljs-number">5</span>) p-&gt;col = <span class="hljs-number">0</span>, p-&gt;row++;<br>    <span class="hljs-keyword">if</span>(p-&gt;row == <span class="hljs-number">20</span>) p-&gt;row = <span class="hljs-number">0</span>, p-&gt;c++;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_ocp</span><span class="hljs-params">(pos* p)</span>&#123;<br>    <span class="hljs-keyword">return</span> car[p-&gt;c][p-&gt;row][p-&gt;col];<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">set_ocp</span><span class="hljs-params">(pos* p)</span>&#123;<br>    car[p-&gt;c][p-&gt;row][p-&gt;col] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_pos</span><span class="hljs-params">(pos* p)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, p-&gt;c + <span class="hljs-number">1</span>, p-&gt;row + <span class="hljs-number">1</span>, p-&gt;col + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_together</span><span class="hljs-params">(pos* a, pos* b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a-&gt;c != b-&gt;c) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a-&gt;row != b-&gt;row) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(b-&gt;col - a-&gt;col != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a-&gt;col == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_oob</span><span class="hljs-params">(pos* p)</span>&#123;<br>    <span class="hljs-keyword">return</span> p-&gt;c &gt;= n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">memset</span>(car, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>) * <span class="hljs-number">20</span> * <span class="hljs-number">5</span>);<br>    single.c = <span class="hljs-number">0</span>, single.row = <span class="hljs-number">0</span>, single.col = <span class="hljs-number">0</span>;<br>    double1.c = <span class="hljs-number">0</span>, double1.row = <span class="hljs-number">0</span>, double1.col = <span class="hljs-number">0</span>;<br>    double2.c = <span class="hljs-number">0</span>, double2.row = <span class="hljs-number">0</span>, double2.col = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deal_single</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(is_ocp(&amp;single)) step(&amp;single);<br>    set_ocp(&amp;single);<br>    print_pos(&amp;single);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">deal_double</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(is_oob(&amp;double1) || is_oob(&amp;double2)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!is_ocp(&amp;double1) &amp;&amp; !is_ocp(&amp;double2) &amp;&amp; is_together(&amp;double1, &amp;double2)) <span class="hljs-keyword">break</span>;<br>        step(&amp;double1);<br>        step(&amp;double2);<br>    &#125;<br>    set_ocp(&amp;double1);<br>    set_ocp(&amp;double2);<br>    print_pos(&amp;double1); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    print_pos(&amp;double2); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    init();<br>    <span class="hljs-type">int</span> req;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;req) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(req == <span class="hljs-number">1</span>)&#123;<br>            deal_single();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> rtv = deal_double();<br>            <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>)&#123;<br>                deal_single(); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>                deal_single(); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50164. Dice</title>
    <link href="/2023/07/17/judge_girl/50164.%20Dice/"/>
    <url>/2023/07/17/judge_girl/50164.%20Dice/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5 Used Time: 12:18</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> r, c;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">1024</span>][<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;r, &amp;c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_valid_12</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span>(arr[x + <span class="hljs-number">1</span>][y] + arr[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">2</span>] != <span class="hljs-number">7</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(arr[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] + arr[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>] != <span class="hljs-number">7</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) cnt[arr[x + <span class="hljs-number">1</span>][y + i]]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) <span class="hljs-keyword">if</span>(cnt[i] &gt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-type">int</span> res_1 = <span class="hljs-number">-1</span>, res_2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(cnt[i] == <span class="hljs-number">0</span> &amp;&amp; res_1 == <span class="hljs-number">-1</span>) res_1 = i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt[i] == <span class="hljs-number">0</span>) res_2 = i;<br>    &#125;<br><br>    <span class="hljs-type">int</span> up_1 = <span class="hljs-number">0</span>, down_1 = <span class="hljs-number">0</span>, up_2 = <span class="hljs-number">0</span>, down_2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[x][y + i] == res_1) up_1++;<br>        <span class="hljs-keyword">if</span>(arr[x + <span class="hljs-number">2</span>][y + i] == res_1) down_1++;<br>        <span class="hljs-keyword">if</span>(arr[x][y + i] == res_2) up_2++;<br>        <span class="hljs-keyword">if</span>(arr[x + <span class="hljs-number">2</span>][y + i] == res_2) down_2++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = up_1 * down_2 + up_2 * down_1;<br>    <span class="hljs-comment">// printf(&quot;ans is %d\n&quot;, ans);</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r - <span class="hljs-number">2</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c - <span class="hljs-number">3</span>; j++)&#123;<br>            cnt += count_valid_12(i, j);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50166. Newton&#39;s Method</title>
    <link href="/2023/07/17/judge_girl/50166.%20Newton&#39;s%20Method/"/>
    <url>/2023/07/17/judge_girl/50166.%20Newton&#39;s%20Method/</url>
    
    <content type="html"><![CDATA[<p>難度：3.3/5</p><p>微積分好難</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> d;<br><span class="hljs-type">double</span> coff[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">double</span> diff[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">double</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span>&#123;<br>    <span class="hljs-type">double</span> p = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">double</span> ans = (<span class="hljs-type">double</span>)<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= d; i++)&#123;<br>        ans += p * coff[i];<br>        p *= x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">df</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span>&#123;<br>    <span class="hljs-type">double</span> p = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">double</span> ans = (<span class="hljs-type">double</span>)<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++)&#123;<br>        ans += p * diff[i];<br>        p *= x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br><br>    <span class="hljs-type">int</span> dummy = d;<br>    <span class="hljs-keyword">while</span>(dummy &gt;= <span class="hljs-number">0</span>) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;coff[dummy--]);<br><br>    <span class="hljs-type">int</span> k; <span class="hljs-type">double</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;x);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++) diff[i] = (<span class="hljs-type">double</span>)(i + <span class="hljs-number">1</span>) * coff[i + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-type">double</span> y = f(x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4f %.4f\n&quot;</span>, x, y);<br>        <span class="hljs-type">double</span> m = df(x);<br>        x -= (y / m);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>float</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50167. E-commerce</title>
    <link href="/2023/07/17/judge_girl/50167.%20E-commerce/"/>
    <url>/2023/07/17/judge_girl/50167.%20E-commerce/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;payment.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 20000</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(arr[n] != <span class="hljs-number">0</span>) n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_id</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> id_list[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(id_list[i] == id) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">on_sale</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> on_sale_id[], <span class="hljs-type">int</span> sale_len)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sale_len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(id == on_sale_id[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">double</span> <span class="hljs-title function_">payment</span><span class="hljs-params">(<span class="hljs-type">int</span> id_list[], <span class="hljs-type">double</span> price[], <span class="hljs-type">int</span> order_item_id[], <span class="hljs-type">int</span> order_qty[], <span class="hljs-type">int</span> on_sale_id[])</span>&#123;<br>    <span class="hljs-type">int</span> n = get_size(id_list);<br>    <span class="hljs-type">int</span> m = get_size(order_item_id);<br>    <span class="hljs-type">int</span> sale_len = get_size(on_sale_id);<br><br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">int</span> now_id = order_item_id[i], now_qty = order_qty[i];<br>        <span class="hljs-type">int</span> idx = find_id(now_id, id_list, n);<br>        <span class="hljs-type">double</span> now_price = price[idx];<br>        <span class="hljs-keyword">if</span>(on_sale(now_id, on_sale_id, sale_len)) ans += now_price * now_qty * (<span class="hljs-type">double</span>)<span class="hljs-number">0.8</span>;<br>        <span class="hljs-keyword">else</span> ans += now_price * now_qty;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(ans &lt; (<span class="hljs-type">double</span>)<span class="hljs-number">490.00</span>) ans += (<span class="hljs-type">double</span>)<span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>float</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50168. Subway</title>
    <link href="/2023/07/17/judge_girl/50168.%20Subway/"/>
    <url>/2023/07/17/judge_girl/50168.%20Subway/</url>
    
    <content type="html"><![CDATA[<p>難度：3.7/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stationDistance.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10000</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_arr_size</span><span class="hljs-params">(<span class="hljs-type">int</span> a[])</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n] != <span class="hljs-number">0</span>) n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_dist</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d)</span>&#123;<br>    <span class="hljs-type">int</span> min_num = min(s, d);<br>    <span class="hljs-type">int</span> max_num = max(s, d);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = min_num - <span class="hljs-number">1</span>; i &lt; max_num - <span class="hljs-number">1</span>; i++)&#123;<br>        ans += arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">stationDistance</span><span class="hljs-params">(<span class="hljs-type">int</span> r[],<span class="hljs-type">int</span> g[],<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> g_ori, <span class="hljs-type">int</span> g_des, <span class="hljs-type">int</span> start_st[],<span class="hljs-type">int</span> end_st[])</span>&#123;<br>    <span class="hljs-type">int</span> g_size = get_arr_size(g);<br><br>    <span class="hljs-type">int</span>* arr[<span class="hljs-number">3</span>] = &#123;r, g, b&#125;;<br>    <span class="hljs-keyword">if</span>(start_st[<span class="hljs-number">0</span>] == end_st[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-type">int</span> color = start_st[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> get_dist(arr[color], start_st[<span class="hljs-number">1</span>], end_st[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> start_color, start_idx, end_color, end_idx;<br>        <span class="hljs-keyword">if</span>(start_st[<span class="hljs-number">0</span>] &gt; end_st[<span class="hljs-number">0</span>])&#123;<br>            start_color = end_st[<span class="hljs-number">0</span>], start_idx = end_st[<span class="hljs-number">1</span>];<br>            end_color = start_st[<span class="hljs-number">0</span>], end_idx = start_st[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            start_color = start_st[<span class="hljs-number">0</span>], start_idx = start_st[<span class="hljs-number">1</span>];<br>            end_color = end_st[<span class="hljs-number">0</span>], end_idx = end_st[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(start_color == <span class="hljs-number">0</span> &amp;&amp; end_color == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// R -&gt; G</span><br>            ans += get_dist(arr[<span class="hljs-number">0</span>], start_idx, g_ori);<br>            ans += get_dist(arr[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>, end_idx);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(start_color == <span class="hljs-number">1</span> &amp;&amp; end_color == <span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// G -&gt; B</span><br>            ans += get_dist(arr[<span class="hljs-number">1</span>], start_idx, g_size + <span class="hljs-number">1</span>);<br>            ans += get_dist(arr[<span class="hljs-number">2</span>], g_des, end_idx);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// R -&gt; G</span><br>            ans += get_dist(arr[<span class="hljs-number">0</span>], start_idx, g_ori);<br>            ans += get_dist(arr[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>, g_size + <span class="hljs-number">1</span>);<br>            ans += get_dist(arr[<span class="hljs-number">2</span>], g_des, end_idx);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50169. Sum of Integers</title>
    <link href="/2023/07/17/judge_girl/50169.%20Sum%20of%20Integers/"/>
    <url>/2023/07/17/judge_girl/50169.%20Sum%20of%20Integers/</url>
    
    <content type="html"><![CDATA[<p>難度：3.9/5</p><p>看好題目再下手。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sumOfIntegers.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sumOfIntegers</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *ptr_arr[], <span class="hljs-type">int</span> ans[], <span class="hljs-type">int</span> *num)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> now_head = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ptr_arr[now_head] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-type">int</span> i, this_sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i = now_head; ptr_arr[i] != <span class="hljs-literal">NULL</span>; i++)&#123;<br><br>            <span class="hljs-type">int</span> appeared = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = now_head; j &lt; i; j++)&#123;<br>                <span class="hljs-keyword">if</span>(ptr_arr[i] == ptr_arr[j])&#123;<br>                    appeared = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!appeared) this_sum += *ptr_arr[i];<br>        &#125;<br>        ans[cnt++] = this_sum;<br>        now_head = (i + <span class="hljs-number">1</span>);<br>    &#125;<br>    *num = cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50170. Draw a Rectangle</title>
    <link href="/2023/07/17/judge_girl/50170.%20Draw%20a%20Rectangle/"/>
    <url>/2023/07/17/judge_girl/50170.%20Draw%20a%20Rectangle/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5 Used Time: 40:53 Used Time: 15:36</p><p>邏輯好難</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fill_rectangle.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fill_rectangle_neg</span><span class="hljs-params">(<span class="hljs-type">int</span> *upper_left, <span class="hljs-type">int</span> *bottom_right, <span class="hljs-type">int</span> n_row, <span class="hljs-type">int</span> n_col, <span class="hljs-type">int</span> fill)</span>&#123;<br>    <span class="hljs-type">int</span> m = (bottom_right - upper_left) % n_col + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> n = (bottom_right - upper_left) / n_col + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>            *(upper_left + (i * n_col + j)) = fill;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">fill_rectangle_pos</span><span class="hljs-params">(<span class="hljs-type">int</span> *upper_right, <span class="hljs-type">int</span> *bottom_left, <span class="hljs-type">int</span> n_row, <span class="hljs-type">int</span> n_col, <span class="hljs-type">int</span> fill)</span>&#123;<br>    <span class="hljs-type">int</span> r = (n_col + bottom_left - upper_right) % n_col;<br>    <span class="hljs-type">int</span> m = (n_col - r) % n_col + <span class="hljs-number">1</span>;<br>    fill_rectangle_neg(upper_right - (m - <span class="hljs-number">1</span>), bottom_left + (m - <span class="hljs-number">1</span>),<br>             n_row, n_col, fill);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>pointer</tag>
      
      <tag>IMPORTANT</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50171. Split a string</title>
    <link href="/2023/07/17/judge_girl/50171.%20Split%20a%20string/"/>
    <url>/2023/07/17/judge_girl/50171.%20Split%20a%20string/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;splitAndMap.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(<span class="hljs-type">char</span>*** ptr)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(ptr[n] != <span class="hljs-literal">NULL</span>) n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">splitAndMap</span><span class="hljs-params">(<span class="hljs-type">char</span>*** ptr, <span class="hljs-type">char</span>* str)</span>&#123;<br>    <span class="hljs-type">int</span> n = get_size(ptr);<br>    <span class="hljs-type">int</span> arr_idx[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> len[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-type">char</span>* token = strtok(str, <span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-keyword">while</span>(token != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-type">int</span> min_idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(len[i] &lt; len[min_idx]) min_idx = i;<br>        &#125;<br>        ptr[min_idx][arr_idx[min_idx]++] = token;<br>        len[min_idx] += <span class="hljs-built_in">strlen</span>(token);<br>        token = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50165. Convex Polygon</title>
    <link href="/2023/07/17/judge_girl/50165.%20Convex%20Polygon/"/>
    <url>/2023/07/17/judge_girl/50165.%20Convex%20Polygon/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">double</span> a, b, c;<br>&#125; s_line;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">double</span> x, y;<br>&#125; s_pt;<br><br><span class="hljs-type">int</span> n;<br>s_line line[<span class="hljs-number">250</span>];<br>s_pt pt[<span class="hljs-number">250</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find_inter</span><span class="hljs-params">(s_line* s1, s_line *s2, s_pt* p)</span>&#123;<br>    p-&gt;x = (s1-&gt;b * s2-&gt;c - s2-&gt;b * s1-&gt;c)  / (s1-&gt;a * s2-&gt;b - s2-&gt;a * s1-&gt;b);<br>    p-&gt;y = (s1-&gt;a * s2-&gt;c - s2-&gt;a * s1-&gt;c)  / (s2-&gt;a * s1-&gt;b - s1-&gt;a * s2-&gt;b);<br>&#125;<br><br><span class="hljs-type">double</span> <span class="hljs-title function_">get_distance</span><span class="hljs-params">(s_pt* p1, s_pt* p2)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)<span class="hljs-built_in">sqrt</span>((p1-&gt;x - p2-&gt;x) * (p1-&gt;x - p2-&gt;x) + (p1-&gt;y - p2-&gt;y) * (p1-&gt;y - p2-&gt;y));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf %lf %lf&quot;</span>, &amp;line[i].a, &amp;line[i].b, &amp;line[i].c);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        find_inter(&amp;line[i], &amp;line[i + <span class="hljs-number">1</span>], &amp;pt[i]);<br>    &#125;<br>    find_inter(&amp;line[n - <span class="hljs-number">1</span>], &amp;line[<span class="hljs-number">0</span>], &amp;pt[n - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        ans += get_distance(&amp;pt[i], &amp;pt[i + <span class="hljs-number">1</span>]);<br>    &#125;<br>    ans += get_distance(&amp;pt[<span class="hljs-number">0</span>], &amp;pt[n - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf\n&quot;</span>, ans);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geometry</tag>
      
      <tag>float</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50172. Stairs</title>
    <link href="/2023/07/17/judge_girl/50172.%20Stairs/"/>
    <url>/2023/07/17/judge_girl/50172.%20Stairs/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_stars</span><span class="hljs-params">(<span class="hljs-type">int</span> cnt)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> now_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> is_hor = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">char</span> last = <span class="hljs-string">&#x27;$&#x27;</span>;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s) != EOF)&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br><br>        <span class="hljs-keyword">if</span>(is_hor)&#123;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>                now_len += n - <span class="hljs-number">1</span>;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] != last)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                print_stars(now_len);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>                now_len += n - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s + <span class="hljs-number">1</span>);<br>                now_len += n - <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] != last)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>                    print_stars(now_len);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>                    <span class="hljs-keyword">if</span>(i != n - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>                    print_stars(now_len);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>                    <span class="hljs-keyword">if</span>(i != n - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        last = s[n - <span class="hljs-number">1</span>];<br>        is_hor ^= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50173. Matrix Operations</title>
    <link href="/2023/07/17/judge_girl/50173.%20Matrix%20Operations/"/>
    <url>/2023/07/17/judge_girl/50173.%20Matrix%20Operations/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;matrixOperations.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_bit</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> ((*n) &gt;&gt; (<span class="hljs-number">8</span> * x + y)) &amp; <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">set_bit</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    (*n) |= ((<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; ((<span class="hljs-number">8</span> * x + y)));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printMatrix</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *m)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, *m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, get_bit(m, i, j));<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">rotateMatrix</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *m)</span>&#123;<br>    <span class="hljs-type">uint64_t</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-type">int</span> b = get_bit(m, i, j);<br>            <span class="hljs-keyword">if</span>(b) set_bit(&amp;temp, j, <span class="hljs-number">7</span> - i);<br>        &#125;<br>    &#125;<br>    (*m) = temp;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">transposeMatrix</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *m)</span>&#123;<br>    <span class="hljs-type">uint64_t</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-type">int</span> b = get_bit(m, i, j);<br>            <span class="hljs-keyword">if</span>(b) set_bit(&amp;temp, j, i);<br>        &#125;<br>    &#125;<br>    (*m) = temp;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50174. Bubble Sort</title>
    <link href="/2023/07/17/judge_girl/50174.%20Bubble%20Sort/"/>
    <url>/2023/07/17/judge_girl/50174.%20Bubble%20Sort/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>用unix系統main會生出不對的output，交上去就對了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;inttypes.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;BubbleSort.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_bit</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span>* n, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> ((*n) &gt;&gt; (<span class="hljs-number">63</span> - i)) &amp; <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">toggle_bit</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span>* n, <span class="hljs-type">int</span> i)</span>&#123;<br>    (*n) ^= ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-number">1</span>) &lt;&lt; (<span class="hljs-number">63</span> - i));<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">step</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">63</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(get_bit(&amp;n, i) == <span class="hljs-number">1</span> &amp;&amp; get_bit(&amp;n, i + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)&#123;<br>            toggle_bit(&amp;n, i);<br>            toggle_bit(&amp;n, i + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> n, <span class="hljs-type">uint64_t</span> output[<span class="hljs-number">63</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">63</span>; i++)&#123;<br>        n = step(n);<br>        output[i] = n;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50175. Grading</title>
    <link href="/2023/07/17/judge_girl/50175.%20Grading/"/>
    <url>/2023/07/17/judge_girl/50175.%20Grading/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;grading.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Submission &#123;</span><br><span class="hljs-comment">//     int subID;</span><br><span class="hljs-comment">//     int studentID;</span><br><span class="hljs-comment">//     char outputs[10][maxL];</span><br><span class="hljs-comment">// &#125;Submission;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    Submission* a = (Submission*)aa;<br>    Submission* b = (Submission*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;studentID != b-&gt;studentID)&#123;<br>        <span class="hljs-keyword">return</span> (a-&gt;studentID &gt; b-&gt;studentID) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (a-&gt;subID &gt; b-&gt;subID) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_grade</span><span class="hljs-params">(Submission *s, <span class="hljs-type">char</span> answer[<span class="hljs-number">10</span>][maxL])</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(s-&gt;outputs[i], answer[i]) == <span class="hljs-number">0</span>)&#123;<br>            cnt += <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">grading</span><span class="hljs-params">(<span class="hljs-type">char</span> answer[<span class="hljs-number">10</span>][maxL], Submission* sub, <span class="hljs-type">int</span> n)</span>&#123;<br>    qsort(sub, n, <span class="hljs-keyword">sizeof</span>(Submission), cmp);<br>    <span class="hljs-type">int</span> max_grade = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> now_grade = get_grade(&amp;sub[i], answer);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Student %d gets %d with Submission %d.\n&quot;</span>,<br>                    sub[i].studentID, now_grade, sub[i].subID);<br>        max_grade = max(max_grade, now_grade);<br>        <span class="hljs-keyword">if</span>(i == n - <span class="hljs-number">1</span> || sub[i + <span class="hljs-number">1</span>].studentID != sub[i].studentID)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Student %d gets %d in this exam.\n&quot;</span>, sub[i].studentID, max_grade);<br>            max_grade = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50177. Lights Out</title>
    <link href="/2023/07/17/judge_girl/50177.%20Lights%20Out/"/>
    <url>/2023/07/17/judge_girl/50177.%20Lights%20Out/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5</p><p>Second Try: 4/5 Used Time: 18:27 Used Time: 17:33</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> d;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_one_idx_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <span class="hljs-keyword">if</span>(arr[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">press</span><span class="hljs-params">(<span class="hljs-type">int</span> cnt[], <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> x = num / n, y = num % n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[i], now_y = y + dy[i];<br>        <span class="hljs-keyword">if</span>(is_valid(now_x, now_y))&#123;<br>            cnt[now_x * n + now_y]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_valid_comb</span><span class="hljs-params">(<span class="hljs-type">int</span> used[], <span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!used[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> press(cnt, i);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">0</span> &amp;&amp; cnt[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">1</span> &amp;&amp; cnt[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> used[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_size, <span class="hljs-type">int</span> target_size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_size == target_size)&#123;<br>        <span class="hljs-keyword">if</span>(check_valid_comb(used, arr) == <span class="hljs-number">1</span>)&#123;<br>            print_one_idx_arr(used);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx == len)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> rtv;<br>        <span class="hljs-comment">// choose</span><br>        used[now_idx] = <span class="hljs-number">1</span>;<br>        rtv = dfs(used, now_idx + <span class="hljs-number">1</span>, now_size + <span class="hljs-number">1</span>, target_size);<br>        <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// no choose</span><br>        used[now_idx] = <span class="hljs-number">0</span>;<br>        rtv = dfs(used, now_idx + <span class="hljs-number">1</span>, now_size, target_size);<br>        <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d) != EOF) arr[d] = <span class="hljs-number">1</span>;<br>    len = n * n;<br><br>    <span class="hljs-type">int</span> used[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-type">int</span> rtv = dfs(used, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50176. Bidding</title>
    <link href="/2023/07/17/judge_girl/50176.%20Bidding/"/>
    <url>/2023/07/17/judge_girl/50176.%20Bidding/</url>
    
    <content type="html"><![CDATA[<p>難度：3.3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bidding.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct bid &#123;</span><br><span class="hljs-comment">//   int bidderID;</span><br><span class="hljs-comment">//   int itemID;</span><br><span class="hljs-comment">//   int bidPrice;</span><br><span class="hljs-comment">// &#125; Bid;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct itemMinPrice&#123;</span><br><span class="hljs-comment">//   int itemID;</span><br><span class="hljs-comment">//   int minPrice;</span><br><span class="hljs-comment">// &#125; ItemMinPrice;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> bidder_id;<br>    <span class="hljs-type">int</span> item_id;<br>    <span class="hljs-type">int</span> bid_price;<br>    <span class="hljs-type">int</span> time;<br>    <span class="hljs-type">int</span> buy;<br>&#125; helper;<br><br>helper new_bid[<span class="hljs-number">10005</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_helper</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    helper* a = (helper*)aa;<br>    helper* b = (helper*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;item_id != b-&gt;item_id) <span class="hljs-keyword">return</span> (a-&gt;item_id &gt; b-&gt;item_id) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(a-&gt;bid_price != b-&gt;bid_price) <span class="hljs-keyword">return</span> (a-&gt;bid_price &gt; b-&gt;bid_price) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (a-&gt;time &gt; b-&gt;time) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_min_price</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    ItemMinPrice* a = (ItemMinPrice*)aa;<br>    ItemMinPrice* b = (ItemMinPrice*)bb;<br>    <span class="hljs-keyword">return</span> (a-&gt;itemID &gt; b-&gt;itemID) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_output</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    helper* a = (helper*)aa;<br>    helper* b = (helper*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;buy &amp;&amp; b-&gt;buy)&#123;<br>        <span class="hljs-keyword">if</span>(a-&gt;bidder_id != b-&gt;bidder_id) <span class="hljs-keyword">return</span> (a-&gt;bidder_id &gt; b-&gt;bidder_id) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> (a-&gt;item_id &gt; b-&gt;item_id) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(a-&gt;buy) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(b-&gt;buy) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_new_bid</span><span class="hljs-params">(Bid bidSeq[], <span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        new_bid[i].bidder_id = bidSeq[i].bidderID;<br>        new_bid[i].item_id = bidSeq[i].itemID;<br>        new_bid[i].bid_price = bidSeq[i].bidPrice;<br>        new_bid[i].time = i;<br>        new_bid[i].buy = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bidding</span><span class="hljs-params">(Bid bidSeq[], <span class="hljs-type">int</span> m, ItemMinPrice minPriceSeq[], <span class="hljs-type">int</span> n)</span>&#123;<br>    get_new_bid(bidSeq, m);<br>    qsort(new_bid, m, <span class="hljs-keyword">sizeof</span>(helper), cmp_helper);<br>    qsort(minPriceSeq, n, <span class="hljs-keyword">sizeof</span>(ItemMinPrice), cmp_min_price);<br><br>    <span class="hljs-type">int</span> price_ptr = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last_item_id = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(new_bid[i].item_id == last_item_id) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">while</span>(minPriceSeq[price_ptr].itemID != new_bid[i].item_id) price_ptr++;<br>        <span class="hljs-keyword">if</span>(new_bid[i].bid_price &gt;= minPriceSeq[price_ptr].minPrice)&#123;<br>            new_bid[i].buy = <span class="hljs-number">1</span>;<br>        &#125;<br>        last_item_id = new_bid[i].item_id;<br>    &#125;<br><br>    qsort(new_bid, m, <span class="hljs-keyword">sizeof</span>(helper), cmp_output);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(new_bid[i].buy == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bidder %d gets item %d with %d dollars\n&quot;</span>,<br>               new_bid[i].bidder_id, new_bid[i].item_id, new_bid[i].bid_price);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50178. Longest Cycle</title>
    <link href="/2023/07/17/judge_girl/50178.%20Longest%20Cycle/"/>
    <url>/2023/07/17/judge_girl/50178.%20Longest%20Cycle/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 4/5 Used Time: 20:29 Used Time: 13:12</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> g[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> arr_len, <span class="hljs-type">int</span> target_size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == target_size)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now_idx; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = now_idx; i &lt; arr_len; i++)&#123;<br>            <span class="hljs-keyword">if</span>(now_idx == <span class="hljs-number">0</span> &amp;&amp; g[<span class="hljs-number">0</span>][arr[i]] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(now_idx != <span class="hljs-number">0</span> &amp;&amp; g[arr[now_idx - <span class="hljs-number">1</span>]][arr[i]] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(now_idx == target_size - <span class="hljs-number">1</span> &amp;&amp; g[<span class="hljs-number">0</span>][arr[i]] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            swap(&amp;arr[now_idx], &amp;arr[i]);<br>            <span class="hljs-type">int</span> rtv = dfs(arr, now_idx + <span class="hljs-number">1</span>, arr_len, target_size);<br>            <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            swap(&amp;arr[now_idx], &amp;arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        arr[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-type">int</span> rtv = dfs(arr, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, i);<br>        <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50160. Skills</title>
    <link href="/2023/07/17/judge_girl/50160.%20Skills/"/>
    <url>/2023/07/17/judge_girl/50160.%20Skills/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-type">int</span> e;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> now_cool_down;<br>    <span class="hljs-type">int</span> last_used;<br>&#125; s_sp_atk;<br><br><span class="hljs-type">int</span> r;<br><span class="hljs-type">int</span> h, g;<br><span class="hljs-type">int</span> max_h;<br>s_sp_atk sp_atk[<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> b;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_damage</span><span class="hljs-params">(s_sp_atk *s, <span class="hljs-type">int</span> rnd_cnt)</span>&#123;<br>    <span class="hljs-keyword">if</span>(s-&gt;last_used == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(rnd_cnt &lt;= s-&gt;c) <span class="hljs-keyword">return</span> s-&gt;b;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s-&gt;b + (s-&gt;e * (rnd_cnt - s-&gt;c));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rnd_cnt - s-&gt;last_used &gt;= s-&gt;c)&#123;<br>        <span class="hljs-keyword">return</span> s-&gt;b + (s-&gt;e * (rnd_cnt - s-&gt;last_used - s-&gt;c));<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;r, &amp;h, &amp;g);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;sp_atk[i].b, &amp;sp_atk[i].e, &amp;sp_atk[i].c);<br>        sp_atk[i].last_used = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;sp_atk[<span class="hljs-number">3</span>].b);<br>    sp_atk[<span class="hljs-number">3</span>].e = <span class="hljs-number">0</span>, sp_atk[<span class="hljs-number">3</span>].c = <span class="hljs-number">0</span>, sp_atk[<span class="hljs-number">3</span>].last_used = <span class="hljs-number">-1</span>;<br><br>    max_h = h;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> rnd_cnt = <span class="hljs-number">0</span>; rnd_cnt &lt; r; rnd_cnt++)&#123;<br>        <span class="hljs-type">int</span> max_idx = <span class="hljs-number">0</span>, max_dmg = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-type">int</span> now_dmg = get_damage(&amp;sp_atk[i], rnd_cnt);<br>            <span class="hljs-keyword">if</span>(now_dmg &gt; max_dmg) max_idx = i, max_dmg = now_dmg;<br>        &#125;<br>        sp_atk[max_idx].last_used = rnd_cnt;<br><br>        h -= max_dmg;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, h, (rnd_cnt == r - <span class="hljs-number">1</span> || h &lt;= <span class="hljs-number">0</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br><br>        <span class="hljs-keyword">if</span>(h &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> h = min(max_h, h + g);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50161. Memory Game</title>
    <link href="/2023/07/17/judge_girl/50161.%20Memory%20Game/"/>
    <url>/2023/07/17/judge_girl/50161.%20Memory%20Game/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> memory[<span class="hljs-number">105</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) memory[i] = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> now_num; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now_num);<br>        <span class="hljs-keyword">if</span>(memory[now_num] == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>            memory[now_num] = i;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, i, memory[now_num], now_num);<br>            memory[now_num] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50179. Split a file into many files</title>
    <link href="/2023/07/17/judge_girl/50179.%20Split%20a%20file%20into%20many%20files/"/>
    <url>/2023/07/17/judge_girl/50179.%20Split%20a%20file%20into%20many%20files/</url>
    
    <content type="html"><![CDATA[<p>難度：4.4/5</p><p>有幾個小問題： 1. <span class="math inline">\(N \leq10\)</span>，所以output file的名字在第十個的時候要特別處理。 2.<code>c = fgetc(f_in)</code>的returnvalue就是<code>c</code>。所以<code>while(c = fgetc(f_in))</code>會在讀到0的時候出問題。3. 要用unsigned char讀而不是char讀。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> ip_file_name[<span class="hljs-number">1000</span>];<br><span class="hljs-type">char</span> op_file_prefix[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> n;<br><br>FILE* f_in;<br>FILE* f_out[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> buffer[<span class="hljs-number">3000000</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_min_idx</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-type">int</span> min_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt; arr[min_idx]) min_idx = i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> min_idx;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, ip_file_name);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op_file_prefix);<br><br>    f_in = fopen(ip_file_name, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">int</span> op_len = <span class="hljs-built_in">strlen</span>(op_file_prefix);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">9</span>)&#123;<br>            op_file_prefix[op_len] = <span class="hljs-string">&#x27;0&#x27;</span> + i + <span class="hljs-number">1</span>;<br>            op_file_prefix[op_len + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            op_file_prefix[op_len] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            op_file_prefix[op_len + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            op_file_prefix[op_len + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        &#125;<br><br>        f_out[i] = fopen(op_file_prefix, <span class="hljs-string">&quot;wb&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> file_size[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(!feof(f_in))&#123;<br>        <span class="hljs-type">int</span> min_idx = get_min_idx(file_size);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d started\n&quot;</span>, min_idx);<br>        <span class="hljs-keyword">while</span>((!feof(f_in)) &amp;&amp; (c = fgetc(f_in)) != EOF &amp;&amp; (c != <span class="hljs-number">255</span>))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;putting %d to %d\n&quot;</span>, c, min_idx);<br>            fputc(c, f_out[min_idx]);<br>            file_size[min_idx]++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d endded\n&quot;</span>, min_idx);<br>    &#125;<br><br>    fclose(f_in);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) fclose(f_out[i]);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50180. Matrix Multiplication</title>
    <link href="/2023/07/17/judge_girl/50180.%20Matrix%20Multiplication/"/>
    <url>/2023/07/17/judge_girl/50180.%20Matrix%20Multiplication/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> name_a[<span class="hljs-number">32</span>], name_b[<span class="hljs-number">32</span>], name_c[<span class="hljs-number">32</span>];<br><span class="hljs-type">int</span> len_a, len_b, len_c;<br><span class="hljs-type">int32_t</span> mtx_a[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>], mtx_b[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>];<br><span class="hljs-type">int64_t</span> mtx_c[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_name</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">9</span>)&#123;<br>        name[len] = <span class="hljs-string">&#x27;0&#x27;</span> + x;<br>        name[len + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        name[len] = <span class="hljs-string">&#x27;0&#x27;</span> + (x / <span class="hljs-number">10</span>);<br>        name[len + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span> + (x % <span class="hljs-number">10</span>);<br>        name[len + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">get_arr</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> arr[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>], <span class="hljs-type">char</span>* prefix, <span class="hljs-type">int</span> len)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        get_name(prefix, len, i + <span class="hljs-number">1</span>);<br>        FILE* f = fopen(prefix, <span class="hljs-string">&quot;rb&quot;</span>);<br>        fread(arr[i], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int32_t</span>), n, f);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">place_arr</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> arr[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>], <span class="hljs-type">char</span>* prefix, <span class="hljs-type">int</span> len)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        get_name(prefix, len, i + <span class="hljs-number">1</span>);<br>        FILE* f = fopen(prefix, <span class="hljs-string">&quot;wb&quot;</span>);<br>        fwrite(arr[i], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int64_t</span>), n, f);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_32mtx</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> arr[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_64mtx</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> arr[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> a[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>], <span class="hljs-type">int32_t</span> b[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>], <span class="hljs-type">int64_t</span> c[<span class="hljs-number">32</span>][<span class="hljs-number">32</span>])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int64_t</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)&#123;<br>                cnt += (<span class="hljs-type">int64_t</span>)a[i][k] * (<span class="hljs-type">int64_t</span>)b[k][j];<br>            &#125;<br>            c[i][j] = cnt;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s&quot;</span>, name_a, name_b, name_c);<br>    len_a = <span class="hljs-built_in">strlen</span>(name_a), len_b = <span class="hljs-built_in">strlen</span>(name_b), len_c = <span class="hljs-built_in">strlen</span>(name_c);<br><br>    get_arr(mtx_a, name_a, len_a);<br>    get_arr(mtx_b, name_b, len_b);<br>    compute(mtx_a, mtx_b, mtx_c);<br>    <span class="hljs-comment">// print_32mtx(mtx_a); printf(&quot;\n&quot;);</span><br>    <span class="hljs-comment">// print_32mtx(mtx_b); printf(&quot;\n&quot;);</span><br>    <span class="hljs-comment">// print_64mtx(mtx_c); printf(&quot;\n&quot;);</span><br><br>    place_arr(mtx_c, name_c, len_c);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50181. Calculate the area</title>
    <link href="/2023/07/17/judge_girl/50181.%20Calculate%20the%20area/"/>
    <url>/2023/07/17/judge_girl/50181.%20Calculate%20the%20area/</url>
    
    <content type="html"><![CDATA[<p>難度：4.2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;calArea.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct node&#123;</span><br><span class="hljs-comment">//     struct node* rightPtr;</span><br><span class="hljs-comment">//     struct node* downPtr;</span><br><span class="hljs-comment">// &#125;NODE;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">calArea</span><span class="hljs-params">(NODE* head)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    NODE *d = head, *r = head;<br><br>    <span class="hljs-type">int</span> ptr_d = <span class="hljs-number">0</span>, ptr_r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(r-&gt;rightPtr != <span class="hljs-literal">NULL</span>)&#123;<br>        r = r-&gt;rightPtr;<br>        ptr_r++;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(ptr_r != ptr_d)&#123;<br>        ans += (ptr_r - ptr_d);<br>        d = d-&gt;downPtr, r = r-&gt;downPtr;<br><br>        <span class="hljs-keyword">while</span>(d-&gt;rightPtr != <span class="hljs-literal">NULL</span>)&#123;<br>            d = d-&gt;rightPtr;<br>            ptr_d++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(r-&gt;rightPtr != <span class="hljs-literal">NULL</span>)&#123;<br>            r = r-&gt;rightPtr;<br>            ptr_r++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50182. Two Lists to Tree</title>
    <link href="/2023/07/17/judge_girl/50182.%20Two%20Lists%20to%20Tree/"/>
    <url>/2023/07/17/judge_girl/50182.%20Two%20Lists%20to%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>17行的<code>if(p == NULL) return NULL;</code>記得要加，不然他會找不到要切哪裡。</p><p>Second Try: 4/5 Used Time: 16:25</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;BuildTree.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node&#123;</span><br><span class="hljs-comment">//     int val;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_nodes</span><span class="hljs-params">(Node* p)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>) n++, p = p-&gt;left;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br>Node* <span class="hljs-title function_">cut</span><span class="hljs-params">(Node* p)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = count_nodes(p);<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">int</span> first;<br>    <span class="hljs-keyword">if</span>(cnt % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) first = cnt / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> first = (cnt + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br>    Node *temp = p;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; first - <span class="hljs-number">1</span>; i++)&#123;<br>        temp = temp-&gt;left;<br>    &#125;<br>    Node* s = temp-&gt;left;<br>    temp-&gt;left = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_node</span><span class="hljs-params">(Node* p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=null=\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;val);<br>        p = p-&gt;left;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br>Node* <span class="hljs-title function_">BuildTree</span><span class="hljs-params">(Node* list1, Node* list2)</span>&#123;<br>    <span class="hljs-comment">// print_node(list1);</span><br>    <span class="hljs-comment">// print_node(list2);</span><br>    <span class="hljs-keyword">if</span>(list1 == <span class="hljs-literal">NULL</span> &amp;&amp; list2 == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-comment">// printf(&quot;12 null\n&quot;);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list1 == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-comment">// printf(&quot;l null\n&quot;);</span><br>        <span class="hljs-keyword">return</span> list2;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2 == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-comment">// printf(&quot;2 null\n&quot;);</span><br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        Node* root;<br>        <span class="hljs-keyword">if</span>(list1-&gt;val &lt; list2-&gt;val)&#123;<br>            root = list1;<br>            list1 = list1-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            root = list2;<br>            list2 = list2-&gt;left;<br>        &#125;<br>        <span class="hljs-comment">// printf(&quot;root val %d\n&quot;, root-&gt;val);</span><br><br><br>        Node *r1 = cut(list1);<br>        Node *r2 = cut(list2);<br><br>        <span class="hljs-comment">// printf(&quot;left:\n&quot;);</span><br>        <span class="hljs-comment">// print_node(list1);</span><br>        <span class="hljs-comment">// print_node(list2);</span><br>        <span class="hljs-comment">// printf(&quot;right:\n&quot;);</span><br>        <span class="hljs-comment">// print_node(r1);</span><br>        <span class="hljs-comment">// print_node(r2);</span><br><br>        root-&gt;left = BuildTree(list1, list2);<br>        root-&gt;right = BuildTree(r1, r2);<br><br><br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50183. Lights out, again</title>
    <link href="/2023/07/17/judge_girl/50183.%20Lights%20out,%20again/"/>
    <url>/2023/07/17/judge_girl/50183.%20Lights%20out,%20again/</url>
    
    <content type="html"><![CDATA[<p>難度：4.7/5</p><p>Second Try: 4.7/5 Used Time: 29:02 Used Time: 20:12</p><h2 id="main.c">main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lights.h&quot;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>Lights* l;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> target_size, <span class="hljs-type">int</span> arr_size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == target_size)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now_idx; i++) flip(l, arr[i], n);<br>        <span class="hljs-keyword">if</span>(numOfLights(l, n) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now_idx; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now_idx; i++) flip(l, arr[i], n);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = now_idx; i &lt; arr_size; i++)&#123;<br>            swap(&amp;arr[now_idx], &amp;arr[i]);<br>            <span class="hljs-type">int</span> rtv = dfs(arr, now_idx + <span class="hljs-number">1</span>, target_size, arr_size);<br>            <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            swap(&amp;arr[now_idx], &amp;arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    l = (Lights*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lights));<br>    init(l);<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); len = n * n;<br>    <span class="hljs-type">int</span> d; <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d) != EOF) flip(l, d, n);<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) arr[i] = i;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)&#123;<br>        <span class="hljs-type">int</span> rtv = dfs(arr, <span class="hljs-number">0</span>, i, len);<br>        <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lights.c">lights.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lights.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct _lights&#123;</span><br><span class="hljs-comment">//     int arr[4][4];</span><br><span class="hljs-comment">//     int cnt_on;</span><br><span class="hljs-comment">// &#125;Lights;</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Lights *l)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>            l-&gt;arr[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    l-&gt;cnt_on = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numOfLights</span><span class="hljs-params">(Lights *l, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> l-&gt;cnt_on;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">flip</span><span class="hljs-params">(Lights *l, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> x = k / n;<br>    <span class="hljs-type">int</span> y = k % n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[i], now_y = y + dy[i];<br>        <span class="hljs-keyword">if</span>(is_valid(now_x, now_y, n))&#123;<br>            <span class="hljs-keyword">if</span>(l-&gt;arr[now_x][now_y] == <span class="hljs-number">0</span>)&#123;<br>                l-&gt;arr[now_x][now_y] = <span class="hljs-number">1</span>;<br>                l-&gt;cnt_on++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                l-&gt;arr[now_x][now_y] = <span class="hljs-number">0</span>;<br>                l-&gt;cnt_on--;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printLights</span><span class="hljs-params">(Lights *l, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, l-&gt;arr[i][j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lights.h">lights.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">lights</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> cnt_on;<br>&#125;Lights;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Lights *l)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">numOfLights</span><span class="hljs-params">(Lights *l,<span class="hljs-type">int</span> N)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">flip</span><span class="hljs-params">(Lights *l,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> N)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">printLights</span><span class="hljs-params">(Lights *l,<span class="hljs-type">int</span> N)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>implementation</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50186. Hitting set, part II</title>
    <link href="/2023/07/17/judge_girl/50186.%20Hitting%20set,%20part%20II/"/>
    <url>/2023/07/17/judge_girl/50186.%20Hitting%20set,%20part%20II/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>Second Try: 5/5 Used Time: A lot Used Time: 21:47</p><p>沒有辦法一步到位的遞迴...。考試的時候的思路應該要怎麼想（每一步都要檢查）： 1. 先寫出一個generalcase的遞迴，能跑出所有組合（並觀察排序方法，你的sampleoutput在組合的哪個位置） 2. 在遞迴的leafnode，要寫出組合是否正確的valider，只要是符合題目（繼續觀察你所有的validcombination） 3. 增加全域變數(min_cnt,min_num之類的)，幫助你紀錄你在遞迴到leaf的時候，要比較、汰換、紀錄什麼資訊。4. 確認Sample Output都是對的，可以先丟Judge看看有沒有寫錯。 5.如果丟上去TLE則開始剪枝，最一般的剪枝狀況就是在最上面加上「如果全選的話能不能至少大於target_size」(這題不適用)。這題可以在最上面加上「你選到的set有沒有大於目前我們找到最小的set」。接著比較題目導向的purning就加在選/不選的遞迴式之前，如果不應該選就直接continue或return。（每增加一個新的condition就要test一次）</p><p>然後題目就得看好題意...，最好手算過一次Sample Output。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ta_set.h&quot;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> k;<br>ta_Set s[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">int</span> min_cnt = <span class="hljs-number">100</span>;<br>ta_Set min_set;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(ta_Set hit_set, <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_cnt, ta_Set search_set)</span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LARGESTDICTIONARYORDER</span><br>    <span class="hljs-keyword">if</span>(now_cnt &gt; min_cnt) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SMALLESTDICTIONARYORDER</span><br>    <span class="hljs-keyword">if</span>(now_cnt &gt;= min_cnt) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx == n + <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-keyword">if</span>(!intersect(hit_set, s[i])) <span class="hljs-keyword">return</span>;<br>        min_cnt = now_cnt;<br>        min_set = hit_set;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        removeElement(&amp;search_set, now_idx);<br><br>        <span class="hljs-type">int</span> can_no_choose = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-keyword">if</span>(intersect(search_set, s[i])) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!intersect(s[i], hit_set))&#123;<br>                can_no_choose = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// choose</span><br>        addElement(&amp;hit_set, now_idx);<br>        dfs(hit_set, now_idx + <span class="hljs-number">1</span>, now_cnt + <span class="hljs-number">1</span>, search_set);<br><br>        <span class="hljs-comment">// no choose</span><br>        <span class="hljs-keyword">if</span>(can_no_choose)&#123;<br>            removeElement(&amp;hit_set, now_idx);<br>            dfs(hit_set, now_idx + <span class="hljs-number">1</span>, now_cnt, search_set);<br>        &#125;<br><br>        addElement(&amp;search_set, now_idx);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ipt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-type">int</span> m, dummy; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        initializeSet(&amp;s[i], n);<br>        <span class="hljs-keyword">while</span>(m--)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;dummy);<br>            addElement(&amp;s[i], dummy);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ipt();<br><br>    ta_Set hit_set, search_set;<br>    initializeSet(&amp;hit_set, n);<br>    initializeSet(&amp;search_set, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) addElement(&amp;search_set, i);<br>    <span class="hljs-comment">// printf(&quot;===\n&quot;); printSet(search_set); printf(&quot;===\n&quot;);</span><br>    dfs(hit_set, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, search_set);<br>    printSet(min_set);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50187. Minimum Spanning Tree, part I</title>
    <link href="/2023/07/17/judge_girl/50187.%20Minimum%20Spanning%20Tree,%20part%20I/"/>
    <url>/2023/07/17/judge_girl/50187.%20Minimum%20Spanning%20Tree,%20part%20I/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mst.h&quot;</span></span><br> <br><span class="hljs-comment">// typedef struct mst &#123;</span><br><span class="hljs-comment">//     int g[50][50];</span><br><span class="hljs-comment">//     int n;</span><br><span class="hljs-comment">// &#125; MST;</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(MST *mst, <span class="hljs-type">int</span> n)</span>&#123;<br>    mst-&gt;n = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            mst-&gt;g[i][j] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">addRoad</span><span class="hljs-params">(MST *mst, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> len)</span>&#123;<br>    mst-&gt;g[a][b] = len;<br>    mst-&gt;g[b][a] = len;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">removeRoad</span><span class="hljs-params">(MST *mst, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = mst-&gt;g[a][b];<br>    <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    mst-&gt;g[a][b] = <span class="hljs-number">-1</span>;<br>    mst-&gt;g[b][a] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(MST *mst, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> vis[])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mst-&gt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(mst-&gt;g[idx][i] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(vis[i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>        vis[i] = <span class="hljs-number">1</span>;<br>        dfs(mst, i, vis);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">bool</span> <span class="hljs-title function_">hasPath</span><span class="hljs-params">(MST *mst, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(mst, a, vis);<br>    <span class="hljs-keyword">return</span> vis[b] == <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-type">bool</span> <span class="hljs-title function_">connected</span><span class="hljs-params">(MST *mst)</span>&#123;<br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dfs(mst, <span class="hljs-number">0</span>, vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mst-&gt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(vis[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50188. Minimum Spanning Tree, part II</title>
    <link href="/2023/07/17/judge_girl/50188.%20Minimum%20Spanning%20Tree,%20part%20II/"/>
    <url>/2023/07/17/judge_girl/50188.%20Minimum%20Spanning%20Tree,%20part%20II/</url>
    
    <content type="html"><![CDATA[<p>難度：2.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mstTA.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-type">int</span> len;<br>&#125; s_road;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    s_road* a = (s_road*)aa;<br>    s_road* b = (s_road*)bb;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ADD</span><br>    <span class="hljs-keyword">return</span> a-&gt;len - b-&gt;len;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> REMOVE</span><br>    <span class="hljs-keyword">return</span> b-&gt;len - a-&gt;len;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    s_road road[<span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;road[i].a, &amp;road[i].b, &amp;road[i].len);<br>    &#125;<br>    qsort(road, m, <span class="hljs-keyword">sizeof</span>(s_road), cmp);<br><br><br>    MSTTA mst;<br>    initTA(&amp;mst, n);<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ADD</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">int</span> a = road[i].a, b = road[i].b, len = road[i].len;<br>        <span class="hljs-keyword">if</span>(hasPathTA(&amp;mst, a, b)) <span class="hljs-keyword">continue</span>;<br>        addRoadTA(&amp;mst, a, b, len);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, len);<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> REMOVE</span><br>    <span class="hljs-type">int</span> cnt = m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">int</span> a = road[i].a, b = road[i].b, len = road[i].len;<br>        addRoadTA(&amp;mst, a, b, len);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">int</span> a = road[i].a, b = road[i].b, len = road[i].len;<br>        removeRoadTA(&amp;mst, a, b);<br><br>        <span class="hljs-keyword">if</span>(connectedTA(&amp;mst))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, len);<br>            cnt--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            addRoadTA(&amp;mst, a, b, len);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>struct</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50184. 3-SAT</title>
    <link href="/2023/07/17/judge_girl/50184.%203-SAT/"/>
    <url>/2023/07/17/judge_girl/50184.%203-SAT/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Second Try: 4.4/5 Used Time: 44:56</p><h2 id="main.c">main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lock.h&quot;</span></span><br><br><span class="hljs-type">int</span> m, n;<br><span class="hljs-type">int</span> seq[<span class="hljs-number">128</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>Locks* l;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sign</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> (n &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">my_pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; b; i++) n *= a;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cnt_score</span><span class="hljs-params">(Locks* l, <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l-&gt;n; i++)&#123;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-type">int</span> light_num = <span class="hljs-built_in">abs</span>(l-&gt;lockSeq[i][j]) - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> target = sign(l-&gt;lockSeq[i][j]);<br>            <span class="hljs-keyword">if</span>(target == ((num &gt;&gt; light_num) &amp; <span class="hljs-number">1</span>))&#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;seq[i][j]);<br>        &#125;<br>    &#125;<br>    l = init(seq, n);<br><br>    <span class="hljs-type">int</span> max_score = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> max_idx = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> upper_bound = my_pow(<span class="hljs-number">2</span>, m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; upper_bound; i++)&#123;<br>        <span class="hljs-type">int</span> now_score = cnt_score(l, i);<br>        <span class="hljs-keyword">if</span>(now_score &gt; max_score)&#123;<br>            max_score = now_score;<br>            max_idx = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (max_idx &gt;&gt; i) &amp; <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_score);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_idx);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="lock.c">lock.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lock.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sign</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">return</span> (n &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><br>Locks* <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> lockSeq[][<span class="hljs-number">3</span>], <span class="hljs-type">int</span> n)</span>&#123;<br>    Locks* l = (Locks*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Locks) * n);<br>    <span class="hljs-built_in">memcpy</span>(l-&gt;lockSeq, lockSeq, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">3</span> * n);<br>    l-&gt;n = n;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numUnlocked</span><span class="hljs-params">(Locks *l, <span class="hljs-type">bool</span> lights[], <span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l-&gt;n; i++)&#123;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(sign(l-&gt;lockSeq[i][j]) == lights[<span class="hljs-built_in">abs</span>(l-&gt;lockSeq[i][j]) - <span class="hljs-number">1</span>])&#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="lock.h">lock.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">locks</span> &#123;</span><br>    <span class="hljs-type">int</span> lockSeq[<span class="hljs-number">128</span>][<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span> n;<br>&#125; Locks;<br><br>Locks* <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> lockSeq[][<span class="hljs-number">3</span>], <span class="hljs-type">int</span> n)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numUnlocked</span><span class="hljs-params">(Locks *locks, <span class="hljs-type">bool</span> lights[], <span class="hljs-type">int</span> m)</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50190. Set Sorting and Searching</title>
    <link href="/2023/07/17/judge_girl/50190.%20Set%20Sorting%20and%20Searching/"/>
    <url>/2023/07/17/judge_girl/50190.%20Set%20Sorting%20and%20Searching/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>比較有趣的點是，你為了qsort而寫的cmpfucntion，也可以拿進去給binary-search給comparsion用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span>* arr;<br>    <span class="hljs-type">int</span> n;<br>&#125; <span class="hljs-built_in">set</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_arr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span>*)b - *(<span class="hljs-type">int</span>*)a;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_set</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    <span class="hljs-built_in">set</span>* a = (<span class="hljs-built_in">set</span>*)aa;<br>    <span class="hljs-built_in">set</span>* b = (<span class="hljs-built_in">set</span>*)bb;<br> <br>    <span class="hljs-type">int</span> min_len = min(a-&gt;n, b-&gt;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; min_len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a-&gt;arr[i] != b-&gt;arr[i])&#123;<br>            <span class="hljs-keyword">return</span> a-&gt;arr[i] - b-&gt;arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a-&gt;n == b-&gt;n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a-&gt;n == min_len) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">make_set</span><span class="hljs-params">(<span class="hljs-built_in">set</span>* s)</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s-&gt;n);<br>    s-&gt;arr = (<span class="hljs-type">int</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * s-&gt;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s-&gt;n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s-&gt;arr[i]);<br>    &#125;<br>    qsort(s-&gt;arr, s-&gt;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp_arr);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">free_set</span><span class="hljs-params">(<span class="hljs-built_in">set</span>* s)</span>&#123;<br>    <span class="hljs-built_in">free</span>(s-&gt;arr);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-built_in">set</span> set_arr[], <span class="hljs-built_in">set</span>* target, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> rtv = cmp_set(&amp;set_arr[m], target);<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> m;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rtv &lt; <span class="hljs-number">0</span>) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">set</span> set_arr[<span class="hljs-number">10000</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        make_set(&amp;set_arr[i]);<br>    &#125;<br>    qsort(set_arr, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">set</span>), cmp_set);<br>    <span class="hljs-comment">// for(int i = 0; i &lt; n; i++)&#123;</span><br>    <span class="hljs-comment">//     for(int j = 0; j &lt; set_arr[i].n; j++)&#123;</span><br>    <span class="hljs-comment">//         printf(&quot;%d &quot;, set_arr[i].arr[j]);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     printf(&quot;\n&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br> <br>    <span class="hljs-type">int</span> q; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-built_in">set</span> target;<br>        make_set(&amp;target);<br>        <span class="hljs-type">int</span> rtv = binary_search(set_arr, &amp;target, n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, rtv);<br>        free_set(&amp;target);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sorting</tag>
      
      <tag>struct</tag>
      
      <tag>memory</tag>
      
      <tag>binary-search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50157. Pokemon&#39;s</title>
    <link href="/2023/07/17/judge_girl/50157.%20Pokemon&#39;s/"/>
    <url>/2023/07/17/judge_girl/50157.%20Pokemon&#39;s/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k) == EOF)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> max_num = <span class="hljs-number">-1</span>, sec_num = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(num &gt;= max_num) sec_num = max_num, max_num = num;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &gt;= sec_num) sec_num = num;<br><br>        cnt[num % <span class="hljs-number">3</span>] += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">0</span>] &gt;= k &amp;&amp; cnt[<span class="hljs-number">1</span>] &gt;= k &amp;&amp; cnt[<span class="hljs-number">2</span>] &gt;= k)&#123;<br>            ans += sec_num;<br>            cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, cnt[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>            max_num = <span class="hljs-number">-1</span>, sec_num = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sec_num != <span class="hljs-number">-1</span>) ans += sec_num;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(max_num != <span class="hljs-number">-1</span>) ans += max_num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50185. Hitting set, part I</title>
    <link href="/2023/07/17/judge_girl/50185.%20Hitting%20set,%20part%20I/"/>
    <url>/2023/07/17/judge_girl/50185.%20Hitting%20set,%20part%20I/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;set.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct set&#123;</span><br><span class="hljs-comment">//     uint64_t ppl;</span><br><span class="hljs-comment">//     int cnt;</span><br><span class="hljs-comment">//     int max_el;</span><br><span class="hljs-comment">// &#125;Set;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initializeSet</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> numberOfElement)</span>&#123;<br>    <span class="hljs-built_in">set</span>-&gt;ppl = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">set</span>-&gt;cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">set</span>-&gt;max_el = numberOfElement;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">intersect</span><span class="hljs-params">(Set set1, Set set2)</span>&#123;<br>    <span class="hljs-keyword">return</span> ((set1.ppl &amp; set2.ppl) != <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">addElement</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> element)</span>&#123;<br>    element--;<br>    (<span class="hljs-built_in">set</span>-&gt;ppl) |= ((<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; element);<br>    <span class="hljs-built_in">set</span>-&gt;cnt++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> element)</span>&#123;<br>    element--;<br>    (<span class="hljs-built_in">set</span>-&gt;ppl) &amp;= (~((<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; element));<br>    <span class="hljs-built_in">set</span>-&gt;cnt--;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printSet</span><span class="hljs-params">(Set <span class="hljs-built_in">set</span>)</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">set</span>.max_el; i++)&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-built_in">set</span>.ppl &gt;&gt; i) &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, i + <span class="hljs-number">1</span>, (n == <span class="hljs-built_in">set</span>.cnt - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>            n++;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">set</span>&#123;</span><br>    <span class="hljs-type">uint64_t</span> ppl;<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-type">int</span> max_el;<br>&#125;Set;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initializeSet</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> numberOfElement)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">intersect</span><span class="hljs-params">(Set set1, Set set2)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">addElement</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> element)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(Set* <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> element)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">printSet</span><span class="hljs-params">(Set <span class="hljs-built_in">set</span>)</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50193. Minimum Time Difference</title>
    <link href="/2023/07/17/judge_girl/50193.%20Minimum%20Time%20Difference/"/>
    <url>/2023/07/17/judge_girl/50193.%20Minimum%20Time%20Difference/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -n;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">getsec</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    ans += t % <span class="hljs-number">100</span>;<br>    t /= <span class="hljs-number">100</span>;<br>    ans += (t % <span class="hljs-number">100</span>) * <span class="hljs-number">60</span>;<br>    t /= <span class="hljs-number">100</span>;<br>    ans += t * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">getstp</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-type">int</span> h, m;<br>    h = s / <span class="hljs-number">3600</span>;<br>    s %= <span class="hljs-number">3600</span>;<br>    m = s / <span class="hljs-number">60</span>;<br>    s %= <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">return</span> (h * <span class="hljs-number">10000</span>) + (m * <span class="hljs-number">100</span>) + s;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> t1, t2, s1, s2;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> minsec = <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t1) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>            t2 = t1;<br>            flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//printf(&quot;%d\n%d&quot;, s1, s2);</span><br>        s1 = getsec(t1);<br>        s2 = getsec(t2);<br>        temp = <span class="hljs-built_in">abs</span>(s1 - s2);<br>        <span class="hljs-comment">//printf(&quot;%d\n&quot;, temp);</span><br>        minsec = min(temp, minsec);<br>        t2 = t1;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, minsec);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50194. Print Numbers</title>
    <link href="/2023/07/17/judge_girl/50194.%20Print%20Numbers/"/>
    <url>/2023/07/17/judge_girl/50194.%20Print%20Numbers/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_len</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        cnt++;<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> k, l; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;k, &amp;l);<br><br><br>    <span class="hljs-type">int</span> n, char_remaining = l;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF &amp;&amp; n != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> len = get_len(n);<br>        <span class="hljs-type">int</span> num_times = n % k;<br><br>        <span class="hljs-keyword">if</span>(len * num_times &gt; char_remaining)&#123;<br>            <span class="hljs-keyword">if</span>(len * num_times &gt; l) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span>&#123;<br>                char_remaining = l - (len * num_times);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                <span class="hljs-keyword">while</span>(num_times--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            char_remaining -= (len * num_times);<br>            <span class="hljs-keyword">while</span>(num_times--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50196. Secret Expression</title>
    <link href="/2023/07/17/judge_girl/50196.%20Secret%20Expression/"/>
    <url>/2023/07/17/judge_girl/50196.%20Secret%20Expression/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><p>prasing題目很不拿手...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> total_num = <span class="hljs-number">0</span>, last_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> op = <span class="hljs-number">8</span>, next_op;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> now_num = <span class="hljs-number">0</span>, d;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d) != EOF)&#123;<br>            <span class="hljs-keyword">if</span>(d == <span class="hljs-number">0</span> || d == <span class="hljs-number">8</span> || d == <span class="hljs-number">9</span>)&#123;<br>                next_op = d;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                now_num = now_num * <span class="hljs-number">10</span> + d;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">8</span>)&#123;<br>            total_num += last_num;<br>            last_num = now_num;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">9</span>)&#123;<br>            last_num *= now_num;<br>        &#125;<br> <br>        op = next_op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    total_num += last_num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, total_num);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50195. Second Largest Distance</title>
    <link href="/2023/07/17/judge_girl/50195.%20Second%20Largest%20Distance/"/>
    <url>/2023/07/17/judge_girl/50195.%20Second%20Largest%20Distance/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><p>MLE就改開全域。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> now_idx = <span class="hljs-number">0</span>, n;<br><span class="hljs-type">int</span> last_idx[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> max_len[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, max_idx[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><span class="hljs-type">int</span> sec_len[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, sec_idx[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        n--;<br>        <span class="hljs-keyword">if</span>(last_idx[n] == <span class="hljs-number">-1</span>)&#123;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx - last_idx[n] &gt; max_len[n])&#123;<br>            sec_len[n] = max_len[n];<br>            sec_idx[n][<span class="hljs-number">0</span>] = max_idx[n][<span class="hljs-number">0</span>], sec_idx[n][<span class="hljs-number">1</span>] = max_idx[n][<span class="hljs-number">1</span>];<br>            max_len[n] = now_idx - last_idx[n];<br>            max_idx[n][<span class="hljs-number">0</span>] = last_idx[n], max_idx[n][<span class="hljs-number">1</span>] = now_idx;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx - last_idx[n] == max_len[n])&#123;<br>            max_len[n] = now_idx - last_idx[n];<br>            max_idx[n][<span class="hljs-number">0</span>] = last_idx[n], max_idx[n][<span class="hljs-number">1</span>] = now_idx;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx - last_idx[n] &gt;= sec_len[n])&#123;<br>            sec_len[n] = now_idx - last_idx[n];<br>            sec_idx[n][<span class="hljs-number">0</span>] = last_idx[n], sec_idx[n][<span class="hljs-number">1</span>] = now_idx;<br>        &#125;<br>        last_idx[n] = now_idx;<br>        now_idx++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, sec_len[i], sec_idx[i][<span class="hljs-number">0</span>], sec_idx[i][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50197. Four Digit Number</title>
    <link href="/2023/07/17/judge_girl/50197.%20Four%20Digit%20Number/"/>
    <url>/2023/07/17/judge_girl/50197.%20Four%20Digit%20Number/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">4</span>];<br>    s[<span class="hljs-number">0</span>] = num / <span class="hljs-number">1000</span>;<br>    s[<span class="hljs-number">1</span>] = num % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span>;<br>    s[<span class="hljs-number">2</span>] = num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<br>    s[<span class="hljs-number">3</span>] = num % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(s[i] - s[i + <span class="hljs-number">1</span>]) &gt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> k; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; i &lt;= <span class="hljs-number">9999</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(check(i, k)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50198. Two Digits</title>
    <link href="/2023/07/17/judge_girl/50198.%20Two%20Digits/"/>
    <url>/2023/07/17/judge_girl/50198.%20Two%20Digits/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">con_2_dig</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        cnt[x % <span class="hljs-number">10</span>]++;<br>        x /= <span class="hljs-number">10</span>;<br>    &#125;<br> <br>    <span class="hljs-type">int</span> cnt_not_0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) <span class="hljs-keyword">if</span>(cnt[i] != <span class="hljs-number">0</span>) cnt_not_0++;<br>    <span class="hljs-keyword">return</span> cnt_not_0 &lt;= <span class="hljs-number">2</span>;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">while</span>(!con_2_dig(x))&#123;<br>        x = (a * x) % b;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b, x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;x) != EOF)&#123;<br>        solve(a, b, x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50199. Candy Crush</title>
    <link href="/2023/07/17/judge_girl/50199.%20Candy%20Crush/"/>
    <url>/2023/07/17/judge_girl/50199.%20Candy%20Crush/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Used Time: 15:22</p><p>dx[], dy[]想好怎麼寫就好寫好多了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; r &amp;&amp; y &lt; c;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> d1, <span class="hljs-type">int</span> d2, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-type">int</span> x1 = x + dx[d1], y1 = y + dy[d1];<br>    <span class="hljs-type">int</span> x2 = x + dx[d2], y2 = y + dy[d2];<br>    <span class="hljs-keyword">if</span>(is_valid(x1, y1, r, c) &amp;&amp; is_valid(x2, y2, r, c))&#123;<br>        <span class="hljs-keyword">if</span>(arr[x1][y1] == arr[x][y] &amp;&amp; arr[x][y] == arr[x2][y2])&#123;<br>            arr[x1][y1] = <span class="hljs-number">0</span>;<br>            arr[x][y] = <span class="hljs-number">0</span>;<br>            arr[x2][y2] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> r, c; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;r, &amp;c);<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d1 = <span class="hljs-number">0</span>; d1 &lt; <span class="hljs-number">4</span>; d1++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d2 = d1 + <span class="hljs-number">1</span>; d2 &lt; <span class="hljs-number">4</span>; d2++)&#123;<br>                    check(arr, i, j, d1, d2, r, c);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], (j == c - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50200. Chess</title>
    <link href="/2023/07/17/judge_girl/50200.%20Chess/"/>
    <url>/2023/07/17/judge_girl/50200.%20Chess/</url>
    
    <content type="html"><![CDATA[<p>難度：3.2/5 Used Time: 14:32</p><p>一樣想好dx[], dy[]再下手。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> h, w;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dx_q[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy_q[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; h &amp;&amp; y &lt; w;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">place</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> f)</span>&#123;<br>    arr[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = s; i &lt; f; i++)&#123;<br>        <span class="hljs-type">int</span> dx = dx_q[i], dy = dy_q[i];<br>        <span class="hljs-type">int</span> now_x = x + dx, now_y = y + dy;<br>        <span class="hljs-keyword">while</span>(is_valid(now_x, now_y) &amp;&amp; arr[now_x][now_y] == <span class="hljs-number">0</span>)&#123;<br>            arr[now_x][now_y] = <span class="hljs-number">1</span>;<br>            now_x += dx, now_y += dy;<br>        &#125;<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; h; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; w; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], (j == w - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;h, &amp;w);<br>    <span class="hljs-type">int</span> t, y, x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;t, &amp;y, &amp;x) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>) arr[x][y] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) place(x, y, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>) place(x, y, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">3</span>) place(x ,y, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    print_board();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50201. Origami</title>
    <link href="/2023/07/17/judge_girl/50201.%20Origami/"/>
    <url>/2023/07/17/judge_girl/50201.%20Origami/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5 Used Time: 18:11</p><p>Diag的構造又要先想好再寫。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> r, c;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">640</span>][<span class="hljs-number">640</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> temp = x - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = x; i &lt; <span class="hljs-number">2</span> * x; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            arr[i][j] += arr[temp][j];<br>        &#125;<br>        temp--;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r - x; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            arr[i][j] = arr[i + x][j];<br>        &#125;<br>    &#125;<br>    r -= x;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> temp = c - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = c - <span class="hljs-number">2</span> * x; j &lt; c - x; j++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>            arr[i][j] += arr[i][temp];<br>        &#125;<br>        temp--;<br>    &#125;<br>    c -= x;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">diag</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = c - s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s; i++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + <span class="hljs-number">1</span>, now_y = y + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(now_y &lt; c)&#123;<br>            arr[now_x][y]+= arr[x][now_y];<br>            arr[x][now_y] = <span class="hljs-number">0</span>;<br>            now_x++, now_y++;<br>        &#125;<br>        x++, y++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i][j], (j == c - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;r, &amp;c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> t, x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;t, &amp;x) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) down(x);<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>) left(x);<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">3</span>) diag(x);<br>    &#125;<br>    print_board();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50189. Find a Path</title>
    <link href="/2023/07/17/judge_girl/50189.%20Find%20a%20Path/"/>
    <url>/2023/07/17/judge_girl/50189.%20Find%20a%20Path/</url>
    
    <content type="html"><![CDATA[<p>難度：4.4/5</p><p>本來是<spanclass="math inline">\(O(n)\)</span>查找有沒有出去過一個點（開一個array紀錄點的index），後來才想到可以直接把visited記錄在map上，就可以<spanclass="math inline">\(O(1)\)</span>查找。</p><p>Second Try: 4/5 Used Time: 24:02</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125; p;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-type">int</span> ptr;<br>&#125; s_map;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    p* a = (p*)aa;<br>    p* b = (p*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;a != b-&gt;a) <span class="hljs-keyword">return</span> (a-&gt;a &gt; b-&gt;a) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (a-&gt;b &gt; b-&gt;b) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> q;<br>p g[<span class="hljs-number">20000</span>];<br>s_map <span class="hljs-built_in">map</span>[<span class="hljs-number">20000</span>];<br><span class="hljs-type">int</span> map_cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = map_cnt - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[m].idx == num) <span class="hljs-keyword">return</span> m;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[m].idx &gt; num) r = m - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> l = m + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_in</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size, <span class="hljs-type">int</span> t)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr_size; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == t) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> vis[])</span>&#123;<br>    <span class="hljs-keyword">if</span>(a == b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> idx = binary_search(a); <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(vis[idx] == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> vis[idx] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ptr = <span class="hljs-built_in">map</span>[idx].ptr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = ptr; g[i].a == a; i++)&#123;<br>        <span class="hljs-type">int</span> rtv = check(g[i].b, b, vis);<br>        <span class="hljs-keyword">if</span>(rtv == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>        g[i].a = a, g[i].b = b;<br>        g[i + m].a = b, g[i + m].b = a;<br>    &#125;<br>    qsort(g, <span class="hljs-number">2</span> * m, <span class="hljs-keyword">sizeof</span>(p), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || g[i].a != g[i - <span class="hljs-number">1</span>].a)&#123;<br>            <span class="hljs-built_in">map</span>[map_cnt].idx = g[i].a;<br>            <span class="hljs-built_in">map</span>[map_cnt].ptr = i;<br>            map_cnt++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-type">int</span> vis[<span class="hljs-number">10000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(check(a, b, vis)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is a path.\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is no path.\n&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>constructive</tag>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
      <tag>sorting</tag>
      
      <tag>graph</tag>
      
      <tag>binary-search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50202. Diamond</title>
    <link href="/2023/07/17/judge_girl/50202.%20Diamond/"/>
    <url>/2023/07/17/judge_girl/50202.%20Diamond/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5 Time Used: 12:24</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> h, w, k;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">256</span>][<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = -k + <span class="hljs-number">1</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-type">int</span> j = k - <span class="hljs-built_in">abs</span>(i) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>) ans += arr[x + i][y + j];<br>        <span class="hljs-keyword">else</span> ans += arr[x + i][y - j] + arr[x + i][y + j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;h, &amp;w, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; h; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; w; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> max_num = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &lt;= h - k; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = k - <span class="hljs-number">1</span>; j &lt;= w - k; j++)&#123;<br>            max_num = max(max_num, get_sum(i, j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_num);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50203. Tetris</title>
    <link href="/2023/07/17/judge_girl/50203.%20Tetris/"/>
    <url>/2023/07/17/judge_girl/50203.%20Tetris/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> ((a)&gt;(b)?(a):(b));<br>&#125;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">100005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(arr[a] - <span class="hljs-number">1</span> &gt; arr[a + <span class="hljs-number">1</span>] &amp;&amp; arr[a] - <span class="hljs-number">1</span> &gt; arr[a + <span class="hljs-number">2</span>])&#123;<br>                <span class="hljs-type">int</span> s = arr[a];<br>                arr[a] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">2</span>] = s;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> s = max(arr[a + <span class="hljs-number">1</span>], arr[a + <span class="hljs-number">2</span>]);<br>                arr[a] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(arr[a + <span class="hljs-number">2</span>] - <span class="hljs-number">1</span> &gt; arr[a] &amp;&amp; arr[a + <span class="hljs-number">2</span>] - <span class="hljs-number">1</span> &gt; arr[a + <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> s = arr[a + <span class="hljs-number">2</span>];<br>                arr[a] = s, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> s = max(arr[a], arr[a + <span class="hljs-number">1</span>]);<br>                arr[a] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> s = max(max(arr[a], arr[a + <span class="hljs-number">1</span>]), arr[a + <span class="hljs-number">2</span>]);<br>            arr[a] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(arr[a] - arr[a + <span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span> &amp;&amp; arr[a + <span class="hljs-number">2</span>] - arr[a + <span class="hljs-number">1</span>] &lt; <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-type">int</span> s = arr[a + <span class="hljs-number">1</span>];<br>                arr[a] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">2</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> s = max(arr[a], arr[a + <span class="hljs-number">2</span>]);<br>                arr[a] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">1</span>] = s + <span class="hljs-number">1</span>, arr[a + <span class="hljs-number">2</span>] = s + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i], (i == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>array</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50205. Secret Expression, Again_</title>
    <link href="/2023/07/17/judge_girl/50205.%20Secret%20Expression,%20Again_/"/>
    <url>/2023/07/17/judge_girl/50205.%20Secret%20Expression,%20Again_/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> op_chr[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;+*&quot;</span>;<br><span class="hljs-type">char</span> num_chr[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;!@#$%^&amp;*()&quot;</span>;<br><span class="hljs-type">char</span> s[<span class="hljs-number">1000005</span>];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_num</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(ch == num_chr[i]) <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] != <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; s[i] != <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            s[i] = <span class="hljs-string">&#x27;0&#x27;</span> + find_num(s[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> total_val = <span class="hljs-number">0</span>, last_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> last_op = <span class="hljs-string">&#x27;+&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> now_num = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> now_op;<br>        <span class="hljs-keyword">while</span>(s[i] != <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; s[i] != <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            now_num = now_num * <span class="hljs-number">10</span> + (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            i++;<br>            <span class="hljs-keyword">if</span>(i == n) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i != n) now_op = s[i];<br><br>        <span class="hljs-keyword">if</span>(last_op == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>            total_val += last_num;<br>            last_num = now_num;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last_op == <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            last_num *= now_num;<br>        &#125;<br>        last_op = now_op;<br>    &#125;<br>    total_val += last_num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, total_val);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    n = <span class="hljs-built_in">strlen</span>(s);<br>    make();<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50204. Rubik&#39;s Cube</title>
    <link href="/2023/07/17/judge_girl/50204.%20Rubik&#39;s%20Cube/"/>
    <url>/2023/07/17/judge_girl/50204.%20Rubik&#39;s%20Cube/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5 Used Time: 11:40</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> temp[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rotate_0</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            temp[j][n - i - <span class="hljs-number">1</span>] = arr[k][i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>             arr[k][i][j] = temp[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">rotate_1</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            temp[j][n - i - <span class="hljs-number">1</span>] = arr[i][j][k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>             arr[i][j][k] = temp[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)&#123;<br>                arr[i][j][k] = i * (n * n) + j * n + k;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> tt = <span class="hljs-number">0</span>; tt &lt; m; tt++)&#123;<br>        <span class="hljs-type">int</span> t, k; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;t, &amp;k);<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;<br>            rotate_0(k);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>)&#123;<br>            rotate_1(k);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i][j][k]);<br>                cnt++;<br>                <span class="hljs-keyword">if</span>(cnt != n)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    cnt = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>3d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50207. Matrix Multiplication</title>
    <link href="/2023/07/17/judge_girl/50207.%20Matrix%20Multiplication/"/>
    <url>/2023/07/17/judge_girl/50207.%20Matrix%20Multiplication/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5 Used Time: 8:55</p><p>要看好deferencing。<code>(*arr_a)[i][j]</code>寫成<code>*arr_a[i][j]</code>是會錯的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;multiply.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">multiplyMatrix</span><span class="hljs-params">(<span class="hljs-type">void</span> ** arrayA, <span class="hljs-type">void</span> ** arrayB, <span class="hljs-type">void</span> ** arrayC)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> tt = <span class="hljs-number">0</span>; arrayA[tt] != <span class="hljs-literal">NULL</span>; tt++)&#123;<br>        A* arr_a = arrayA[tt];<br>        B* arr_b = arrayB[tt];<br>        C* arr_c = arrayC[tt];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ROW; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; ROW; j++)&#123;<br>                <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; COL; k++)&#123;<br>                    ans += (*arr_a)[i][k] * (*arr_b)[k][j];<br>                &#125;<br>                (*arr_c)[i][j] = ans;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>pointer</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50208. Cyclomatic Complexity</title>
    <link href="/2023/07/17/judge_girl/50208.%20Cyclomatic%20Complexity/"/>
    <url>/2023/07/17/judge_girl/50208.%20Cyclomatic%20Complexity/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">is_keyword</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">strcmp</span>(s, <span class="hljs-string">&quot;if&quot;</span>) == <span class="hljs-number">0</span>) || (<span class="hljs-built_in">strcmp</span>(s, <span class="hljs-string">&quot;case&quot;</span>) == <span class="hljs-number">0</span>) ||<br>           (<span class="hljs-built_in">strcmp</span>(s, <span class="hljs-string">&quot;for&quot;</span>) == <span class="hljs-number">0</span>) || (<span class="hljs-built_in">strcmp</span>(s, <span class="hljs-string">&quot;while&quot;</span>) == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">have_qm</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">while</span>(*s != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(*s == <span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        s++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">2048</span>], sep[<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;\t\n ()[]&#123;&#125;;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(fgets(s, <span class="hljs-number">2048</span>, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-type">char</span>* token = strtok(s, sep);<br>        <span class="hljs-keyword">while</span>(token != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is_keyword(token)) cnt++;<br>            <span class="hljs-keyword">if</span>(have_qm(token)) cnt++;<br>            token = strtok(<span class="hljs-literal">NULL</span>, sep);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50209. Keyboard</title>
    <link href="/2023/07/17/judge_girl/50209.%20Keyboard/"/>
    <url>/2023/07/17/judge_girl/50209.%20Keyboard/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5 Used Time: 9:38</p><p>寫出第五行的char arr跟dx dy是關鍵。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&quot;qwertyuiop&quot;</span>,<br>                   <span class="hljs-string">&quot;asdfghjkl&quot;</span> ,<br>                   <span class="hljs-string">&quot;zxcvbnm&quot;</span>    &#125;;<br><span class="hljs-type">int</span> len[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>&#125;;<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> (x == <span class="hljs-number">0</span> || x == <span class="hljs-number">1</span> || x == <span class="hljs-number">2</span>) &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; len[x];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;c); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, c);<br><br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len[i]; j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i][j] == c)&#123;<br>                x = i, y = j;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> q;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q) != EOF)&#123;<br>        <span class="hljs-type">int</span> new_x = x + dx[q], new_y = y + dy[q];<br>        <span class="hljs-keyword">if</span>(is_valid(new_x, new_y))&#123;<br>            x = new_x, y = new_y;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, arr[x][y]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>implementation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50206. Three Letter Pattern</title>
    <link href="/2023/07/17/judge_girl/50206.%20Three%20Letter%20Pattern/"/>
    <url>/2023/07/17/judge_girl/50206.%20Three%20Letter%20Pattern/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> cnt;<br>&#125; s_info;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100005</span>];<br>s_info info[<span class="hljs-number">17576</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123;<br>    s_info* a = (s_info*)aa;<br>    s_info* b = (s_info*)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;cnt != b-&gt;cnt) <span class="hljs-keyword">return</span> b-&gt;cnt - a-&gt;cnt;<br>    <span class="hljs-keyword">return</span> a-&gt;num - b-&gt;num;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mapping</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> ((s[i] - <span class="hljs-string">&#x27;a&#x27;</span>) * (<span class="hljs-number">26</span> * <span class="hljs-number">26</span>) + (s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * (<span class="hljs-number">26</span>) + (s[i + <span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;a&#x27;</span>));<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">to_str</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-type">int</span> s1 = k / (<span class="hljs-number">26</span> * <span class="hljs-number">26</span>); k %= (<span class="hljs-number">26</span> * <span class="hljs-number">26</span>);<br>    <span class="hljs-type">int</span> s2 = k / <span class="hljs-number">26</span>; k %= <span class="hljs-number">26</span>;<br>    <span class="hljs-type">int</span> s3 = k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c%c\n&quot;</span>, s1 + <span class="hljs-string">&#x27;a&#x27;</span>, s2 + <span class="hljs-string">&#x27;a&#x27;</span>, s3 + <span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    fgets(s, <span class="hljs-number">100005</span>, <span class="hljs-built_in">stdin</span>);<br>    n = <span class="hljs-built_in">strlen</span>(s);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17576</span>; i++) info[i].num = i, info[i].cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27; &#x27;</span> || s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span> || s[i + <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> num = mapping(i);<br>        info[num].cnt += <span class="hljs-number">1</span>;<br>    &#125;<br>    qsort(info, <span class="hljs-number">17576</span>, <span class="hljs-keyword">sizeof</span>(s_info), cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        to_str(info[i].num);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50210. Find the Indices</title>
    <link href="/2023/07/17/judge_girl/50210.%20Find%20the%20Indices/"/>
    <url>/2023/07/17/judge_girl/50210.%20Find%20the%20Indices/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used Time: 5:25</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;findRowAndColumn.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">findRowAndColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> **ptr, <span class="hljs-type">int</span> *Row, <span class="hljs-type">int</span> *Col, <span class="hljs-type">int</span> **start, <span class="hljs-type">int</span> *ansRow, <span class="hljs-type">int</span> *ansCol)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; ptr[i] != <span class="hljs-literal">NULL</span>; i++)&#123;<br>        <span class="hljs-type">int</span> *p = ptr[i], *st = start[i];<br>        <span class="hljs-type">int</span> r = Row[i], c = Col[i];<br><br>        <span class="hljs-type">int</span> d = p - st;<br>        ansRow[i] = d / c;<br>        ansCol[i] = d % c;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50212. Bits Swapping</title>
    <link href="/2023/07/17/judge_girl/50212.%20Bits%20Swapping/"/>
    <url>/2023/07/17/judge_girl/50212.%20Bits%20Swapping/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cnt_1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> finish)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start; i &lt; finish; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">1</span>) cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> finish)</span>&#123;<br>    <span class="hljs-keyword">if</span>(start + <span class="hljs-number">1</span> == finish) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = (start + finish) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> cnt = cnt_1(arr, start, finish);<br>    <span class="hljs-keyword">if</span>(cnt % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start, j = mid; i &lt; mid; i++, j++)&#123;<br>            <span class="hljs-type">int</span> t = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = t;<br>        &#125;<br>    &#125;<br><br>    x(arr, start, mid);<br>    x(arr, mid, finish);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">uint32_t</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>        arr[i] = ((n &gt;&gt; <span class="hljs-number">31</span> - i) &amp; <span class="hljs-number">1</span>);<br>    &#125;<br><br>    x(arr, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br><br>    <span class="hljs-type">uint32_t</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == <span class="hljs-number">1</span>)&#123;<br>            f |= ((<span class="hljs-type">uint32_t</span>)<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">31</span> - i));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>, f);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50211. Expression</title>
    <link href="/2023/07/17/judge_girl/50211.%20Expression/"/>
    <url>/2023/07/17/judge_girl/50211.%20Expression/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>Second Try: 4/5 Used Time: 16:27</p><h2 id="version-1">version 1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> is_opr(c) (((c) == <span class="hljs-string">&#x27;+&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;-&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;*&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;/&#x27;</span>))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">char</span> is_valid;<br>    <span class="hljs-type">int</span> end_idx;<br>&#125; info;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> s[<span class="hljs-number">1000005</span>];<br>info not_valid;<br><br>info <span class="hljs-title function_">eval_base</span><span class="hljs-params">(<span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = l; i &lt; n &amp;&amp; <span class="hljs-built_in">isdigit</span>(s[i]); i++)&#123;<br>        ans = ans * <span class="hljs-number">10</span> + (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == l || i == n) <span class="hljs-keyword">return</span> not_valid;<br><br>    info rtv;<br>    rtv.val = ans;<br>    rtv.is_valid = <span class="hljs-number">1</span>;<br>    rtv.end_idx = i;<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br><br>info <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> l)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(s[l] != <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> not_valid;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s[l + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>    &#123;<br>        info left = solve(l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(!left.is_valid) <span class="hljs-keyword">return</span> not_valid;<br>        <span class="hljs-keyword">if</span>(left.end_idx == n || !is_opr(s[left.end_idx])) <span class="hljs-keyword">return</span> not_valid;<br><br>        info right = solve(left.end_idx + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(!right.is_valid) <span class="hljs-keyword">return</span> not_valid;<br>        <span class="hljs-keyword">if</span>(right.end_idx == n || s[right.end_idx] != <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">return</span> not_valid;<br><br>        info ans;<br>        <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;+&#x27;</span>) ans.val = left.val + right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;-&#x27;</span>) ans.val = left.val - right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;*&#x27;</span>) ans.val = left.val * right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;/&#x27;</span>) ans.val = left.val / right.val;<br>        ans.is_valid = <span class="hljs-number">1</span>;<br>        ans.end_idx = right.end_idx + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[l + <span class="hljs-number">1</span>]))<br>    &#123;<br>        info left = eval_base(l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(!left.is_valid) <span class="hljs-keyword">return</span> not_valid;<br>        <span class="hljs-keyword">if</span>(left.end_idx == n || !is_opr(s[left.end_idx])) <span class="hljs-keyword">return</span> not_valid;<br><br>        info right = eval_base(left.end_idx + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(!right.is_valid) <span class="hljs-keyword">return</span> not_valid;<br>        <span class="hljs-keyword">if</span>(right.end_idx == n || s[right.end_idx] != <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">return</span> not_valid;<br><br>        info ans;<br>        <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;+&#x27;</span>) ans.val = left.val + right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;-&#x27;</span>) ans.val = left.val - right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;*&#x27;</span>) ans.val = left.val * right.val;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[left.end_idx] == <span class="hljs-string">&#x27;/&#x27;</span>) ans.val = left.val / right.val;<br>        ans.is_valid = <span class="hljs-number">1</span>;<br>        ans.end_idx = right.end_idx + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> not_valid;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    not_valid.is_valid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s) != EOF)<br>    &#123;<br>        n = <span class="hljs-built_in">strlen</span>(s);<br>        info rtv = solve(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(rtv.is_valid == <span class="hljs-number">1</span> &amp;&amp; rtv.end_idx == n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, rtv.val);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="version-2-by-b06902061">version 2 (by B06902061)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> is_op(c) (((c) == <span class="hljs-string">&#x27;+&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;-&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;*&#x27;</span>) || ((c) == <span class="hljs-string">&#x27;/&#x27;</span>))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> is_dig(c) (((c) &gt;= <span class="hljs-string">&#x27;0&#x27;</span>) &amp;&amp; ((c) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> is_valid;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> next_idx;<br>&#125; info;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> s[<span class="hljs-number">1000005</span>];<br><br>info <span class="hljs-title function_">eval_num</span><span class="hljs-params">(<span class="hljs-type">int</span> start)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(is_dig(s[start]) &amp;&amp; start &lt; n)&#123;<br>        ans = ans * <span class="hljs-number">10</span> + (s[start] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        start++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">1</span>, ans, start&#125;;<br>&#125;<br><br>info <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> start)</span>&#123;<br>    info l, r; <span class="hljs-type">char</span> op;<br>    <span class="hljs-keyword">if</span>(s[start] == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>        start++;<br>        <span class="hljs-keyword">if</span>(is_dig(s[start]))&#123;<br>            l = eval_num(start);<br>            op = s[l.next_idx];<br>            <span class="hljs-keyword">if</span>(!is_dig(s[l.next_idx + <span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>            r = eval_num(l.next_idx + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[start] == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>            l = solve(start);<br>            op = s[l.next_idx];<br>            <span class="hljs-keyword">if</span>(s[l.next_idx + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;(&#x27;</span>) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>            r = solve(l.next_idx + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>((!l.is_valid) || (!r.is_valid) || (!is_op(op)) || (s[r.next_idx]) != <span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;+&#x27;</span>) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">1</span>, l.val + r.val, r.next_idx + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;-&#x27;</span>) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">1</span>, l.val - r.val, r.next_idx + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">1</span>, l.val * r.val, r.next_idx + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">1</span>, l.val / r.val, r.next_idx + <span class="hljs-number">1</span>&#125;;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s) != EOF)&#123;<br>        n = <span class="hljs-built_in">strlen</span>(s);<br>        info rtv = solve(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(rtv.is_valid == <span class="hljs-number">1</span> &amp;&amp; rtv.next_idx == n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, rtv.val);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>string</tag>
      
      <tag>recursion</tag>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50213. Merge Sort</title>
    <link href="/2023/07/17/judge_girl/50213.%20Merge%20Sort/"/>
    <url>/2023/07/17/judge_girl/50213.%20Merge%20Sort/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>相信大家被DSA摧殘過都很會手刻MergeSort。temp_arr不要每次進到merge的時候重新宣告，不然會TLE。</p><p>Second Try: 3/5 Used Time: 15:55</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i], (i == r) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_mid</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>((b - a) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> (a + b) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (a + b) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> temp_arr[])</span>&#123;<br>    <span class="hljs-type">int</span> m = get_mid(l, r);<br><br>    <span class="hljs-type">int</span> ptr_a = l, ptr_b = m, temp_ptr = l;<br>    <span class="hljs-keyword">while</span>(ptr_a &lt; m &amp;&amp; ptr_b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[ptr_a] &lt; arr[ptr_b])&#123;<br>            temp_arr[temp_ptr++] = arr[ptr_a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            temp_arr[temp_ptr++] = arr[ptr_b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(ptr_a &lt; m) temp_arr[temp_ptr++] = arr[ptr_a++];<br>    <span class="hljs-keyword">while</span>(ptr_b &lt;= r) temp_arr[temp_ptr++] = arr[ptr_b++];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i++) arr[i] = temp_arr[i];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> temp_arr[])</span>&#123;<br>    print_arr(arr, l, r);<br>    <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> m = get_mid(l, r);<br><br>    merge_sort(arr, l, m - <span class="hljs-number">1</span>, temp_arr);<br>    merge_sort(arr, m, r, temp_arr);<br>    merge(arr, l, r, temp_arr);<br>    print_arr(arr, l, r);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>, arr[<span class="hljs-number">100005</span>] = &#123;<span class="hljs-number">0</span>&#125;, temp_arr[<span class="hljs-number">100005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[n]) != EOF) n++;<br><br>    merge_sort(arr, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, temp_arr);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50214. Determinant</title>
    <link href="/2023/07/17/judge_girl/50214.%20Determinant/"/>
    <url>/2023/07/17/judge_girl/50214.%20Determinant/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>看到WA就先開long long，然後遞迴內每層都改的都放近function內。</p><p>Second Try: 3/5 Used Time: 12:47 Used Time: 8:45</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> arr[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld%c&quot;</span>, arr[i][j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-type">int64_t</span> <span class="hljs-title function_">cal_det</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> arr[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int64_t</span> temp[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br>    print_arr(arr, n);<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">int64_t</span> ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> tx = <span class="hljs-number">0</span>, ty = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)&#123;<br>        tx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            ty = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(j == k) <span class="hljs-keyword">continue</span>;<br>                temp[tx][ty] = arr[i][j];<br>                ty++;<br>            &#125;<br>            tx++;<br>        &#125;<br>        <span class="hljs-type">int64_t</span> s = arr[<span class="hljs-number">0</span>][k] * cal_det(temp, n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) ans += s;<br>        <span class="hljs-keyword">else</span> ans -= s;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;determinant=%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int64_t</span> arr[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;arr[i][j]);<br>        &#125;<br>    &#125;<br><br>    cal_det(arr, n);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50215. Set Cover</title>
    <link href="/2023/07/17/judge_girl/50215.%20Set%20Cover/"/>
    <url>/2023/07/17/judge_girl/50215.%20Set%20Cover/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Second Try: 3/5 Used Time: 13:13</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">uint32_t</span> num;<br>    <span class="hljs-type">int</span> cost;<br>&#125; s_set;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">uint32_t</span> all;<br>s_set <span class="hljs-built_in">set</span>[<span class="hljs-number">25</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_info</span><span class="hljs-params">(s_set* st, <span class="hljs-type">char</span>* s)</span>&#123;<br>    st-&gt;num = <span class="hljs-number">0</span>;<br>    st-&gt;cost = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        st-&gt;num |= ((<span class="hljs-type">uint32_t</span>)<span class="hljs-number">1</span> &lt;&lt; (s[i] - <span class="hljs-string">&#x27;a&#x27;</span>));<br>        st-&gt;cost += (s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> now_set, <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> now_cost, <span class="hljs-type">int</span> *min_cost)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_cost &gt;= (*min_cost)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_set == all)&#123;<br>        (*min_cost) = min((*min_cost), now_cost);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_idx == n) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// no choose</span><br>        dfs(now_set, now_idx + <span class="hljs-number">1</span>, now_cost, min_cost);<br>        <span class="hljs-comment">// choose</span><br>        dfs(now_set | <span class="hljs-built_in">set</span>[now_idx].num, now_idx + <span class="hljs-number">1</span>, now_cost + <span class="hljs-built_in">set</span>[now_idx].cost, min_cost);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) all |= ((<span class="hljs-type">uint32_t</span>)<span class="hljs-number">1</span> &lt;&lt; (i));<br><br>    <span class="hljs-type">char</span> dummy[<span class="hljs-number">55</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, dummy);<br>            get_info(&amp;<span class="hljs-built_in">set</span>[i], dummy);<br>        &#125;<br>        <span class="hljs-type">int</span> min_cost = INT_MAX;<br>        dfs((<span class="hljs-type">uint32_t</span>)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;min_cost);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_cost);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50216. 3 Strings LCS</title>
    <link href="/2023/07/17/judge_girl/50216.%203%20Strings%20LCS/"/>
    <url>/2023/07/17/judge_girl/50216.%203%20Strings%20LCS/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>沒教你怎麼看的話這題就有5了。</p><p>Second Try: 3/5 Used Time: 10:59</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>* a, <span class="hljs-type">char</span>* b, <span class="hljs-type">char</span>* c)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> || b[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> || c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] &amp;&amp; b[<span class="hljs-number">0</span>] == c[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + dfs(a + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">int</span> nums[<span class="hljs-number">4</span>];<br><br>        <span class="hljs-type">char</span> *temp_a, *temp_b, *temp_c;<br><br>        temp_b = b, temp_c = c;<br>        <span class="hljs-keyword">while</span>(*temp_b != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_b != a[<span class="hljs-number">0</span>]) temp_b++;<br>        <span class="hljs-keyword">while</span>(*temp_c != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_c != a[<span class="hljs-number">0</span>]) temp_c++;<br>        <span class="hljs-keyword">if</span>(*temp_b == <span class="hljs-string">&#x27;\0&#x27;</span> || *temp_c == <span class="hljs-string">&#x27;\0&#x27;</span>) nums[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> nums[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> + dfs(a + <span class="hljs-number">1</span>, temp_b + <span class="hljs-number">1</span>, temp_c + <span class="hljs-number">1</span>);<br><br>        temp_a = a, temp_c = c;<br>        <span class="hljs-keyword">while</span>(*temp_a != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_a != b[<span class="hljs-number">0</span>]) temp_a++;<br>        <span class="hljs-keyword">while</span>(*temp_c != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_c != b[<span class="hljs-number">0</span>]) temp_c++;<br>        <span class="hljs-keyword">if</span>(*temp_a == <span class="hljs-string">&#x27;\0&#x27;</span> || *temp_c == <span class="hljs-string">&#x27;\0&#x27;</span>) nums[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> nums[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> + dfs(temp_a + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span>, temp_c + <span class="hljs-number">1</span>);<br><br>        temp_a = a, temp_b = b;<br>        <span class="hljs-keyword">while</span>(*temp_a != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_a != c[<span class="hljs-number">0</span>]) temp_a++;<br>        <span class="hljs-keyword">while</span>(*temp_b != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *temp_b != c[<span class="hljs-number">0</span>]) temp_b++;<br>        <span class="hljs-keyword">if</span>(*temp_a == <span class="hljs-string">&#x27;\0&#x27;</span> || *temp_b == <span class="hljs-string">&#x27;\0&#x27;</span>) nums[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> nums[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span> + dfs(temp_a + <span class="hljs-number">1</span>, temp_b + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span>);<br><br>        nums[<span class="hljs-number">3</span>] = dfs(a + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> max(max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]), max(nums[<span class="hljs-number">2</span>], nums[<span class="hljs-number">3</span>]));<br>     &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;, b[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;, c[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s&quot;</span>, a, b, c) == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dfs(a, b, c));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50217. Sorted Doubly Linked List</title>
    <link href="/2023/07/17/judge_girl/50217.%20Sorted%20Doubly%20Linked%20List/"/>
    <url>/2023/07/17/judge_girl/50217.%20Sorted%20Doubly%20Linked%20List/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>AC率很低但意外地寫很順。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;function.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct listnode &#123;</span><br><span class="hljs-comment">//     int data;</span><br><span class="hljs-comment">//     struct listnode *next;</span><br><span class="hljs-comment">//     struct listnode *prev;</span><br><span class="hljs-comment">// &#125; ListNode;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct linkedlist&#123;</span><br><span class="hljs-comment">//     struct listnode *head;</span><br><span class="hljs-comment">//     struct listnode *tail;</span><br><span class="hljs-comment">// &#125; LinkedList;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(LinkedList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> data)</span>&#123;<br>    ListNode* new_node = (ListNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ListNode));<br>    new_node-&gt;data = data;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;head == <span class="hljs-literal">NULL</span>)&#123;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br>        new_node-&gt;prev = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">list</span>-&gt;head = new_node;<br>        <span class="hljs-built_in">list</span>-&gt;tail = new_node;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(data &lt;= <span class="hljs-built_in">list</span>-&gt;head-&gt;data)&#123;<br>            new_node-&gt;next = <span class="hljs-built_in">list</span>-&gt;head;<br>            new_node-&gt;prev = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-built_in">list</span>-&gt;head-&gt;prev = new_node;<br>            <span class="hljs-built_in">list</span>-&gt;head = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data &gt;= <span class="hljs-built_in">list</span>-&gt;tail-&gt;data)&#123;<br>            new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br>            new_node-&gt;prev = <span class="hljs-built_in">list</span>-&gt;tail;<br>            <span class="hljs-built_in">list</span>-&gt;tail-&gt;next = new_node;<br>            <span class="hljs-built_in">list</span>-&gt;tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ListNode *l, *r = <span class="hljs-built_in">list</span>-&gt;head;<br>            <span class="hljs-keyword">while</span>(data &gt;= r-&gt;data) r = r-&gt;next;<br>            l = r-&gt;prev;<br><br>            new_node-&gt;next = r;<br>            new_node-&gt;prev = l;<br>            r-&gt;prev = new_node;<br>            l-&gt;next = new_node;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_head</span><span class="hljs-params">(LinkedList *<span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;head == <span class="hljs-built_in">list</span>-&gt;tail)&#123;<br>        <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>-&gt;head);<br>        <span class="hljs-built_in">list</span>-&gt;head = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">list</span>-&gt;tail = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ListNode* h = <span class="hljs-built_in">list</span>-&gt;head;<br>        <span class="hljs-built_in">list</span>-&gt;head = <span class="hljs-built_in">list</span>-&gt;head-&gt;next;<br>        <span class="hljs-built_in">list</span>-&gt;head-&gt;prev = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">free</span>(h);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_tail</span><span class="hljs-params">(LinkedList *<span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;tail == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;head == <span class="hljs-built_in">list</span>-&gt;tail)&#123;<br>        <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>-&gt;head);<br>        <span class="hljs-built_in">list</span>-&gt;head = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">list</span>-&gt;tail = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ListNode* t = <span class="hljs-built_in">list</span>-&gt;tail;<br>        <span class="hljs-built_in">list</span>-&gt;tail = <span class="hljs-built_in">list</span>-&gt;tail-&gt;prev;<br>        <span class="hljs-built_in">list</span>-&gt;tail-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">free</span>(t);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50218. Convert a Tree to a List</title>
    <link href="/2023/07/17/judge_girl/50218.%20Convert%20a%20Tree%20to%20a%20List/"/>
    <url>/2023/07/17/judge_girl/50218.%20Convert%20a%20Tree%20to%20a%20List/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>Second Try: 3/5 Used Time: 10:15</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;treeToList.h&quot;</span></span><br><br><span class="hljs-comment">// struct treenode &#123;</span><br><span class="hljs-comment">//     int value;</span><br><span class="hljs-comment">//     struct treenode *left;</span><br><span class="hljs-comment">//     struct treenode *right;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// struct list &#123;</span><br><span class="hljs-comment">//     struct treenode *head;</span><br><span class="hljs-comment">//     struct treenode *tail;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct treenode TreeNode;</span><br><span class="hljs-comment">// typedef struct list List;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_tail</span><span class="hljs-params">(List* l, TreeNode* root)</span>&#123;<br>    root-&gt;left = <span class="hljs-literal">NULL</span>, root-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(l-&gt;head == <span class="hljs-literal">NULL</span>)&#123;<br>        l-&gt;head = root;<br>        l-&gt;tail = root;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        l-&gt;tail-&gt;left = root;<br>        l-&gt;tail = root;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(TreeNode* root, List* rtv)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> val = root-&gt;value;<br>    TreeNode *l = root-&gt;left, *r = root-&gt;right;<br>    insert_tail(rtv, root);<br><br>    <span class="hljs-keyword">if</span>(val % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        solve(r, rtv);<br>        solve(l, rtv);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        solve(l, rtv);<br>        solve(r, rtv);<br>    &#125;<br>&#125;<br><br>List <span class="hljs-title function_">treeToListFunc</span><span class="hljs-params">(TreeNode* root)</span>&#123;<br>    List rtv;<br>    rtv.head = <span class="hljs-literal">NULL</span>;<br>    rtv.tail = <span class="hljs-literal">NULL</span>;<br>    solve(root, &amp;rtv);<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50219. Concatenate Two Wave Files</title>
    <link href="/2023/07/17/judge_girl/50219.%20Concatenate%20Two%20Wave%20Files/"/>
    <url>/2023/07/17/judge_girl/50219.%20Concatenate%20Two%20Wave%20Files/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">char</span> in_name_1[<span class="hljs-number">128</span>], in_name_2[<span class="hljs-number">128</span>], out_name[<span class="hljs-number">128</span>];<br>FILE *in_1, *in_2, *out;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">copy_file</span><span class="hljs-params">(FILE* in, FILE* out)</span>&#123;<br>    fseek(in, <span class="hljs-number">0</span>, SEEK_SET); fseek(out, <span class="hljs-number">0</span>, SEEK_SET);<br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">4096</span>]; <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-keyword">while</span>(cnt = fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">4096</span>, in))&#123;<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), cnt, out);<br>    &#125;<br><br>&#125;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">find_chunk_size</span><span class="hljs-params">(FILE* in)</span>&#123;<br>    fseek(in, <span class="hljs-number">4</span>, SEEK_SET);<br>    <span class="hljs-type">uint32_t</span> n;<br>    fread(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>), <span class="hljs-number">1</span>, in);<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">find_subchunk_size</span><span class="hljs-params">(FILE* in)</span>&#123;<br>    fseek(in, <span class="hljs-number">40</span>, SEEK_SET);<br>    <span class="hljs-type">uint32_t</span> n;<br>    fread(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>), <span class="hljs-number">1</span>, in);<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mod_chunk_size</span><span class="hljs-params">(FILE* out, <span class="hljs-type">uint32_t</span> n)</span>&#123;<br>    fseek(out, <span class="hljs-number">4</span>, SEEK_SET);<br>    fwrite(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>), <span class="hljs-number">1</span>, out);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mod_subchunk_size</span><span class="hljs-params">(FILE* out, <span class="hljs-type">uint32_t</span> n)</span>&#123;<br>    fseek(out, <span class="hljs-number">40</span>, SEEK_SET);<br>    fwrite(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>), <span class="hljs-number">1</span>, out);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">file_concat</span><span class="hljs-params">(FILE* in, FILE* out)</span>&#123;<br>    fseek(in, <span class="hljs-number">44</span>, SEEK_SET); fseek(out, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">4096</span>]; <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-keyword">while</span>(cnt = fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">4096</span>, in))&#123;<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), cnt, out);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s&quot;</span>, in_name_1, in_name_2, out_name);<br>    in_1 = fopen(in_name_1, <span class="hljs-string">&quot;rb&quot;</span>);<br>    in_2 = fopen(in_name_2, <span class="hljs-string">&quot;rb&quot;</span>);<br>    out = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br><br>    copy_file(in_1, out);<br>    <span class="hljs-type">uint32_t</span> ck_1 = find_chunk_size(in_1);<br>    <span class="hljs-type">uint32_t</span> ck_2 = find_chunk_size(in_2);<br>    <span class="hljs-type">uint32_t</span> sck_1 = find_subchunk_size(in_1);<br>    <span class="hljs-type">uint32_t</span> sck_2 = find_subchunk_size(in_2);<br><br>    mod_chunk_size(out, ck_1 + ck_2 - <span class="hljs-number">36</span>);<br>    mod_subchunk_size(out, sck_1 + sck_2);<br>    file_concat(in_2, out);<br><br>    fclose(in_1);<br>    fclose(in_2);<br>    fclose(out);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50220. Ternary Tree Isomorphic</title>
    <link href="/2023/07/17/judge_girl/50220.%20Ternary%20Tree%20Isomorphic/"/>
    <url>/2023/07/17/judge_girl/50220.%20Ternary%20Tree%20Isomorphic/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5</p><p>Second Try: 3/5 Used Time 13:35</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;isIsomorphic.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> f isIsomorphic</span><br><br><span class="hljs-comment">// struct TreeNode &#123;</span><br><span class="hljs-comment">//     struct TreeNode *left;</span><br><span class="hljs-comment">//     struct TreeNode *mid;</span><br><span class="hljs-comment">//     struct TreeNode *right;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// typedef struct TreeNode TreeNode;</span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isIsomorphic</span><span class="hljs-params">(TreeNode* a, TreeNode* b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-literal">NULL</span> &amp;&amp; b == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-literal">NULL</span> || b == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">bool</span> ll = f(a-&gt;left, b-&gt;left);<br>    <span class="hljs-type">bool</span> lm = f(a-&gt;left, b-&gt;mid);<br>    <span class="hljs-type">bool</span> lr = f(a-&gt;left, b-&gt;right);<br>    <span class="hljs-type">bool</span> ml = f(a-&gt;mid, b-&gt;left);<br>    <span class="hljs-type">bool</span> mm = f(a-&gt;mid, b-&gt;mid);<br>    <span class="hljs-type">bool</span> mr = f(a-&gt;mid, b-&gt;right);<br>    <span class="hljs-type">bool</span> rl = f(a-&gt;right, b-&gt;left);<br>    <span class="hljs-type">bool</span> rm = f(a-&gt;right, b-&gt;mid);<br>    <span class="hljs-type">bool</span> rr = f(a-&gt;right, b-&gt;right);<br><br>    <span class="hljs-type">bool</span> lmr = (ll &amp;&amp; mm &amp;&amp; rr);<br>    <span class="hljs-type">bool</span> lrm = (ll &amp;&amp; mr &amp;&amp; rm);<br>    <span class="hljs-type">bool</span> mlr = (lm &amp;&amp; ml &amp;&amp; rr);<br>    <span class="hljs-type">bool</span> mrl = (lm &amp;&amp; mr &amp;&amp; rl);<br>    <span class="hljs-type">bool</span> rlm = (lr &amp;&amp; ml &amp;&amp; rm);<br>    <span class="hljs-type">bool</span> rml = (lr &amp;&amp; mm &amp;&amp; rl);<br><br>    <span class="hljs-keyword">return</span> lmr || lrm || mlr || mrl || rlm || rml;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50221. Pascal&#39;s triangle</title>
    <link href="/2023/07/17/judge_girl/50221.%20Pascal&#39;s%20triangle/"/>
    <url>/2023/07/17/judge_girl/50221.%20Pascal&#39;s%20triangle/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Pascal.h&quot;</span></span><br> <br><span class="hljs-comment">// typedef struct node &#123;</span><br><span class="hljs-comment">//     int value;</span><br><span class="hljs-comment">//     struct node *left;</span><br><span class="hljs-comment">//     struct node *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(Node* n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    n-&gt;value += <span class="hljs-number">1</span>;<br>    dfs(n-&gt;left);<br>    dfs(n-&gt;right);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">build_Pascal</span><span class="hljs-params">(Node* arr, <span class="hljs-type">int</span> height)</span>&#123;<br>    <span class="hljs-type">int</span> n = (height) * (height + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) arr[i].value = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-comment">// right ptrs</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        arr[i].right = &amp;arr[i + <span class="hljs-number">1</span>];<br>    &#125;<br> <br>    <span class="hljs-comment">// left ptrs</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> d = height;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i + d &lt; n) arr[i].left = &amp;arr[i + d];<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt == d) cnt = <span class="hljs-number">0</span>, d--;<br>    &#125;<br> <br>    <span class="hljs-comment">// remove leaves</span><br>    <span class="hljs-type">int</span> now = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = height; i &gt; <span class="hljs-number">0</span>; i--)&#123;<br>        now += i;<br>        arr[now].right = <span class="hljs-literal">NULL</span>;<br>        arr[now].left = <span class="hljs-literal">NULL</span>;<br>    &#125;<br> <br>    dfs(&amp;arr[<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50222. Truncate Wave File</title>
    <link href="/2023/07/17/judge_girl/50222.%20Truncate%20Wave%20File/"/>
    <url>/2023/07/17/judge_girl/50222.%20Truncate%20Wave%20File/</url>
    
    <content type="html"><![CDATA[<p>難度：3.8/5</p><p>inconsistentnaming跟不把data講清楚什麼用的讓這題很難，比較像在考推理能力。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">WAVheader</span> &#123;</span><br>  <span class="hljs-type">char</span> RIFF[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">int</span> chunkSize;<br>  <span class="hljs-type">char</span> wave[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">char</span> format[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">int</span> subChunkSize;<br>  <span class="hljs-type">short</span> audioFormat;<br>  <span class="hljs-type">short</span> numChannel;<br>  <span class="hljs-type">int</span> sampleRate;<br>  <span class="hljs-type">int</span> byteRate;<br>  <span class="hljs-type">short</span> blockAlign;<br>  <span class="hljs-type">short</span> bitsPerSample;<br>  <span class="hljs-type">char</span> data[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">int</span> dataSize;<br>&#125; WAVHeader;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">truncate</span><span class="hljs-params">(FILE* in, FILE* out, <span class="hljs-type">int</span> k)</span>&#123;<br>    WAVHeader h;<br>    fseek(in, <span class="hljs-number">0</span>, SEEK_SET);<br>    fread(&amp;h, <span class="hljs-keyword">sizeof</span>(WAVHeader), <span class="hljs-number">1</span>, in);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>, h.numChannel, h.sampleRate, h.byteRate, h.bitsPerSample);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, h.dataSize);<br><br>    <span class="hljs-type">int</span> new_n = h.byteRate * k;<br>    h.chunkSize = new_n + <span class="hljs-number">36</span>;<br>    h.dataSize = new_n;<br>    fwrite(&amp;h, <span class="hljs-keyword">sizeof</span>(WAVHeader), <span class="hljs-number">1</span>, out);<br><br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">16384</span>];<br>    <span class="hljs-keyword">while</span>(new_n &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, new_n);<br>        <span class="hljs-type">int</span> copy_bytes = min(<span class="hljs-number">16384</span>, new_n);<br>        fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), copy_bytes, in);<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), copy_bytes, out);<br>        new_n -= copy_bytes;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> in_name[<span class="hljs-number">128</span>], out_name[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, in_name, out_name);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br><br>    FILE* in = fopen(in_name, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* out = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br>    truncate(in, out, k);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50224. Largest Digit Sum</title>
    <link href="/2023/07/17/judge_girl/50224.%20Largest%20Digit%20Sum/"/>
    <url>/2023/07/17/judge_girl/50224.%20Largest%20Digit%20Sum/</url>
    
    <content type="html"><![CDATA[<p>難度：2.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> max_sum = <span class="hljs-number">-1</span>, max_cnt, max_num;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num) != EOF)&#123;<br>        <span class="hljs-type">int</span> now_sum = <span class="hljs-number">0</span>, now_cnt = <span class="hljs-number">0</span>, now_num = <span class="hljs-number">0</span>;<br>        now_num = num;<br>        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>)&#123;<br>            now_sum += (num % <span class="hljs-number">10</span>);<br>            num /= <span class="hljs-number">10</span>;<br>            now_cnt++;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span>((now_sum &gt; max_sum) ||<br>           (now_sum == max_sum &amp;&amp; now_cnt &lt; max_cnt) ||<br>           (now_sum == max_sum &amp;&amp; now_cnt == max_cnt &amp;&amp; now_num &gt; max_num))&#123;<br>            max_sum = now_sum;<br>            max_cnt = now_cnt;<br>            max_num = now_num;<br>        &#125;<br> <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max_num);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50225. The k-th Element</title>
    <link href="/2023/07/17/judge_girl/50225.%20The%20k-th%20Element/"/>
    <url>/2023/07/17/judge_girl/50225.%20The%20k-th%20Element/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, m, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>    <span class="hljs-type">int</span> now_n = n, now_m = m;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k &gt;= now &amp;&amp; k &lt; now + now_m)&#123;<br>            <span class="hljs-type">int</span> r = x, c = m - ((now + now_m) - k);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, r + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, now, now + now_m);</span><br>        now += now_m; now_m--;<br>        x++;<br><br><br>        now_n--;<br>        <span class="hljs-keyword">if</span>(k &gt;= now &amp;&amp; k &lt; now + now_n)&#123;<br>            <span class="hljs-type">int</span> r = n - ((now + now_n) - k), c = y;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, r + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        now += now_n;<br>        y++;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50226. Four Gears</title>
    <link href="/2023/07/17/judge_girl/50226.%20Four%20Gears/"/>
    <url>/2023/07/17/judge_girl/50226.%20Four%20Gears/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>gcd、lcm的性質跟操作要記好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-type">int</span> t = a % b;<br>        a = b;<br>        b = t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a * b / gcd(a, b);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d) != EOF)&#123;<br>        <span class="hljs-type">int</span> ans = a;<br>        ans = lcm(ans, b);<br>        ans = lcm(ans, c);<br>        ans = lcm(ans, d);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans / max(max(a, b), max(c, d)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50227. Quaternary Quartic Equation</title>
    <link href="/2023/07/17/judge_girl/50227.%20Quaternary%20Quartic%20Equation/"/>
    <url>/2023/07/17/judge_girl/50227.%20Quaternary%20Quartic%20Equation/</url>
    
    <content type="html"><![CDATA[<p>難度：3.6/5</p><p>如果： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(d = <span class="hljs-number">0</span>; ...)<br>    <span class="hljs-keyword">for</span>(c = d + <span class="hljs-number">1</span>; ...)<br>        <span class="hljs-keyword">for</span>(b = c + <span class="hljs-number">1</span>; ...)<br>            <span class="hljs-keyword">for</span>(a = b + <span class="hljs-number">1</span>; ...)<br>```    <br>是會TLE的。<br><br>要把他換成<br>```c=<br><span class="hljs-keyword">for</span>(d = <span class="hljs-number">0</span>; ...)<br>    <span class="hljs-keyword">for</span>(c = d + <span class="hljs-number">1</span>; ...)<br>        <span class="hljs-keyword">for</span>(b = c + <span class="hljs-number">1</span>; ...)<br>            <span class="hljs-type">int</span> a = sum[<span class="hljs-number">0</span>] - b - c - d;<br>            <span class="hljs-keyword">if</span>(a &lt;= b) <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure> 才不會太多的無效（<span class="math inline">\(a+ b + c + d \neq sum[0]\)</span>）的組合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> sum[<span class="hljs-number">4</span>])</span>&#123;<br>    <span class="hljs-keyword">return</span> (((a*a) + (b*b) + (c*c) + (d*d) == sum[<span class="hljs-number">1</span>]) &amp;&amp;<br>            ((a*a*a) + (b*b*b) + (c*c*c) + (d*d*d) == sum[<span class="hljs-number">2</span>]) &amp;&amp;<br>            ((a*a*a*a) + (b*b*b*b) + (c*c*c*c) + (d*d*d*d) == sum[<span class="hljs-number">3</span>]));<br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> sum[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;sum[<span class="hljs-number">0</span>], &amp;sum[<span class="hljs-number">1</span>], &amp;sum[<span class="hljs-number">2</span>], &amp;sum[<span class="hljs-number">3</span>]);<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt; sum[<span class="hljs-number">0</span>]; d++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = d + <span class="hljs-number">1</span>; c &lt; sum[<span class="hljs-number">0</span>]; c++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = c + <span class="hljs-number">1</span>; b &lt; sum[<span class="hljs-number">0</span>]; b++)&#123;<br>                <span class="hljs-keyword">if</span>(sum[<span class="hljs-number">0</span>] - b - c - d &lt;= b) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-type">int</span> a = sum[<span class="hljs-number">0</span>] - b - c - d;<br> <br>                <span class="hljs-keyword">if</span>(check(a, b, c, d, sum))&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n%d\n%d\n&quot;</span>, a, b, c, d);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50228. The Maximum Sum of Arithmetic Series</title>
    <link href="/2023/07/17/judge_girl/50228.%20The%20Maximum%20Sum%20of%20Arithmetic%20Series/"/>
    <url>/2023/07/17/judge_girl/50228.%20The%20Maximum%20Sum%20of%20Arithmetic%20Series/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> last, now; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;last);<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, last, <span class="hljs-number">1</span>, last);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now);<br>    <span class="hljs-type">int</span> max_sum = last + now, max_len = <span class="hljs-number">2</span>, max_first = last;<br>    <span class="hljs-type">int</span> now_sum = max_sum, now_len = max_len, now_first = max_first;<br>    <span class="hljs-type">int</span> last_d = now - last;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;<br>        last = now; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;now);<br>        <span class="hljs-type">int</span> d = now - last;<br>        <span class="hljs-keyword">if</span>(d == last_d)&#123;<br>            now_sum += now;<br>            now_len += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            now_sum = last + now;<br>            now_len = <span class="hljs-number">2</span>;<br>            now_first = last;<br>            last_d = d;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(now_sum &gt; max_sum)&#123;<br>            max_sum = now_sum;<br>            max_len = now_len;<br>            max_first = now_first;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_sum == max_sum &amp;&amp; now_len &gt; max_len)&#123;<br>            max_sum = now_sum;<br>            max_len = now_len;<br>            max_first = now_first;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now_sum == max_sum &amp;&amp; now_len == max_len &amp;&amp; now_first &gt; max_first)&#123;<br>            max_sum = now_sum;<br>            max_len = now_len;<br>            max_first = now_first;<br>        &#125;<br>        <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;, now_sum, now_len, now_first);</span><br>        <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;, max_sum, max_len, max_first);</span><br><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, max_sum, max_len, max_first);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maintain-min-max</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50229. Cup and Pool</title>
    <link href="/2023/07/17/judge_girl/50229.%20Cup%20and%20Pool/"/>
    <url>/2023/07/17/judge_girl/50229.%20Cup%20and%20Pool/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">// #define max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-comment">// #define min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> cap;<br>    <span class="hljs-type">int</span> vol;<br>&#125; cup;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> k; cup arr[<span class="hljs-number">20005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i].cap);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i].vol);<br><br>    <span class="hljs-type">int</span> from, to;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;from, &amp;to) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(from == k) arr[to].vol = arr[to].cap;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(to == k) arr[from].vol = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(arr[from].vol + arr[to].vol &gt; arr[to].cap)&#123;<br>                arr[from].vol -= (arr[to].cap - arr[to].vol);<br>                arr[to].vol = arr[to].cap;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                arr[to].vol += arr[from].vol;<br>                arr[from].vol = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i].vol, (i == k - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50230. Hash Table</title>
    <link href="/2023/07/17/judge_girl/50230.%20Hash%20Table/"/>
    <url>/2023/07/17/judge_girl/50230.%20Hash%20Table/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">// #define max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-comment">// #define min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">77</span> * k + <span class="hljs-number">2222</span>) % s;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> s, c; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;s, &amp;c);<br>    <span class="hljs-type">int</span> table[<span class="hljs-number">100005</span>][<span class="hljs-number">12</span>];<br>    <span class="hljs-built_in">memset</span>(table, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(table));<br><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;val) != EOF)&#123;<br>        <span class="hljs-type">int</span> key = f(val, s);<br><br>        <span class="hljs-type">int</span> first_slot = <span class="hljs-number">-1</span>, exact_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)&#123;<br>            <span class="hljs-keyword">if</span>(first_slot == <span class="hljs-number">-1</span> &amp;&amp; table[key][i] == <span class="hljs-number">-1</span>)&#123;<br>                first_slot = i;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(table[key][i] == val)&#123;<br>                exact_idx = i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(exact_idx == <span class="hljs-number">-1</span>)&#123;<br>            table[key][first_slot] = val;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, val, key);<br>            table[key][exact_idx] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>array</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50231. Cubic Pairing Task with Hash Table</title>
    <link href="/2023/07/17/judge_girl/50231.%20Cubic%20Pairing%20Task%20with%20Hash%20Table/"/>
    <url>/2023/07/17/judge_girl/50231.%20Cubic%20Pairing%20Task%20with%20Hash%20Table/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>回來複習這題的時候要回去看<ahref="https://judgegirl.csie.org/source/highlight/503840">大神</a>的解法。優雅又超快...。我很正式的課完一個hash-table跟Circlerqueue花超多時間</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-comment">// #define min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> table[<span class="hljs-number">12000</span>][<span class="hljs-number">12</span>];<br>    <span class="hljs-type">int</span> pos[<span class="hljs-number">12000</span>][<span class="hljs-number">12</span>];<br>    <span class="hljs-type">int</span> table_size;<br>    <span class="hljs-type">int</span> capacity;<br>&#125; hash_table;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> s)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">77</span> * k + <span class="hljs-number">2222</span>) % s;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_ht</span><span class="hljs-params">(hash_table *h, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-built_in">memset</span>(h-&gt;table, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(h-&gt;table));<br>    <span class="hljs-built_in">memset</span>(h-&gt;pos, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(h-&gt;pos));<br>    h-&gt;table_size = s;<br>    h-&gt;capacity = c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">query_ht</span><span class="hljs-params">(hash_table *h, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> pos_idx)</span>&#123;<br>    <span class="hljs-type">int</span> key = f(k, h-&gt;table_size);<br><br>    <span class="hljs-type">int</span> first_slot = <span class="hljs-number">-1</span>, exact_idx = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; h-&gt;capacity; i++)&#123;<br>        <span class="hljs-keyword">if</span>(first_slot == <span class="hljs-number">-1</span> &amp;&amp; h-&gt;table[key][i] == <span class="hljs-number">-1</span>)&#123;<br>            first_slot = i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(h-&gt;table[key][i] == k)&#123;<br>            exact_idx = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(exact_idx == <span class="hljs-number">-1</span>)&#123;<br>        h-&gt;table[key][first_slot] = k;<br>        h-&gt;pos[key][first_slot] = pos_idx;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> rtv = h-&gt;pos[key][exact_idx];<br>        h-&gt;table[key][exact_idx] = <span class="hljs-number">-1</span>;<br>        h-&gt;pos[key][exact_idx] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> rtv;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">12000</span>];<br>    <span class="hljs-type">int</span> front;<br>    <span class="hljs-type">int</span> rear;<br>    <span class="hljs-type">int</span> size;<br>&#125; <span class="hljs-built_in">queue</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_queue</span><span class="hljs-params">(<span class="hljs-built_in">queue</span>* q)</span>&#123;<br>    q-&gt;front = <span class="hljs-number">0</span>;<br>    q-&gt;rear = <span class="hljs-number">0</span>;<br>    q-&gt;size = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-built_in">queue</span>* q, <span class="hljs-type">int</span> k)</span>&#123;<br>    q-&gt;arr[(q-&gt;rear)++] = k;<br>    <span class="hljs-keyword">if</span>(q-&gt;rear == <span class="hljs-number">12000</span>) q-&gt;rear = <span class="hljs-number">0</span>;<br>    q-&gt;size++;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">(<span class="hljs-built_in">queue</span>* q)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = q-&gt;arr[(q-&gt;front)++];<br>    <span class="hljs-keyword">if</span>(q-&gt;front == <span class="hljs-number">12000</span>) q-&gt;front = <span class="hljs-number">0</span>;<br>    q-&gt;size--;<br>    <span class="hljs-keyword">return</span> rtv;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_size</span><span class="hljs-params">(<span class="hljs-built_in">queue</span>* q)</span>&#123;<br>    <span class="hljs-keyword">return</span> q-&gt;size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, s, c;<br>    hash_table* h = (hash_table*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(hash_table));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;s, &amp;c);<br>    init_ht(h, s, c);<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">120</span>][<span class="hljs-number">120</span>][<span class="hljs-number">120</span>];<br>    <span class="hljs-type">int</span> now_idx[<span class="hljs-number">120</span>][<span class="hljs-number">120</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= i; k++)&#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[j][k][i]);<br>                <span class="hljs-comment">// printf(&quot;%d in (%d %d %d)\n&quot;, arr[j][k][i], j, k, i);</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            now_idx[i][j] = max(i, j);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">queue</span>* q = (<span class="hljs-built_in">queue</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>));<br>    init_queue(q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            push(q, i * n + j);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printf(&quot;size = %d\n&quot;, get_size(q));</span><br>    <span class="hljs-keyword">while</span>(get_size(q) != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> now = pop(q); <span class="hljs-type">int</span> now_x = now / n, now_y = now % n;<br>        <span class="hljs-type">int</span> rtv = query_ht(h, arr[now_x][now_y][now_idx[now_x][now_y]], now);<br>        <span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[now_x][now_y][now_idx[now_x][now_y]]);<br>            now_idx[now_x][now_y]++;<br>            now_idx[rtv / n][rtv % n]++;<br>            <span class="hljs-keyword">if</span>(now_idx[now_x][now_y] &lt; n) push(q, now);<br>            <span class="hljs-keyword">if</span>(now_idx[rtv / n][rtv % n] &lt; n) push(q, rtv);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(h);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50232. Convolution</title>
    <link href="/2023/07/17/judge_girl/50232.%20Convolution/"/>
    <url>/2023/07/17/judge_girl/50232.%20Convolution/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5 Used time: 4:18</p><p>照著給的公式寫就好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-comment">// #define min(a,b) ((a)&lt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    <span class="hljs-type">int</span> in[<span class="hljs-number">512</span>][<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> filter[<span class="hljs-number">128</span>][<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;in[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;filter[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - k; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - k; j++)&#123;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= k - <span class="hljs-number">1</span>; l++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt;= k - <span class="hljs-number">1</span>; s++)&#123;<br>                    ans += in[s + i][l + j] * filter[s][l];<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, ans, (j == n - k) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50233. Max-heap</title>
    <link href="/2023/07/17/judge_girl/50233.%20Max-heap/"/>
    <url>/2023/07/17/judge_girl/50233.%20Max-heap/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>看到RE就先把陣列開三倍大再說。因為今天初始化的時候<spanclass="math inline">\(N &lt;=10^6\)</span>，每筆query可以增加一個element，所以上限開要到<spanclass="math inline">\(N + M = 3 \times 10 ^6\)</span>。</p><p>然後也是照著刻就好，但沒修過DSA的人肯定會發瘋。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-comment">// #define min(a,b) ((a)&lt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> left(n) (2 * (n))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> right(n) (2 * (n) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> parent(n) ((n) / 2)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3000000</span>];<br>    <span class="hljs-type">int</span> n;<br>&#125; s_heap;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_largest</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> l = left(i), r = right(i);<br>    <span class="hljs-type">int</span> largest;<br>    <span class="hljs-keyword">if</span>(l &lt;= h-&gt;n &amp;&amp; h-&gt;arr[l] &gt; h-&gt;arr[i])&#123;<br>        largest = l;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        largest = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(r &lt;= h-&gt;n &amp;&amp; h-&gt;arr[r] &gt; h-&gt;arr[largest])&#123;<br>        largest = r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> largest;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">max_heapify</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> largest = get_largest(h, i);<br>    <span class="hljs-keyword">while</span>(largest != i)&#123;<br>        swap(&amp;(h-&gt;arr[i]), &amp;(h-&gt;arr[largest]));<br>        i = largest;<br>        largest = get_largest(h, i);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">build_max_heap</span><span class="hljs-params">(s_heap* h)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = (h-&gt;n / <span class="hljs-number">2</span>); i &gt;= <span class="hljs-number">1</span>; i--)&#123;<br>        max_heapify(h, i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">extract_max</span><span class="hljs-params">(s_heap* h)</span>&#123;<br>    <span class="hljs-keyword">if</span>(h-&gt;n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> max_num = h-&gt;arr[<span class="hljs-number">1</span>];<br>        h-&gt;arr[<span class="hljs-number">1</span>] = h-&gt;arr[h-&gt;n];<br>        h-&gt;n -= <span class="hljs-number">1</span>;<br>        max_heapify(h, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> max_num;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> key)</span>&#123;<br>    h-&gt;n += <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i = h-&gt;n;<br>    h-&gt;arr[i] = key;<br>    <span class="hljs-keyword">while</span>(i &gt; <span class="hljs-number">1</span> &amp;&amp; h-&gt;arr[parent(i)] &lt; h-&gt;arr[i])&#123;<br>        swap(&amp;(h-&gt;arr[i]), &amp;(h-&gt;arr[parent(i)]));<br>        i = parent(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    s_heap* h = (s_heap*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(s_heap));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h-&gt;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h-&gt;n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h-&gt;arr[i]);<br>    build_max_heap(h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h-&gt;n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, h-&gt;arr[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> q; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-type">int</span> rtv = extract_max(h);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, rtv);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            insert(h, q);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>implementation</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50234. Maximum Cubic</title>
    <link href="/2023/07/17/judge_girl/50234.%20Maximum%20Cubic/"/>
    <url>/2023/07/17/judge_girl/50234.%20Maximum%20Cubic/</url>
    
    <content type="html"><![CDATA[<p>難度：4.6/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> left(n) (2 * (n))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> right(n) (2 * (n) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> parent(n) ((n) / 2)</span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">1000005</span>];<br>    <span class="hljs-type">int</span> pos[<span class="hljs-number">1000005</span>];<br>    <span class="hljs-type">int</span> n;<br>&#125; s_heap;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">get_largest</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> l = left(i), r = right(i);<br>    <span class="hljs-type">int</span> largest;<br>    <span class="hljs-keyword">if</span>(l &lt;= h-&gt;n &amp;&amp; h-&gt;arr[l] &gt; h-&gt;arr[i])&#123;<br>        largest = l;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        largest = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(r &lt;= h-&gt;n &amp;&amp; h-&gt;arr[r] &gt; h-&gt;arr[largest])&#123;<br>        largest = r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> largest;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">max_heapify</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> largest = get_largest(h, i);<br>    <span class="hljs-keyword">while</span>(largest != i)&#123;<br>        swap(&amp;(h-&gt;arr[i]), &amp;(h-&gt;arr[largest]));<br>        swap(&amp;(h-&gt;pos[i]), &amp;(h-&gt;pos[largest]));<br>        i = largest;<br>        largest = get_largest(h, i);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">build_max_heap</span><span class="hljs-params">(s_heap* h)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = (h-&gt;n / <span class="hljs-number">2</span>); i &gt;= <span class="hljs-number">1</span>; i--)&#123;<br>        max_heapify(h, i);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">extract_max</span><span class="hljs-params">(s_heap* h)</span>&#123;<br>    <span class="hljs-keyword">if</span>(h-&gt;n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> max_num = h-&gt;arr[<span class="hljs-number">1</span>];<br>        h-&gt;arr[<span class="hljs-number">1</span>] = h-&gt;arr[h-&gt;n];<br> <br>        <span class="hljs-type">int</span> max_pos = h-&gt;pos[<span class="hljs-number">1</span>];<br>        h-&gt;pos[<span class="hljs-number">1</span>] = h-&gt;pos[h-&gt;n];<br> <br>        h-&gt;n -= <span class="hljs-number">1</span>;<br>        max_heapify(h, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> max_pos;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(s_heap* h, <span class="hljs-type">int</span> key, <span class="hljs-type">int</span> pos_key)</span>&#123;<br>    h-&gt;n += <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i = h-&gt;n;<br>    h-&gt;arr[i] = key;<br>    h-&gt;pos[i] = pos_key;<br>    <span class="hljs-keyword">while</span>(i &gt; <span class="hljs-number">1</span> &amp;&amp; h-&gt;arr[parent(i)] &lt; h-&gt;arr[i])&#123;<br>        swap(&amp;(h-&gt;arr[i]), &amp;(h-&gt;arr[parent(i)]));<br>        swap(&amp;(h-&gt;pos[i]), &amp;(h-&gt;pos[parent(i)]));<br>        i = parent(i);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, arr[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= i; k++)&#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    s_heap* h = (s_heap*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(s_heap));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            insert(h, arr[max(i, j)][i][j], max(i, j) * (n * n) + i * n + j);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span>(h-&gt;n != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> now_pos = extract_max(h);<br>        <span class="hljs-type">int</span> now_x = now_pos / (n * n);<br>        <span class="hljs-type">int</span> now_y = (now_pos % (n * n)) / (n);<br>        <span class="hljs-type">int</span> now_z = now_pos % n;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[now_x][now_y][now_z]);<br>        <span class="hljs-keyword">if</span>(now_x + <span class="hljs-number">1</span> &lt; n)&#123;<br>            insert(h, arr[now_x + <span class="hljs-number">1</span>][now_y][now_z], (now_x + <span class="hljs-number">1</span>) * (n * n) + now_y * n + now_z);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3d-array</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50235. Valid Variable Name</title>
    <link href="/2023/07/17/judge_girl/50235.%20Valid%20Variable%20Name/"/>
    <url>/2023/07/17/judge_girl/50235.%20Valid%20Variable%20Name/</url>
    
    <content type="html"><![CDATA[<p>難度：4.4/5</p><p>藥商為注意一下變數的scope，如果一直需要用到的話就要malloc。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_dig</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_alp</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> (c &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) || (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_uds</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(*s != <span class="hljs-string">&#x27;\0&#x27;</span>) cnt += (*s), s++;<br>    <span class="hljs-keyword">return</span> cnt % <span class="hljs-number">1000</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*s == <span class="hljs-string">&#x27;\0&#x27;</span> || is_dig(*s)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(*s != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(is_alp(*s) || is_dig(*s) || is_uds(*s)) s++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span>* table[<span class="hljs-number">1000</span>][<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">1000</span>][<span class="hljs-number">3</span>];<br>&#125; hash_table;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_table</span><span class="hljs-params">(hash_table *h)</span>&#123;<br>    <span class="hljs-built_in">memset</span>(h-&gt;cnt, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(h-&gt;cnt));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(hash_table *h, <span class="hljs-type">char</span> *s)</span>&#123;<br>    <span class="hljs-type">int</span> key = f(s);<br><br>    <span class="hljs-type">int</span> exact_idx = <span class="hljs-number">-1</span>, first_blank = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(first_blank == <span class="hljs-number">-1</span> &amp;&amp; h-&gt;cnt[key][i] == <span class="hljs-number">-1</span>)&#123;<br>            first_blank = i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(h-&gt;cnt[key][i] != <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(s, h-&gt;table[key][i]) == <span class="hljs-number">0</span>)&#123;<br>            exact_idx = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(exact_idx != <span class="hljs-number">-1</span>)&#123;<br>        h-&gt;cnt[key][exact_idx]++;<br>        <span class="hljs-keyword">return</span> h-&gt;cnt[key][exact_idx];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">char</span>* new_str = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">22</span>);<br>        <span class="hljs-built_in">strcpy</span>(new_str, s);<br>        h-&gt;table[key][first_blank] = new_str;<br>        h-&gt;cnt[key][first_blank] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">22</span>];<br>    hash_table* h = (hash_table*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(hash_table));<br>    init_table(h);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s) != EOF)&#123;<br>        <span class="hljs-keyword">if</span>(!is_valid(s)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> rtv = insert(h, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, s, rtv);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>memory</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50236. String Merge</title>
    <link href="/2023/07/17/judge_girl/50236.%20String%20Merge/"/>
    <url>/2023/07/17/judge_girl/50236.%20String%20Merge/</url>
    
    <content type="html"><![CDATA[<p>難度：2.8/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mergeString.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mergeString</span><span class="hljs-params">(<span class="hljs-type">char</span>** p, <span class="hljs-type">char</span> l[<span class="hljs-number">26</span>], <span class="hljs-type">char</span>* a)</span>&#123;<br>    <span class="hljs-type">int</span> rank[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) rank[l[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;<br><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p[n] != <span class="hljs-literal">NULL</span>) n++;<br><br>    <span class="hljs-type">int</span> a_ptr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> max_idx = <span class="hljs-number">-1</span>, max_pri = <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">char</span> ch = *(p[i]);<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(rank[ch - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; max_pri)&#123;<br>                max_idx = i, max_pri = rank[ch - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max_idx == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            a[a_ptr++] = *(p[max_idx]);<br>            p[max_idx]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50237. String Cubic Pairing Task with Hash Table</title>
    <link href="/2023/07/17/judge_girl/50237.%20String%20Cubic%20Pairing%20Task%20with%20Hash%20Table/"/>
    <url>/2023/07/17/judge_girl/50237.%20String%20Cubic%20Pairing%20Task%20with%20Hash%20Table/</url>
    
    <content type="html"><![CDATA[<p>難度：4.7/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> left(x) (2 * (x))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> right(x) (2 * (x) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> parent(x) ((x) / 2)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(x, y) &#123;int t = (x); (x) = (y); (y) = t;&#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(x, y) ((x) &gt; (y) ? (x) : (y))</span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> s[<span class="hljs-number">6</span>];<br>&#125; <span class="hljs-built_in">string</span>;<br> <br><span class="hljs-type">int</span> n, k, c = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">string</span> arr[<span class="hljs-number">100</span> * <span class="hljs-number">100</span> * <span class="hljs-number">100</span>];<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_id</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span>&#123; <span class="hljs-keyword">return</span> i * <span class="hljs-number">10000</span> + j * <span class="hljs-number">100</span> + k;&#125;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> pos[<span class="hljs-number">100</span> * <span class="hljs-number">100</span>][<span class="hljs-number">10</span>];<br>&#125; hash_table;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str.s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        ans = (ans * <span class="hljs-number">29</span> + (str.s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>)) % k;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans % k;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(hash_table* h, <span class="hljs-built_in">string</span> str, <span class="hljs-type">int</span> hash_val)</span>&#123;<br>    <span class="hljs-type">int</span> now_pos;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)&#123;<br>        now_pos = h-&gt;pos[hash_val][i];<br>        <span class="hljs-keyword">if</span>(now_pos == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(arr[now_pos].s, str.s) == <span class="hljs-number">0</span>)&#123;<br>            h-&gt;pos[hash_val][i] = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">return</span> now_pos;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(hash_table* h, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> hash_val)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)&#123;<br>        <span class="hljs-keyword">if</span>(h-&gt;pos[hash_val][i] == <span class="hljs-number">-1</span>)&#123;<br>            h-&gt;pos[hash_val][i] = p;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(hash_table* h, <span class="hljs-type">int</span> pos)</span>&#123;<br>    <span class="hljs-comment">// printf(&quot;querying pos %d, %s\n&quot;, pos, arr[pos].s);</span><br>    <span class="hljs-type">int</span> hash_val = f(arr[pos]);<br>    <span class="hljs-type">int</span> rtv = find(h, arr[pos], hash_val);<br> <br>    <span class="hljs-keyword">if</span>(rtv != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, arr[pos].s);<br>        <span class="hljs-keyword">if</span>(pos / <span class="hljs-number">10000</span> + <span class="hljs-number">1</span> &lt; n) query(h, pos + <span class="hljs-number">10000</span>);<br>        <span class="hljs-keyword">if</span>(rtv / <span class="hljs-number">10000</span> + <span class="hljs-number">1</span> &lt; n)query(h, rtv + <span class="hljs-number">10000</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        insert(h, pos, hash_val);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    k = n * n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= i; k++)&#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, arr[get_id(i, j, k)].s);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    hash_table* h = (hash_table*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(hash_table));<br>    <span class="hljs-built_in">memset</span>(h-&gt;pos, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(h-&gt;pos));<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            query(h, get_id(max(i, j), i, j));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3d-array</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50238. Sparse Matrix Multiplication</title>
    <link href="/2023/07/17/judge_girl/50238.%20Sparse%20Matrix%20Multiplication/"/>
    <url>/2023/07/17/judge_girl/50238.%20Sparse%20Matrix%20Multiplication/</url>
    
    <content type="html"><![CDATA[<p>難度：2.8/5 Used Time: 7:42</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spmm.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mult</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> b[])</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[i] != <span class="hljs-number">-1</span> &amp;&amp; b[j] != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; b[j]) i += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; b[j]) j += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans += a[i + <span class="hljs-number">1</span>] * b[j + <span class="hljs-number">1</span>];<br>            i += <span class="hljs-number">2</span>, j += <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sparseMatrixMult</span><span class="hljs-params">(<span class="hljs-type">int</span>** A, <span class="hljs-type">int</span>** B)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; A[i] != <span class="hljs-literal">NULL</span>; i++)&#123;<br>        <span class="hljs-type">int</span> last_b = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; B[j] != <span class="hljs-literal">NULL</span>; j++)&#123;<br>            <span class="hljs-type">int</span> ans = mult(A[i], B[j]);<br>            <span class="hljs-keyword">if</span>(ans != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, A[i][<span class="hljs-number">0</span>], B[j][<span class="hljs-number">0</span>], ans);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50239. String Fusion</title>
    <link href="/2023/07/17/judge_girl/50239.%20String%20Fusion/"/>
    <url>/2023/07/17/judge_girl/50239.%20String%20Fusion/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">2005</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><br>    <span class="hljs-type">int</span> max_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-type">char</span> now_str[<span class="hljs-number">64</span>]; <span class="hljs-type">int</span> loc;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, now_str, &amp;loc);<br>        <span class="hljs-type">int</span> len_str = <span class="hljs-built_in">strlen</span>(now_str);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len_str; j++)&#123;<br>            <span class="hljs-keyword">if</span>(s[j + loc] == <span class="hljs-string">&#x27;\0&#x27;</span>) s[j + loc] = now_str[j];<br>            <span class="hljs-keyword">else</span>&#123;<br>                s[j + loc] = (<span class="hljs-type">char</span>)(((<span class="hljs-type">int</span>)s[j + loc] + (<span class="hljs-type">int</span>)now_str[j]) / <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br><br>        max_len = max(max_len, loc + len_str);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;\0&#x27;</span>) s[i] = <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50223. Shortest Distance</title>
    <link href="/2023/07/17/judge_girl/50223.%20Shortest%20Distance/"/>
    <url>/2023/07/17/judge_girl/50223.%20Shortest%20Distance/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><p>我想了30分鐘...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> w, a, b, c, d, e, ans;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;w, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);<br>    <span class="hljs-keyword">if</span>(b != <span class="hljs-number">0</span>)&#123;<br>        ans = w * w + (a + b + c + <span class="hljs-number">2</span> * d + <span class="hljs-number">2</span> * e + <span class="hljs-number">2</span>) * (a + b + c+ <span class="hljs-number">2</span> * d + <span class="hljs-number">2</span> * e + <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> m = (d &gt; e) ? d : e;<br>        ans = w * w + (a + c + <span class="hljs-number">2</span> * m + <span class="hljs-number">2</span>) * (a + c + <span class="hljs-number">2</span> * m + <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50240. Cubic Tower and String</title>
    <link href="/2023/07/17/judge_girl/50240.%20Cubic%20Tower%20and%20String/"/>
    <url>/2023/07/17/judge_girl/50240.%20Cubic%20Tower%20and%20String/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>這種tower類型的題目，最重要的是要怎麼設計你的3darray，讓你找到你這一次要消掉的東西的時候，可以用<spanclass="math inline">\(O(1)\)</span>找到你要insert下一個的地方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> left(n) (2 * (n))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> right(n) (2 * (n) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> parent(n) ((n) / 2)</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> tower[<span class="hljs-number">102</span> * <span class="hljs-number">102</span> * <span class="hljs-number">102</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span>&#123;<br>    <span class="hljs-type">int</span> t = *a;<br>    *a = *b;<br>    *b = t;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_id</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span>&#123;<br>    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">102</span> * <span class="hljs-number">102</span>) + y * (<span class="hljs-number">102</span>) + z;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cmp_str_id</span><span class="hljs-params">(<span class="hljs-type">int</span> id1, <span class="hljs-type">int</span> id2)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(&amp;(tower[id1]), &amp;(tower[id2]));<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10050</span>];<br>    <span class="hljs-type">int</span> size;<br>&#125; heap;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_largest</span><span class="hljs-params">(heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> l = left(i);<br>    <span class="hljs-type">int</span> r = right(i);<br>    <span class="hljs-type">int</span> largest;<br>    <span class="hljs-keyword">if</span>(l &lt;= h-&gt;size &amp;&amp; cmp_str_id(h-&gt;a[l], h-&gt;a[i]) &gt; <span class="hljs-number">0</span>)&#123;<br>        largest = l;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        largest = i;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(r &lt;= h-&gt;size &amp;&amp; cmp_str_id(h-&gt;a[r], h-&gt;a[largest]) &gt; <span class="hljs-number">0</span>)&#123;<br>        largest = r;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> largest;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">max_heapify</span><span class="hljs-params">(heap* h, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> largest = get_largest(h, i);<br>    <span class="hljs-keyword">while</span>(largest != i)&#123;<br>        swap(&amp;(h-&gt;a[i]), &amp;(h-&gt;a[largest]));<br>        i = largest;<br>        largest = get_largest(h, i);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">build_max_heap</span><span class="hljs-params">(heap* h)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = (h-&gt;size / <span class="hljs-number">2</span>); i &gt;= <span class="hljs-number">1</span>; i--)&#123;<br>        max_heapify(h, i);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">extract_max</span><span class="hljs-params">(heap* h)</span>&#123;<br>    <span class="hljs-keyword">if</span>(h-&gt;size &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> max_num = h-&gt;a[<span class="hljs-number">1</span>];<br>    h-&gt;a[<span class="hljs-number">1</span>] = h-&gt;a[h-&gt;size];<br>    h-&gt;size -= <span class="hljs-number">1</span>;<br>    max_heapify(h, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> max_num;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(heap* h, <span class="hljs-type">int</span> key)</span>&#123;<br>    h-&gt;size += <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i = h-&gt;size;<br>    h-&gt;a[i] = key;<br>    <span class="hljs-keyword">while</span>(i &gt; <span class="hljs-number">1</span> &amp;&amp; cmp_str_id(h-&gt;a[parent(i)], h-&gt;a[i]) &lt; <span class="hljs-number">0</span>)&#123;<br>        swap(&amp;(h-&gt;a[i]), &amp;(h-&gt;a[parent(i)]));<br>        i = parent(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><br>    getchar();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)&#123;<br>                <span class="hljs-type">int</span> id = get_id(j, k, i);<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;tower[id]);<br>                <span class="hljs-keyword">if</span>(tower[id] == <span class="hljs-string">&#x27;0&#x27;</span>) tower[id] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br>            getchar();<br>        &#125;<br>    &#125;<br><br>    heap* h = (heap*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(heap)); h-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-type">int</span> id = get_id(i, j, <span class="hljs-number">0</span>);<br>            insert(h, id);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(h-&gt;size != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> max_id = extract_max(h);<br>        <span class="hljs-type">int</span> len_str = <span class="hljs-built_in">strlen</span>(&amp;(tower[max_id]));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, &amp;(tower[max_id]));<br>        <span class="hljs-keyword">if</span>(tower[max_id + len_str + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            insert(h, max_id + len_str + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(h);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2d-array</tag>
      
      <tag>string</tag>
      
      <tag>IMPORTANT</tag>
      
      <tag>3d-array</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50241. Convert a uint64_t array</title>
    <link href="/2023/07/17/judge_girl/50241.%20Convert%20a%20uint64_t%20array/"/>
    <url>/2023/07/17/judge_girl/50241.%20Convert%20a%20uint64_t%20array/</url>
    
    <content type="html"><![CDATA[<p>難度：2/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deal</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++)&#123;<br>        <span class="hljs-type">uint64_t</span> now = (n &gt;&gt; (<span class="hljs-number">5</span> * i)) &amp; <span class="hljs-number">31</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, now + <span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-type">uint64_t</span> num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;num);<br>        deal(num);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50242. Parse a boolean expression</title>
    <link href="/2023/07/17/judge_girl/50242.%20Parse%20a%20boolean%20expression/"/>
    <url>/2023/07/17/judge_girl/50242.%20Parse%20a%20boolean%20expression/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>Used Time 31:34</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">exps</span>&#123;</span>NOT, AND, OR, L_BR, R_BR, TRUE, FALSE&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> is_valid;<br>    <span class="hljs-type">int</span> end_idx;<br>&#125; info;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><br>info <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-comment">// for(int i = l; i &lt; n; i++) printf(&quot;%d &quot;, arr[i]); printf(&quot;\n&quot;);</span><br><br>    <span class="hljs-keyword">if</span>(l == n) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span>(arr[l] == AND || arr[l] == OR || arr[l] == R_BR) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">if</span>(arr[l] == NOT)&#123;<br>        info next = solve(arr, l + <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">if</span>(next.is_valid) <span class="hljs-keyword">return</span> (info) &#123;!next.val, <span class="hljs-number">1</span>, next.end_idx&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[l] == TRUE || arr[l] == FALSE)&#123;<br>        <span class="hljs-keyword">return</span> (info) &#123;arr[l] == TRUE, <span class="hljs-number">1</span>, l + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[l] == L_BR)&#123;<br>        info left = solve(arr, l + <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">if</span>(!left.is_valid) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-type">int</span> op = arr[left.end_idx];<br><br>        info right = solve(arr, left.end_idx + <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">if</span>(!right.is_valid) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(right.end_idx == n || arr[right.end_idx] != R_BR) <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-keyword">if</span>(op == AND) <span class="hljs-keyword">return</span> (info) &#123;left.val &amp;&amp; right.val, <span class="hljs-number">1</span>, right.end_idx + <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == OR) <span class="hljs-keyword">return</span> (info) &#123;left.val || right.val, <span class="hljs-number">1</span>, right.end_idx + <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (info) &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">2005</span>]; <span class="hljs-type">int</span> arr[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">while</span>(fgets(s, <span class="hljs-number">2005</span>, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-type">char</span>* token = strtok(s, <span class="hljs-string">&quot; \n&quot;</span>);<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> is_valid = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(token != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;!&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = NOT;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;&amp;&amp;&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = AND;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;||&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = OR;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;(&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = L_BR;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;)&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = R_BR;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;true&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = TRUE;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(token, <span class="hljs-string">&quot;false&quot;</span>) == <span class="hljs-number">0</span>) arr[n++] = FALSE;<br>            <span class="hljs-keyword">else</span>&#123;<br>                is_valid = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            token = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; \n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(is_valid)&#123;<br>            info ans = solve(arr, <span class="hljs-number">0</span>, n);<br>            <span class="hljs-keyword">if</span>(ans.is_valid &amp;&amp; ans.end_idx == n)&#123;<br>                <span class="hljs-keyword">if</span>(ans.val) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;true\n&quot;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;false\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50243. Friend Cover</title>
    <link href="/2023/07/17/judge_girl/50243.%20Friend%20Cover/"/>
    <url>/2023/07/17/judge_girl/50243.%20Friend%20Cover/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>Used Time: 11:31</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[<span class="hljs-number">512</span>][<span class="hljs-number">2</span>];<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size)</span>&#123;<br>    <span class="hljs-type">int</span> have[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr_size; i++) have[arr[i]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!have[f[i][<span class="hljs-number">0</span>]] &amp;&amp; !have[f[i][<span class="hljs-number">1</span>]]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> min_num = <span class="hljs-number">128</span>;<br><span class="hljs-type">int</span> min_arr[<span class="hljs-number">64</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> arr_size, <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr_size &gt;= min_num) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(now_idx == n)&#123;<br>        <span class="hljs-keyword">if</span>(!check(arr, arr_size)) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            min_num = arr_size;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr_size; i++) min_arr[i] = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// choose</span><br>        arr[arr_size] = now_idx;<br>        dfs(arr, arr_size + <span class="hljs-number">1</span>, now_idx + <span class="hljs-number">1</span>, n);<br> <br>        <span class="hljs-comment">// no choose</span><br>        arr[arr_size] = <span class="hljs-number">0</span>;<br>        dfs(arr, arr_size, now_idx + <span class="hljs-number">1</span>, n);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;f[i][<span class="hljs-number">0</span>], &amp;f[i][<span class="hljs-number">1</span>]);<br>    &#125;<br> <br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">64</span>];<br>    dfs(arr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; min_num; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50244. Connected Components in a Tower</title>
    <link href="/2023/07/17/judge_girl/50244.%20Connected%20Components%20in%20a%20Tower/"/>
    <url>/2023/07/17/judge_girl/50244.%20Connected%20Components%20in%20a%20Tower/</url>
    
    <content type="html"><![CDATA[<p>難度：3.9/5</p><p>就三維dfs，然後is_valid寫好就會過了。</p><p>Used Time: 16:00</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?)</span><br> <br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>][<span class="hljs-number">80</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>][<span class="hljs-number">80</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <br><span class="hljs-type">int</span> dx[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dz[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!(x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; n &amp;&amp; z &gt;= <span class="hljs-number">0</span> &amp;&amp; z &lt; n)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> y &lt;= x &amp;&amp; z &lt;= x;<br>&#125;<br> <br><span class="hljs-type">int</span> max_cnt = <span class="hljs-number">0</span>, max_num = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> now_cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span>&#123;<br>    vis[x][y][z] = <span class="hljs-number">1</span>;<br>    now_cnt++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;<br>        <span class="hljs-type">int</span> now_x = x + dx[i], now_y = y + dy[i], now_z = z + dz[i];<br>        <span class="hljs-keyword">if</span>(!is_valid(now_x, now_y, now_z)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(vis[now_x][now_y][now_z]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(arr[x][y][z] != arr[now_x][now_y][now_z]) <span class="hljs-keyword">continue</span>;<br>        dfs(now_x, now_y, now_z);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= i; k++)&#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][j][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= i; k++)&#123;<br>                <span class="hljs-keyword">if</span>(vis[i][j][k] == <span class="hljs-number">0</span>)&#123;<br>                    now_cnt = <span class="hljs-number">0</span>;<br>                    dfs(i, j, k);<br>                    <span class="hljs-keyword">if</span>(now_cnt &gt; max_cnt || (now_cnt == max_cnt &amp;&amp; arr[i][j][k] &gt; max_num))&#123;<br>                        max_cnt = now_cnt, max_num = arr[i][j][k];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, max_num, max_cnt);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50245. Square tiling</title>
    <link href="/2023/07/17/judge_girl/50245.%20Square%20tiling/"/>
    <url>/2023/07/17/judge_girl/50245.%20Square%20tiling/</url>
    
    <content type="html"><![CDATA[<p>難度：4.8/5 Used Time: 16:22</p><p>極度要注意，這種拿排列組合的方式「不會按照字典序」，「不會按照字典序」，「不會按照字典序」，所以要換下面的遞迴方法。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> now_idx, <span class="hljs-type">int</span> max_idx)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == max_idx)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_idx; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = now_idx; i &lt; max_idx; i++)&#123;<br>            swap(arr[now_idx], arr[i]);<br>            dfs(arr, now_idx + <span class="hljs-number">1</span>, max_idx);<br>            swap(arr[now_idx], arr[i]);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(a,b) &#123;int t = (a); (a) = (b); (b) = t;&#125;</span><br><span class="hljs-comment">// void swap(int* a, int *b)&#123;</span><br><span class="hljs-comment">//     int t = *a;</span><br><span class="hljs-comment">//     *a = *b;</span><br><span class="hljs-comment">//     *b = t;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> l, t, r, b;<br>&#125; square;<br><br><span class="hljs-type">int</span> n;<br>square s[<span class="hljs-number">36</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(s[arr[i * n + j]].r != s[arr[i * n + j + <span class="hljs-number">1</span>]].l)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[arr[i * n + j]].b != s[arr[(i + <span class="hljs-number">1</span>) * n + j]].t)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, arr[i * n + j], (j == n - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> used[], <span class="hljs-type">int</span> now_idx)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_idx == n * n)&#123;<br>        <span class="hljs-keyword">if</span>(check(arr))&#123;<br>            print(arr);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(now_idx % n != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(s[arr[now_idx - <span class="hljs-number">1</span>]].r != s[i].l) <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(now_idx &gt;= n)&#123;<br>                    <span class="hljs-keyword">if</span>(s[arr[now_idx - n]].b != s[i].t) <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                used[i] = <span class="hljs-number">1</span>, arr[now_idx] = i;<br>                <span class="hljs-type">int</span> rtv = dfs(arr, used, now_idx + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(rtv) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                used[i] = <span class="hljs-number">0</span>; arr[now_idx] = <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;s[i].l, &amp;s[i].t, &amp;s[i].r, &amp;s[i].b);<br>        <span class="hljs-type">int</span> arr[<span class="hljs-number">36</span>] = &#123;<span class="hljs-number">0</span>&#125;, used[<span class="hljs-number">36</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-type">int</span> rtv = dfs(arr, used, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(!rtv) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no solution\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50246. Minimum sum of squares</title>
    <link href="/2023/07/17/judge_girl/50246.%20Minimum%20sum%20of%20squares/"/>
    <url>/2023/07/17/judge_girl/50246.%20Minimum%20sum%20of%20squares/</url>
    
    <content type="html"><![CDATA[<p>難度：4.9/5 Used Time: 15:20</p><p>這題時間壓很緊，要用多種剪枝方法。</p><ol type="1"><li><p>最基本的就是在遞迴過程中一直紀錄現在的和平方，加上一個新的數字進set的時候可以將原本的那個set的數字從現在的和平方減掉，把他放進數字set之後再算出新的和平方（所以過程中也要維護每一個setsum），接著在34行就可以觀察與現在的最小值，如果已經超過的話減掉。</p></li><li><p>60行，把陣列先由大到小qsort過，這樣在遞迴過程中會比較有機會剪到枝，因為比較容易碰到<code>min_sum</code>。（&gt;1s-&gt; 342ms）</p></li><li><p>41, 42,51行。如果我們看到我們將一個數字加進一個空set，我們就將他定為最後一個set。比如我們想將<spanclass="math inline">\(3\)</span>加進<span class="math inline">\(\{ \{ 1,2 \} , \{ 4 \} , \{ \} , \{ \} \}\)</span>中，那把<spanclass="math inline">\(3\)</span>加進第三個set跟加進第四個set的意義一樣，所以當我們加入了這個剪枝後，我們可以確保所有元素都會靠前面放進set中（不會出現<spanclass="math inline">\(\{ \{ 1, 2 \} , \{ \} , \{ \} , \{ 3, 4 \}\}\)</span>的排列方法），那把<spanclass="math inline">\(3\)</span>加進第三個set跟加進第四個set的意義一樣，所以當我們加入了，嘗試放進空集合的次數只有1次。（342ms-&gt; 100ms）</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swap(a,b) &#123;uint64_t t = (a); (a) = (b); (b) = t;&#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint64_t</span>*)b - *(<span class="hljs-type">uint64_t</span>*)a;<br>&#125;<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">uint64_t</span> nums[<span class="hljs-number">25</span>];<br><span class="hljs-type">uint64_t</span> sets[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];<br><span class="hljs-type">uint64_t</span> sums[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">uint64_t</span> sq_sums[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> len[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">uint64_t</span> min_sum = ULLONG_MAX;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">get_sum</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> sets[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>], <span class="hljs-type">int</span> len[<span class="hljs-number">25</span>])</span>&#123;<br>    <span class="hljs-type">uint64_t</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-type">uint64_t</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len[i]; j++) s += sets[i][j];<br>        ans += (s * s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> nums_idx, <span class="hljs-type">uint64_t</span> sets[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>], <span class="hljs-type">int</span> len[<span class="hljs-number">25</span>], <span class="hljs-type">uint64_t</span> sums[<span class="hljs-number">25</span>], <span class="hljs-type">uint64_t</span> now_sq_sum)</span>&#123;<br>    <span class="hljs-keyword">if</span>(now_sq_sum &gt;= min_sum) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(nums_idx == n)&#123;<br>        min_sum = min(min_sum, now_sq_sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(len[i] == <span class="hljs-number">0</span>) flag = <span class="hljs-number">0</span>;<br><br>            sets[i][len[i]] = nums[nums_idx];<br><br>            <span class="hljs-type">uint64_t</span> temp = now_sq_sum - (sums[i] * sums[i]);<br>            sums[i] += nums[nums_idx], len[i]++;<br>            dfs(nums_idx + <span class="hljs-number">1</span>, sets, len, sums, temp + (sums[i] * sums[i]));<br>            sums[i] -= nums[nums_idx], len[i]--;<br><br>            <span class="hljs-keyword">if</span>(!flag) <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;nums[i]);<br>    qsort(nums, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>), cmp);<br>    dfs(<span class="hljs-number">0</span>, sets, len, sums, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, min_sum);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>IMPORTANT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50248. Evaluate a Boolean Expression Tree</title>
    <link href="/2023/07/17/judge_girl/50248.%20Evaluate%20a%20Boolean%20Expression%20Tree/"/>
    <url>/2023/07/17/judge_girl/50248.%20Evaluate%20a%20Boolean%20Expression%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：3.5/5 Used Time: 7:07</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;evaluateTree.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(Node* root, <span class="hljs-type">int</span> *values)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root-&gt;val[<span class="hljs-number">0</span>] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; root-&gt;val[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> values[root-&gt;val[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;val[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;!&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> !(solve(root-&gt;left, values));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;val[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;&amp;&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> (solve(root-&gt;left, values) &amp;&amp; solve(root-&gt;right, values));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;val[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;|&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> (solve(root-&gt;left, values) || solve(root-&gt;right, values));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">evaluateTree</span><span class="hljs-params">(Node *root, <span class="hljs-type">int</span> *values)</span>&#123;<br>    <span class="hljs-type">int</span> rtv = solve(root, values);<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> UPPER</span><br>    <span class="hljs-keyword">if</span>(rtv) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TRUE\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FALSE\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOWER</span><br>    <span class="hljs-keyword">if</span>(rtv) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;true\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;false\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50249. Switch WAV File Channel</title>
    <link href="/2023/07/17/judge_girl/50249.%20Switch%20WAV%20File%20Channel/"/>
    <url>/2023/07/17/judge_girl/50249.%20Switch%20WAV%20File%20Channel/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><p>34, 35行的min, max記得寫，不然他會抓到太多bytes。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">rev</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">uint8_t</span> t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">4</span>)&#123;<br>        t = arr[i]; arr[i] = arr[i + <span class="hljs-number">2</span>]; arr[i + <span class="hljs-number">2</span>] = t;<br>        t = arr[i + <span class="hljs-number">1</span>]; arr[i + <span class="hljs-number">1</span>] = arr[i + <span class="hljs-number">3</span>]; arr[i + <span class="hljs-number">3</span>] = t;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">copy_header</span><span class="hljs-params">(FILE* in, FILE* out)</span>&#123;<br>    fseek(in, <span class="hljs-number">0</span>, SEEK_SET);<br>    fseek(out, <span class="hljs-number">0</span>, SEEK_SET);<br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">44</span>];<br>    fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">44</span>, in);<br>    fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">44</span>, out);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(FILE* in, FILE* out, <span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-type">int32_t</span> n, data_rate;<br>    copy_header(in, out);<br> <br>    fseek(in, <span class="hljs-number">28</span>, SEEK_SET); fread(&amp;data_rate, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int32_t</span>), <span class="hljs-number">1</span>, in);<br>    fseek(in, <span class="hljs-number">40</span>, SEEK_SET); fread(&amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int32_t</span>), <span class="hljs-number">1</span>, in);<br> <br>    fseek(in, <span class="hljs-number">44</span>, SEEK_SET); fseek(out, <span class="hljs-number">44</span>, SEEK_SET);<br>    <span class="hljs-type">int</span> rev_n = k * data_rate, ori_n = n - rev_n;<br>    rev_n = min(n, rev_n);<br>    ori_n = max(<span class="hljs-number">0</span>, ori_n);<br> <br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">8192</span>];<br>    <span class="hljs-keyword">while</span>(rev_n &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> now_n = min(<span class="hljs-number">8192</span>, rev_n);<br>        fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), now_n, in);<br>        rev(arr, now_n);<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), now_n, out);<br>        rev_n -= now_n;<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span>(ori_n &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> now_n = min(<span class="hljs-number">8192</span>, ori_n);<br>        fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), now_n, in);<br>        fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), now_n, out);<br>        ori_n -= now_n;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> in_name[<span class="hljs-number">128</span>], out_name[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %d&quot;</span>, in_name, out_name, &amp;k);<br> <br>    FILE* in = fopen(in_name, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* out = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br>    solve(in, out, k);<br>    fclose(in);<br>    fclose(out);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50250. Huffman Coding</title>
    <link href="/2023/07/17/judge_girl/50250.%20Huffman%20Coding/"/>
    <url>/2023/07/17/judge_girl/50250.%20Huffman%20Coding/</url>
    
    <content type="html"><![CDATA[<p>難度：5/5</p><p>用助教的方法，每一步都qsort()一遍的話，會TLE，所以在合併樹的時候要insertion進去才不會耗太多時間。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;huffmanTree.h&quot;</span></span><br> <br><span class="hljs-comment">// typedef struct Node &#123;</span><br><span class="hljs-comment">//     char symbol[SYM_MAX_LEN];</span><br><span class="hljs-comment">//     int frequency;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125; Node;</span><br> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> Node* <span class="hljs-title function_">new_node</span><span class="hljs-params">(<span class="hljs-type">int</span> f, Node* l, Node* r)</span>&#123;<br>    Node* n = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    n-&gt;frequency = f;<br>    n-&gt;left = l;<br>    n-&gt;right = r;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* aa, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* bb)</span>&#123; <span class="hljs-comment">// a &lt; b than 1</span><br>    Node* a = *(Node**)aa;<br>    Node* b = *(Node**)bb;<br>    <span class="hljs-keyword">if</span>(a-&gt;frequency != b-&gt;frequency) <span class="hljs-keyword">return</span> a-&gt;frequency &gt; b-&gt;frequency ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(a-&gt;symbol, b-&gt;symbol);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">rev_cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> -cmp(a, b);<br>&#125;<br> <br>Node* <span class="hljs-title function_">buildHuffmanTree</span><span class="hljs-params">(<span class="hljs-type">char</span>* s[SYM_MAX_NUM], <span class="hljs-type">int</span> n)</span>&#123;<br>    Node* arr[<span class="hljs-number">100000</span>]; <span class="hljs-type">int</span> len_arr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len_arr; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(s[i], arr[j]-&gt;symbol) == <span class="hljs-number">0</span>)&#123;<br>                idx = j; <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">-1</span>)&#123;<br>            Node* n = new_node(<span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-built_in">strcpy</span>(n-&gt;symbol, s[i]);<br>            arr[len_arr++] = n;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            arr[idx]-&gt;frequency += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br> <br>    qsort(arr, len_arr, <span class="hljs-keyword">sizeof</span>(Node*), rev_cmp);<br>    <span class="hljs-keyword">while</span>(len_arr &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// for(int i = 0; i &lt; len_arr; i++) printf(&quot;%s %d, &quot;, arr[i]-&gt;symbol, arr[i]-&gt;frequency); printf(&quot;\n&quot;);</span><br> <br>        Node* temp = new_node(arr[len_arr - <span class="hljs-number">2</span>]-&gt;frequency + arr[len_arr - <span class="hljs-number">1</span>]-&gt;frequency,<br>            arr[len_arr - <span class="hljs-number">2</span>], arr[len_arr - <span class="hljs-number">1</span>]);<br> <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(arr[len_arr - <span class="hljs-number">2</span>]-&gt;symbol, arr[len_arr - <span class="hljs-number">1</span>]-&gt;symbol) &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">strcpy</span>(temp-&gt;symbol, arr[len_arr - <span class="hljs-number">2</span>]-&gt;symbol);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">strcpy</span>(temp-&gt;symbol, arr[len_arr - <span class="hljs-number">1</span>]-&gt;symbol);<br> <br>        <span class="hljs-comment">// printf(&quot;merging %s %d, %s %d\n&quot;, arr[len_arr - 2]-&gt;symbol, arr[len_arr - 2]-&gt;frequency, arr[len_arr - 1]-&gt;symbol, arr[len_arr - 1]-&gt;frequency);</span><br>        <span class="hljs-comment">// printf(&quot;get %s %d\n&quot;, temp-&gt;symbol, temp-&gt;frequency);</span><br> <br>        <span class="hljs-type">int</span> insert_idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len_arr - <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(cmp(&amp;arr[i], &amp;temp) &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span>&#123;<br>                insert_idx = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len_arr - <span class="hljs-number">2</span>; i &gt; insert_idx; i--) arr[i] = arr[i - <span class="hljs-number">1</span>];<br>        arr[insert_idx] = temp;<br> <br>        len_arr--;<br>        <span class="hljs-comment">// for(int i = 0; i &lt; len_arr; i++) printf(&quot;%s %d, &quot;, arr[i]-&gt;symbol, arr[i]-&gt;frequency); printf(&quot;\n&quot;);</span><br>        <span class="hljs-comment">// printf(&quot;====================================================\n&quot;);</span><br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50252. Remove Vocals from WAV File</title>
    <link href="/2023/07/17/judge_girl/50252.%20Remove%20Vocals%20from%20WAV%20File/"/>
    <url>/2023/07/17/judge_girl/50252.%20Remove%20Vocals%20from%20WAV%20File/</url>
    
    <content type="html"><![CDATA[<p>難度：4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">copy_header</span><span class="hljs-params">(FILE* audio, FILE* res)</span>&#123;<br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">44</span>];<br>    fseek(audio, <span class="hljs-number">0</span>, SEEK_SET); fseek(res, <span class="hljs-number">0</span>, SEEK_SET);<br>    fread(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">44</span>, audio);<br>    fwrite(arr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>), <span class="hljs-number">44</span>, res);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(FILE *audio, FILE *vocal, FILE *res)</span>&#123;<br>    copy_header(audio, res);<br> <br>    fseek(audio, <span class="hljs-number">44</span>, SEEK_SET);<br>    fseek(vocal, <span class="hljs-number">44</span>, SEEK_SET);<br>    fseek(res, <span class="hljs-number">44</span>, SEEK_SET);<br>    <span class="hljs-type">uint16_t</span> a[<span class="hljs-number">4096</span>], v[<span class="hljs-number">4096</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> n = fread(a, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>), <span class="hljs-number">4096</span>, audio);<br>        fread(v, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>), <span class="hljs-number">4096</span>, vocal);<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            a[i] -= v[i];<br>        &#125;<br> <br>        fwrite(a, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>), n, res);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> in_name_1[<span class="hljs-number">128</span>], in_name_2[<span class="hljs-number">128</span>], out_name[<span class="hljs-number">128</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s %s&quot;</span>, in_name_1, in_name_2, out_name);<br>    FILE* audio = fopen(in_name_1, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* vocal = fopen(in_name_2, <span class="hljs-string">&quot;rb&quot;</span>);<br>    FILE* res = fopen(out_name, <span class="hljs-string">&quot;wb&quot;</span>);<br> <br>    solve(audio, vocal, res);<br> <br>    fclose(audio);<br>    fclose(vocal);<br>    fclose(res);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bit</tag>
      
      <tag>file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50247. Build a Boolean Expression Tree</title>
    <link href="/2023/07/17/judge_girl/50247.%20Build%20a%20Boolean%20Expression%20Tree/"/>
    <url>/2023/07/17/judge_girl/50247.%20Build%20a%20Boolean%20Expression%20Tree/</url>
    
    <content type="html"><![CDATA[<p>難度：4.5/5 Used Time: 22:00</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;buildTree.h&quot;</span></span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Node* val;<br>    <span class="hljs-type">int</span> end_idx;<br>&#125; info;<br> <br>Node* <span class="hljs-title function_">new_node</span><span class="hljs-params">(<span class="hljs-type">char</span>* c)</span>&#123;<br>    Node* n = (Node*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    n-&gt;val = c;<br>    n-&gt;left = <span class="hljs-literal">NULL</span>, n-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br> <br>info <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>* arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr[l][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;!&#x27;</span>)&#123;<br>        info next_info = dfs(arr, l + <span class="hljs-number">1</span>, n);<br>        Node* this_node = new_node(arr[l]);<br>        this_node-&gt;left = next_info.val;<br>        this_node-&gt;right = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> (info) &#123;this_node, next_info.end_idx&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[l][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>        info left_info = dfs(arr, l + <span class="hljs-number">1</span>, n);<br>        info right_info = dfs(arr, left_info.end_idx + <span class="hljs-number">1</span>, n);<br> <br>        Node* this_node = new_node(arr[left_info.end_idx]);<br>        this_node-&gt;left = left_info.val;<br>        this_node-&gt;right = right_info.val;<br>        <span class="hljs-keyword">return</span> (info) &#123;this_node, right_info.end_idx + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> (info) &#123;new_node(arr[l]), l + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br> <br>Node* <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span>&#123;<br>    <span class="hljs-type">char</span>* <span class="hljs-built_in">exp</span>[<span class="hljs-number">500005</span>]; <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> *token = strtok(s, <span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">while</span>(token != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">exp</span>[n++] = token;<br>        token = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    info ans_info = dfs(<span class="hljs-built_in">exp</span>, <span class="hljs-number">0</span>, n);<br>    <span class="hljs-keyword">return</span> ans_info.val;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>recursion</tag>
      
      <tag>parsing</tag>
      
      <tag>IMPORTANT</tag>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50251. Decode with a Huffman tree</title>
    <link href="/2023/07/17/judge_girl/50251.%20Decode%20with%20a%20Huffman%20tree/"/>
    <url>/2023/07/17/judge_girl/50251.%20Decode%20with%20a%20Huffman%20tree/</url>
    
    <content type="html"><![CDATA[<p>難度：3/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HuffmanDecoding.h&quot;</span></span><br><br><span class="hljs-comment">// typedef struct Node &#123;</span><br><span class="hljs-comment">//     char symbol[5];</span><br><span class="hljs-comment">//     int frequency;</span><br><span class="hljs-comment">//     struct Node *left, *right;</span><br><span class="hljs-comment">// &#125;Node;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HuffmanDecoding</span><span class="hljs-params">(Node *root, <span class="hljs-type">char</span> *data)</span>&#123;<br>    Node* now = root;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(data);<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SPACE</span><br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NEWLINE</span><br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(data[i] == <span class="hljs-string">&#x27;0&#x27;</span>) now = now-&gt;left;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data[i] == <span class="hljs-string">&#x27;1&#x27;</span>) now = now-&gt;right;<br><br>        <span class="hljs-keyword">if</span>(now-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; now-&gt;right == <span class="hljs-literal">NULL</span>) now = root;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(now != root)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1%c&quot;</span>, c);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(data[i] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            now = now-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data[i] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>            now = now-&gt;right;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(now-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; now-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%c&quot;</span>, now-&gt;symbol, c);<br>            now = root;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Solutions</category>
      
      <category>Judge Girl</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binary</tag>
      
      <tag>tree</tag>
      
      <tag>complier-flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
